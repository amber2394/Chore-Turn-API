var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { h } from "preact";
import MaterialComponent from "../MaterialComponent";
import Icon from "../Icon/";

/**
 * @prop mini = false
 * @prop exited = false
 */
class Fab extends MaterialComponent {
  constructor() {
    super();
    this.componentName = "fab";
    this._mdcProps = ["mini", "exited"];
  }
  componentDidMount() {
    super.attachRipple();
  }
  materialDom(props) {
    return h(
      "button",
      _extends({}, props, { ref: control => this.control = control }),
      props.children
    );
  }
}

class FabIcon extends Icon {
  constructor() {
    super();
    this.componentName = "fab__icon";
  }
}

Fab.Icon = FabIcon;
export default Fab;