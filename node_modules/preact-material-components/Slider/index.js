var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import { h } from "preact";
import MaterialComponent from "../MaterialComponent";
import { MDCSlider } from "@material/slider";

/**
 * @prop disabled = false
 */
export default class Slider extends MaterialComponent {
  constructor() {
    super();
    this.componentName = "slider";
    this._mdcProps = ["discrete"];
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
  }
  _onChange() {
    if (this.props.onChange) {
      this.props.onChange(this.MDComponent.value);
    }
  }
  _onInput() {
    if (this.props.onInput) {
      this.props.onInput(this.MDComponent.value);
    }
  }
  componentDidMount() {
    this.MDComponent = new MDCSlider(this.base);
    this.MDComponent.listen("MDCSlider:change", this._onChange);
    this.MDComponent.listen("MDCSlider:input", this._onInput);
    this.setValue(); // set initial value programatically because of error if min is greater than initial max
  }
  componentWillUnmount() {
    this.MDComponent.unlisten("MDCSlider:change", this._onChange);
    this.MDComponent.unlisten("MDCSlider:input", this._onInput);
    this.MDComponent.destroy && this.MDComponent.destroy();
  }
  setValue(props = this.props) {
    const { disabled = false, min = 0, max = 100, value, step } = props;
    if (this.MDComponent) {
      if (min > this.MDComponent.max) {
        this.MDComponent.max = max;
        this.MDComponent.min = min;
      } else {
        this.MDComponent.min = min;
        this.MDComponent.max = max;
      }

      this.MDComponent.value = value;
      this.MDComponent.disabled = disabled;
      this.MDComponent.step = step;
    }
  }

  materialDom(allprops) {
    const { tabindex = 0 } = allprops,
          props = _objectWithoutProperties(allprops, ["tabindex"]);

    this.setValue(allprops);
    return h(
      "div",
      _extends({
        tabindex: tabindex,
        role: "slider",
        "aria-label": "Select Value"
      }, props),
      h(
        "div",
        { "class": "mdc-slider__track-container" },
        h("div", { "class": "mdc-slider__track" })
      ),
      h(
        "div",
        { "class": "mdc-slider__thumb-container" },
        props.discrete && h(
          "div",
          { "class": "mdc-slider__pin" },
          h("span", { "class": "mdc-slider__pin-value-marker" })
        ),
        h(
          "svg",
          { "class": "mdc-slider__thumb", width: "21", height: "21" },
          h("circle", { cx: "10.5", cy: "10.5", r: "7.875" })
        ),
        h("div", { "class": "mdc-slider__focus-ring" })
      )
    );
  }
}