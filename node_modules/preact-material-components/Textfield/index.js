var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import { h, Component } from "preact";
import MaterialComponent from "../MaterialComponent";
import { MDCTextfield } from "@material/textfield/";

/**
 * @prop persistent = false
 * @prop validation-msg = false
 */
class Helptext extends MaterialComponent {
  constructor() {
    super();
    this.componentName = "textfield-helptext";
    this._mdcProps = ["persistent", "validation-msg"];
  }
  materialDom(props) {
    return h(
      "p",
      _extends({}, props, { "aria-hidden": "true" }),
      props.children
    );
  }
}

class Label extends MaterialComponent {
  constructor() {
    super();
    this.componentName = "textfield__label";
  }
  materialDom(props) {
    return h(
      "label",
      props,
      props.children
    );
  }
}

const defaultProps = {
  valid: true
};

/**
 * @prop fullwidth = false
 * @prop multiline = false
 * @prop dense = false
 * @prop disabled = false
 * @prop box = false
 * @prop type = 'text'
 * @prop value = ''
 * @prop label = ''
 */
class TextfieldInput extends MaterialComponent {
  constructor() {
    super();
    this.componentName = "textfield";
    this._mdcProps = ["fullwidth", "multiline", "dense", "disabled", "box"];
    this.state = {
      showFloatingLabel: false
    };
  }
  componentDidMount() {
    this.setState({
      showFloatingLabel: true
    }, () => {
      this.MDComponent = new MDCTextfield(this.control);
      this.props.onInit && this.props.onInit(this.MDComponent);
      setValid(defaultProps, this.props, this.MDComponent);
    });
  }
  componentWillUpdate(nextProps) {
    setValid(this.props, nextProps, this.MDComponent);
  }
  componentWillUnmount() {
    this.MDComponent && this.MDComponent.destroy && this.MDComponent.destroy();
  }
  materialDom(allprops) {
    let { className } = allprops,
        props = _objectWithoutProperties(allprops, ["className"]);

    if ("value" in props && this.state.showFloatingLabel) {
      className = [className, "mdc-textfield--upgraded"].join(" ");
    }

    return h(
      "div",
      { className: className, ref: control => this.control = control },
      props.multiline ? h("textarea", _extends({ className: "mdc-textfield__input" }, props)) : h("input", _extends({
        type: props.type || "text",
        className: "mdc-textfield__input"
      }, props)),
      props.label && this.state.showFloatingLabel && h(
        Label,
        { "for": props.id },
        props.label
      ),
      props.multiline ? "" : h("div", { "class": "mdc-textfield__bottom-line" })
    );
  }
}

/**
 * @prop fullwidth = false
 * @prop multiline = false
 * @prop dense = false
 * @prop disabled = false
 * @prop box = false
 * @prop type = 'text'
 * @prop value = ''
 * @prop label = ''
 * @prop helptext = ''
 * @prop helptextPersistent = false
 * @prop helptextValidationMsg = false
 */
class Textfield extends Component {
  constructor() {
    super();
    this.id = Textfield.uid();
    this.state = {
      showFloatingLabel: false
    };
  }

  componentDidMount() {
    this.setState({
      showFloatingLabel: true
    });
  }

  static uid() {
    if (!this.uidCounter) {
      this.uidCounter = 0;
    }
    return ++this.uidCounter;
  }

  render(allprops, { showFloatingLabel }) {
    const {
      className,
      helptextPersistent,
      helptextValidationMsg
    } = allprops,
          props = _objectWithoutProperties(allprops, ["className", "helptextPersistent", "helptextValidationMsg"]);
    const showDiv = props.helptext || props.label && !showFloatingLabel;

    if (showDiv && !props.id) {
      props.id = "tf-" + this.id;
    }

    // Helper text
    const helptextProps = {
      persistent: helptextPersistent,
      "validation-msg": helptextValidationMsg
    };

    return showDiv ? h(
      "div",
      { className: className },
      props.label && !showFloatingLabel && h(
        "label",
        { "for": props.id },
        props.cssLabel || `${props.label}: `
      ),
      h(TextfieldInput, _extends({}, props, {
        onInit: MDComponent => {
          this.MDComponent = MDComponent;
        },
        "aria-controls": props.helptext && props.id + "-helptext"
      })),
      props.helptext && h(
        Helptext,
        _extends({ id: props.id + "-helptext" }, helptextProps),
        props.helptext
      )
    ) : h(TextfieldInput, _extends({}, props, {
      className: className,
      onInit: MDComponent => {
        this.MDComponent = MDComponent;
      }
    }));
  }
}

function setValid(oldprops, newprops, textfield) {
  if ("valid" in oldprops && "valid" in newprops && oldprops.valid !== newprops.valid) {
    textfield.valid = newprops.valid;
  }
}

Textfield.Helptext = Helptext;

export default Textfield;