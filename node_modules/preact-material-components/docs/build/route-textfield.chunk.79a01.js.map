{"version":3,"sources":["webpack:///route-textfield.chunk.79a01.js","webpack:///./routes/textfield/sample.txt","webpack:///../node_modules/preact-material-components/Textfield/index.js","webpack:///../node_modules/@material/textfield/constants.js","webpack:///../node_modules/@material/textfield/adapter.js","webpack:///../node_modules/@material/textfield/foundation.js","webpack:///../node_modules/@material/textfield/index.js","webpack:///./routes/textfield/index.js"],"names":["webpackJsonp","IsP3","module","exports","dfOI","__webpack_exports__","__webpack_require__","foundation__classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","textfield__classCallCheck","textfield__possibleConstructorReturn","textfield__inherits","Textfield__classCallCheck","Textfield__possibleConstructorReturn","Textfield__inherits","_objectWithoutProperties","obj","keys","target","i","indexOf","hasOwnProperty","jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__classCallCheck","jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__possibleConstructorReturn","jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__inherits","defineProperty","preact_min","MaterialComponent","component","ripple","strings","ARIA_HIDDEN","ROLE","INPUT_SELECTOR","LABEL_SELECTOR","ICON_SELECTOR","ICON_EVENT","BOTTOM_LINE_SELECTOR","cssClasses","ROOT","UPGRADED","DISABLED","FOCUSED","INVALID","HELPTEXT_PERSISTENT","HELPTEXT_VALIDATION_MSG","LABEL_FLOAT_ABOVE","LABEL_SHAKE","BOX","TEXT_FIELD_ICON","TEXTAREA","BOTTOM_LINE_ACTIVE","foundation","MDCTextfieldAdapter","addClass","removeClass","addClassToLabel","removeClassFromLabel","setIconAttr","eventTargetHasClass","registerTextFieldInteractionHandler","deregisterTextFieldInteractionHandler","notifyIconAction","addClassToBottomLine","removeClassFromBottomLine","addClassToHelptext","removeClassFromHelptext","helptextHasClass","registerInputInteractionHandler","deregisterInputInteractionHandler","registerTransitionEndHandler","deregisterTransitionEndHandler","setBottomLineAttr","setHelptextAttr","removeHelptextAttr","getNativeInput","_extends","assign","arguments","length","source","key","_createClass","defineProperties","props","descriptor","protoProps","staticProps","foundation_MDCTextfieldFoundation","_MDCFoundation","MDCTextfieldFoundation","adapter","undefined","this","_this","defaultAdapter","isFocused_","receivedUserInput_","useCustomValidityChecking_","inputFocusHandler_","activateFocus_","inputBlurHandler_","deactivateFocus_","inputInputHandler_","autoCompleteFocus_","setPointerXOffset_","evt","setBottomLineTransformOrigin_","textFieldInteractionHandler_","handleTextFieldInteraction_","transitionEndHandler_","transitionEnd_","get","init","_this2","adapter_","getNativeInput_","forEach","evtType","destroy","_this3","disabled","type","targetIsIcon","eventTriggersNotification","keyCode","_MDCTextfieldFoundati","showHelptext_","attributeString","x","clientX","y","clientY","getBoundingClientRect","left","propertyName","_MDCTextfieldFoundati2","input","isBadInput_","changeValidity_","checkValidity","isValid","_MDCTextfieldFoundati3","updateHelptext_","_MDCTextfieldFoundati4","helptextIsPersistent","helptextIsValidationMsg","validationMsgNeedsDisplay","hideHelptext_","validity","badInput","isDisabled","setDisabled","setValid","textfield_foundation","textfield__extends","textfield__createClass","textfield_MDCTextfield","_MDCComponent","MDCTextfield","_len","args","Array","_key","apply","concat","attachTo","root","initialize","rippleFactory","el","input_","root_","querySelector","label_","helptextElement","hasAttribute","document","getElementById","getAttribute","classList","contains","bottomLine_","icon_","initialSyncWithDom","getDefaultFoundation","className","add","remove","label","handler","addEventListener","removeEventListener","emit","getInputAdapterMethods_","getHelptextAdapterMethods_","getBottomLineAdapterMethods_","getIconAdapterMethods_","name","setAttribute","_this4","attr","_this5","_this6","removeAttribute","foundation_","set","valid","Textfield__extends","Textfield_Helptext","_MaterialComponent","Helptext","componentName","_mdcProps","materialDom","aria-hidden","children","Textfield_Label","_MaterialComponent2","Label","Textfield_TextfieldInput","_MaterialComponent3","TextfieldInput","state","showFloatingLabel","componentDidMount","setState","MDComponent","control","onInit","componentWillUnmount","allprops","join","ref","multiline","for","id","class","Textfield_Textfield","_Component","Textfield","uid","uidCounter","render","_ref","_this7","helptextPersistent","helptextValidationMsg","showDiv","helptext","helptextProps","persistent","validation-msg","cssLabel","aria-controls","preact_material_components_Textfield","component_table","code_block","sample","sample_default","n","d","textfield_TextfieldPage","textfield__ref","_ref2","a","_ref3","_ref4","href","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","dense","_ref17","_ref18","_ref19","TextfieldPage","propsTable","description","data","onKeyUp","e","onInput"],"mappings":"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","file":"route-textfield.chunk.79a01.js","sourcesContent":["webpackJsonp([21],{\n\n/***/ \"IsP3\":\n/***/ (function(module, exports) {\n\nmodule.exports = \"import {h, Component} from 'preact';\\nimport Textfield from 'preact-material-components/Textfield';\\nimport 'preact-material-components/Textfield/style.css';\\n\\nexport default class TextfieldPage extends Component {\\n  render(){\\n    return (\\n      <div>\\n        <Textfield multiline={true} label=\\\"Textarea tag\\\"/>\\n      </div>\\n    );\\n  }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"dfOI\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ../node_modules/preact/dist/preact.min.js\nvar preact_min = __webpack_require__(\"KM04\");\nvar preact_min_default = /*#__PURE__*/__webpack_require__.n(preact_min);\n\n// EXTERNAL MODULE: ../node_modules/preact-material-components/MaterialComponent.js\nvar MaterialComponent = __webpack_require__(\"lhA9\");\n\n// EXTERNAL MODULE: ../node_modules/@material/base/component.js\nvar component = __webpack_require__(\"EQDb\");\n\n// EXTERNAL MODULE: ../node_modules/@material/ripple/index.js + 3 modules\nvar ripple = __webpack_require__(\"vkNc\");\n\n// CONCATENATED MODULE: ../node_modules/@material/textfield/constants.js\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nvar strings = {\n  ARIA_HIDDEN: 'aria-hidden',\n  ROLE: 'role',\n  INPUT_SELECTOR: '.mdc-textfield__input',\n  LABEL_SELECTOR: '.mdc-textfield__label',\n  ICON_SELECTOR: '.mdc-textfield__icon',\n  ICON_EVENT: 'MDCTextfield:icon',\n  BOTTOM_LINE_SELECTOR: '.mdc-textfield__bottom-line'\n};\n\n/** @enum {string} */\nvar cssClasses = {\n  ROOT: 'mdc-textfield',\n  UPGRADED: 'mdc-textfield--upgraded',\n  DISABLED: 'mdc-textfield--disabled',\n  FOCUSED: 'mdc-textfield--focused',\n  INVALID: 'mdc-textfield--invalid',\n  HELPTEXT_PERSISTENT: 'mdc-textfield-helptext--persistent',\n  HELPTEXT_VALIDATION_MSG: 'mdc-textfield-helptext--validation-msg',\n  LABEL_FLOAT_ABOVE: 'mdc-textfield__label--float-above',\n  LABEL_SHAKE: 'mdc-textfield__label--shake',\n  BOX: 'mdc-textfield--box',\n  TEXT_FIELD_ICON: 'mdc-textfield__icon',\n  TEXTAREA: 'mdc-textfield--textarea',\n  BOTTOM_LINE_ACTIVE: 'mdc-textfield__bottom-line--active'\n};\n\n\n// CONCATENATED MODULE: ../node_modules/@material/textfield/adapter.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * @typedef {{\n *   value: string,\n *   disabled: boolean,\n *   badInput: boolean,\n *   checkValidity: (function(): boolean)\n * }}\n */\nvar NativeInputType = void 0;\n\n/**\n * Adapter for MDC Textfield.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Textfield into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\n\nvar MDCTextfieldAdapter = function () {\n  function MDCTextfieldAdapter() {\n    _classCallCheck(this, MDCTextfieldAdapter);\n  }\n\n  /**\n   * Adds a class to the root Element.\n   * @param {string} className\n   */\n  MDCTextfieldAdapter.prototype.addClass = function addClass(className) {};\n\n  /**\n   * Removes a class from the root Element.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.removeClass = function removeClass(className) {};\n\n  /**\n   * Adds a class to the label Element. We recommend you add a conditional\n   * check here, and in removeClassFromLabel for whether or not the label is\n   * present so that the JS component could be used with text fields that don't\n   * require a label, such as the full-width text field.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.addClassToLabel = function addClassToLabel(className) {};\n\n  /**\n   * Removes a class from the label Element.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.removeClassFromLabel = function removeClassFromLabel(className) {};\n\n  /**\n   * Sets an attribute on the icon Element.\n   * @param {string} name\n   * @param {string} value\n   */\n\n\n  MDCTextfieldAdapter.prototype.setIconAttr = function setIconAttr(name, value) {};\n\n  /**\n   * Returns true if classname exists for a given target element.\n   * @param {?EventTarget} target\n   * @param {string} className\n   * @return {boolean}\n   */\n\n\n  MDCTextfieldAdapter.prototype.eventTargetHasClass = function eventTargetHasClass(target, className) {};\n\n  /**\n   * Registers an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n\n\n  MDCTextfieldAdapter.prototype.registerTextFieldInteractionHandler = function registerTextFieldInteractionHandler(type, handler) {};\n\n  /**\n   * Deregisters an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n\n\n  MDCTextfieldAdapter.prototype.deregisterTextFieldInteractionHandler = function deregisterTextFieldInteractionHandler(type, handler) {};\n\n  /**\n   * Emits a custom event \"MDCTextfield:icon\" denoting a user has clicked the icon.\n   */\n\n\n  MDCTextfieldAdapter.prototype.notifyIconAction = function notifyIconAction() {};\n\n  /**\n   * Adds a class to the bottom line element.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.addClassToBottomLine = function addClassToBottomLine(className) {};\n\n  /**\n   * Removes a class from the bottom line element.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.removeClassFromBottomLine = function removeClassFromBottomLine(className) {};\n\n  /**\n   * Adds a class to the help text element. Note that in our code we check for\n   * whether or not we have a help text element and if we don't, we simply\n   * return.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.addClassToHelptext = function addClassToHelptext(className) {};\n\n  /**\n   * Removes a class from the help text element.\n   * @param {string} className\n   */\n\n\n  MDCTextfieldAdapter.prototype.removeClassFromHelptext = function removeClassFromHelptext(className) {};\n\n  /**\n   * Returns whether or not the help text element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n\n\n  MDCTextfieldAdapter.prototype.helptextHasClass = function helptextHasClass(className) {};\n\n  /**\n   * Registers an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n\n\n  MDCTextfieldAdapter.prototype.registerInputInteractionHandler = function registerInputInteractionHandler(evtType, handler) {};\n\n  /**\n   * Deregisters an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n\n\n  MDCTextfieldAdapter.prototype.deregisterInputInteractionHandler = function deregisterInputInteractionHandler(evtType, handler) {};\n\n  /**\n   * Registers an event listener on the bottom line element for a \"transitionend\" event.\n   * @param {function(!Event): undefined} handler\n   */\n\n\n  MDCTextfieldAdapter.prototype.registerTransitionEndHandler = function registerTransitionEndHandler(handler) {};\n\n  /**\n   * Deregisters an event listener on the bottom line element for a \"transitionend\" event.\n   * @param {function(!Event): undefined} handler\n   */\n\n\n  MDCTextfieldAdapter.prototype.deregisterTransitionEndHandler = function deregisterTransitionEndHandler(handler) {};\n\n  /**\n   * Sets an attribute with a given value on the bottom line element.\n   * @param {string} attr\n   * @param {string} value\n   */\n\n\n  MDCTextfieldAdapter.prototype.setBottomLineAttr = function setBottomLineAttr(attr, value) {};\n\n  /**\n   * Sets an attribute with a given value on the help text element.\n   * @param {string} name\n   * @param {string} value\n   */\n\n\n  MDCTextfieldAdapter.prototype.setHelptextAttr = function setHelptextAttr(name, value) {};\n\n  /**\n   * Removes an attribute from the help text element.\n   * @param {string} name\n   */\n\n\n  MDCTextfieldAdapter.prototype.removeHelptextAttr = function removeHelptextAttr(name) {};\n\n  /**\n   * Returns an object representing the native text input element, with a\n   * similar API shape. The object returned should include the value, disabled\n   * and badInput properties, as well as the checkValidity() function. We never\n   * alter the value within our code, however we do update the disabled\n   * property, so if you choose to duck-type the return value for this method\n   * in your implementation it's important to keep this in mind. Also note that\n   * this method can return null, which the foundation will handle gracefully.\n   * @return {?Element|?NativeInputType}\n   */\n\n\n  MDCTextfieldAdapter.prototype.getNativeInput = function getNativeInput() {};\n\n  return MDCTextfieldAdapter;\n}();\n\n\n// EXTERNAL MODULE: ../node_modules/@material/base/foundation.js\nvar foundation = __webpack_require__(\"uJAj\");\n\n// CONCATENATED MODULE: ../node_modules/@material/textfield/foundation.js\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * @extends {MDCFoundation<!MDCTextfieldAdapter>}\n * @final\n */\n\nvar foundation_MDCTextfieldFoundation = function (_MDCFoundation) {\n  _inherits(MDCTextfieldFoundation, _MDCFoundation);\n\n  _createClass(MDCTextfieldFoundation, null, [{\n    key: 'cssClasses',\n\n    /** @return enum {string} */\n    get: function get() {\n      return cssClasses;\n    }\n\n    /** @return enum {string} */\n\n  }, {\n    key: 'strings',\n    get: function get() {\n      return strings;\n    }\n\n    /**\n     * {@see MDCTextfieldAdapter} for typing information on parameters and return\n     * types.\n     * @return {!MDCTextfieldAdapter}\n     */\n\n  }, {\n    key: 'defaultAdapter',\n    get: function get() {\n      return (/** @type {!MDCTextfieldAdapter} */{\n          addClass: function addClass() {},\n          removeClass: function removeClass() {},\n          addClassToLabel: function addClassToLabel() {},\n          removeClassFromLabel: function removeClassFromLabel() {},\n          setIconAttr: function setIconAttr() {},\n          eventTargetHasClass: function eventTargetHasClass() {},\n          registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler() {},\n          deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler() {},\n          notifyIconAction: function notifyIconAction() {},\n          addClassToBottomLine: function addClassToBottomLine() {},\n          removeClassFromBottomLine: function removeClassFromBottomLine() {},\n          addClassToHelptext: function addClassToHelptext() {},\n          removeClassFromHelptext: function removeClassFromHelptext() {},\n          helptextHasClass: function helptextHasClass() {\n            return false;\n          },\n          registerInputInteractionHandler: function registerInputInteractionHandler() {},\n          deregisterInputInteractionHandler: function deregisterInputInteractionHandler() {},\n          registerTransitionEndHandler: function registerTransitionEndHandler() {},\n          deregisterTransitionEndHandler: function deregisterTransitionEndHandler() {},\n          setBottomLineAttr: function setBottomLineAttr() {},\n          setHelptextAttr: function setHelptextAttr() {},\n          removeHelptextAttr: function removeHelptextAttr() {},\n          getNativeInput: function getNativeInput() {}\n        }\n      );\n    }\n\n    /**\n     * @param {!MDCTextfieldAdapter=} adapter\n     */\n\n  }]);\n\n  function MDCTextfieldFoundation() {\n    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /** @type {!MDCTextfieldAdapter} */{};\n\n    foundation__classCallCheck(this, MDCTextfieldFoundation);\n\n    /** @private {boolean} */\n    var _this = _possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCTextfieldFoundation.defaultAdapter, adapter)));\n\n    _this.isFocused_ = false;\n    /** @private {boolean} */\n    _this.receivedUserInput_ = false;\n    /** @private {boolean} */\n    _this.useCustomValidityChecking_ = false;\n    /** @private {function(): undefined} */\n    _this.inputFocusHandler_ = function () {\n      return _this.activateFocus_();\n    };\n    /** @private {function(): undefined} */\n    _this.inputBlurHandler_ = function () {\n      return _this.deactivateFocus_();\n    };\n    /** @private {function(): undefined} */\n    _this.inputInputHandler_ = function () {\n      return _this.autoCompleteFocus_();\n    };\n    /** @private {function(!Event): undefined} */\n    _this.setPointerXOffset_ = function (evt) {\n      return _this.setBottomLineTransformOrigin_(evt);\n    };\n    /** @private {function(!Event): undefined} */\n    _this.textFieldInteractionHandler_ = function (evt) {\n      return _this.handleTextFieldInteraction_(evt);\n    };\n    /** @private {function(!Event): undefined} */\n    _this.transitionEndHandler_ = function (evt) {\n      return _this.transitionEnd_(evt);\n    };\n    return _this;\n  }\n\n  MDCTextfieldFoundation.prototype.init = function init() {\n    var _this2 = this;\n\n    this.adapter_.addClass(MDCTextfieldFoundation.cssClasses.UPGRADED);\n    // Ensure label does not collide with any pre-filled value.\n    if (this.getNativeInput_().value) {\n      this.adapter_.addClassToLabel(MDCTextfieldFoundation.cssClasses.LABEL_FLOAT_ABOVE);\n    }\n\n    this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach(function (evtType) {\n      _this2.adapter_.registerInputInteractionHandler(evtType, _this2.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach(function (evtType) {\n      _this2.adapter_.registerTextFieldInteractionHandler(evtType, _this2.textFieldInteractionHandler_);\n    });\n    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);\n  };\n\n  MDCTextfieldFoundation.prototype.destroy = function destroy() {\n    var _this3 = this;\n\n    this.adapter_.removeClass(MDCTextfieldFoundation.cssClasses.UPGRADED);\n    this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach(function (evtType) {\n      _this3.adapter_.deregisterInputInteractionHandler(evtType, _this3.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach(function (evtType) {\n      _this3.adapter_.deregisterTextFieldInteractionHandler(evtType, _this3.textFieldInteractionHandler_);\n    });\n    this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);\n  };\n\n  /**\n   * Handles all user interactions with the Textfield.\n   * @param {!Event} evt\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.handleTextFieldInteraction_ = function handleTextFieldInteraction_(evt) {\n    if (this.adapter_.getNativeInput().disabled) {\n      return;\n    }\n\n    this.receivedUserInput_ = true;\n\n    var target = evt.target,\n        type = evt.type;\n    var TEXT_FIELD_ICON = MDCTextfieldFoundation.cssClasses.TEXT_FIELD_ICON;\n\n    var targetIsIcon = this.adapter_.eventTargetHasClass(target, TEXT_FIELD_ICON);\n    var eventTriggersNotification = type === 'click' || evt.key === 'Enter' || evt.keyCode === 13;\n\n    if (targetIsIcon && eventTriggersNotification) {\n      this.adapter_.notifyIconAction();\n    }\n  };\n\n  /**\n   * Activates the text field focus state.\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.activateFocus_ = function activateFocus_() {\n    var _MDCTextfieldFoundati = MDCTextfieldFoundation.cssClasses,\n        BOTTOM_LINE_ACTIVE = _MDCTextfieldFoundati.BOTTOM_LINE_ACTIVE,\n        FOCUSED = _MDCTextfieldFoundati.FOCUSED,\n        LABEL_FLOAT_ABOVE = _MDCTextfieldFoundati.LABEL_FLOAT_ABOVE,\n        LABEL_SHAKE = _MDCTextfieldFoundati.LABEL_SHAKE;\n\n    this.adapter_.addClass(FOCUSED);\n    this.adapter_.addClassToBottomLine(BOTTOM_LINE_ACTIVE);\n    this.adapter_.addClassToLabel(LABEL_FLOAT_ABOVE);\n    this.adapter_.removeClassFromLabel(LABEL_SHAKE);\n    this.showHelptext_();\n    this.isFocused_ = true;\n  };\n\n  /**\n   * Sets the transform-origin of the bottom line, causing it to animate out\n   * from the user's click location.\n   * @param {!Event} evt\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.setBottomLineTransformOrigin_ = function setBottomLineTransformOrigin_(evt) {\n    var targetClientRect = evt.target.getBoundingClientRect();\n    var evtCoords = { x: evt.clientX, y: evt.clientY };\n    var normalizedX = evtCoords.x - targetClientRect.left;\n    var attributeString = 'transform-origin: ' + normalizedX + 'px center';\n\n    this.adapter_.setBottomLineAttr('style', attributeString);\n  };\n\n  /**\n   * Activates the Textfield's focus state in cases when the input value\n   * changes without user input (e.g. programatically).\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.autoCompleteFocus_ = function autoCompleteFocus_() {\n    if (!this.receivedUserInput_) {\n      this.activateFocus_();\n    }\n  };\n\n  /**\n   * Makes the help text visible to screen readers.\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.showHelptext_ = function showHelptext_() {\n    var ARIA_HIDDEN = MDCTextfieldFoundation.strings.ARIA_HIDDEN;\n\n    this.adapter_.removeHelptextAttr(ARIA_HIDDEN);\n  };\n\n  /**\n   * Fires when animation transition ends, performing actions that must wait\n   * for animations to finish.\n   * @param {!Event} evt\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.transitionEnd_ = function transitionEnd_(evt) {\n    var BOTTOM_LINE_ACTIVE = MDCTextfieldFoundation.cssClasses.BOTTOM_LINE_ACTIVE;\n\n    // We need to wait for the bottom line to be entirely transparent\n    // before removing the class. If we do not, we see the line start to\n    // scale down before disappearing\n\n    if (evt.propertyName === 'opacity' && !this.isFocused_) {\n      this.adapter_.removeClassFromBottomLine(BOTTOM_LINE_ACTIVE);\n    }\n  };\n\n  /**\n   * Deactives the Textfield's focus state.\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.deactivateFocus_ = function deactivateFocus_() {\n    var _MDCTextfieldFoundati2 = MDCTextfieldFoundation.cssClasses,\n        FOCUSED = _MDCTextfieldFoundati2.FOCUSED,\n        LABEL_FLOAT_ABOVE = _MDCTextfieldFoundati2.LABEL_FLOAT_ABOVE,\n        LABEL_SHAKE = _MDCTextfieldFoundati2.LABEL_SHAKE;\n\n    var input = this.getNativeInput_();\n\n    this.isFocused_ = false;\n    this.adapter_.removeClass(FOCUSED);\n    this.adapter_.removeClassFromLabel(LABEL_SHAKE);\n\n    if (!input.value && !this.isBadInput_()) {\n      this.adapter_.removeClassFromLabel(LABEL_FLOAT_ABOVE);\n      this.receivedUserInput_ = false;\n    }\n\n    if (!this.useCustomValidityChecking_) {\n      this.changeValidity_(input.checkValidity());\n    }\n  };\n\n  /**\n   * Updates the Textfield's valid state based on the supplied validity.\n   * @param {boolean} isValid\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.changeValidity_ = function changeValidity_(isValid) {\n    var _MDCTextfieldFoundati3 = MDCTextfieldFoundation.cssClasses,\n        INVALID = _MDCTextfieldFoundati3.INVALID,\n        LABEL_SHAKE = _MDCTextfieldFoundati3.LABEL_SHAKE;\n\n    if (isValid) {\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.addClassToLabel(LABEL_SHAKE);\n      this.adapter_.addClass(INVALID);\n    }\n    this.updateHelptext_(isValid);\n  };\n\n  /**\n   * Updates the state of the Textfield's help text based on validity and\n   * the Textfield's options.\n   * @param {boolean} isValid\n   */\n\n\n  MDCTextfieldFoundation.prototype.updateHelptext_ = function updateHelptext_(isValid) {\n    var _MDCTextfieldFoundati4 = MDCTextfieldFoundation.cssClasses,\n        HELPTEXT_PERSISTENT = _MDCTextfieldFoundati4.HELPTEXT_PERSISTENT,\n        HELPTEXT_VALIDATION_MSG = _MDCTextfieldFoundati4.HELPTEXT_VALIDATION_MSG;\n    var ROLE = MDCTextfieldFoundation.strings.ROLE;\n\n    var helptextIsPersistent = this.adapter_.helptextHasClass(HELPTEXT_PERSISTENT);\n    var helptextIsValidationMsg = this.adapter_.helptextHasClass(HELPTEXT_VALIDATION_MSG);\n    var validationMsgNeedsDisplay = helptextIsValidationMsg && !isValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.adapter_.setHelptextAttr(ROLE, 'alert');\n    } else {\n      this.adapter_.removeHelptextAttr(ROLE);\n    }\n\n    if (helptextIsPersistent || validationMsgNeedsDisplay) {\n      return;\n    }\n    this.hideHelptext_();\n  };\n\n  /**\n   * Hides the help text from screen readers.\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.hideHelptext_ = function hideHelptext_() {\n    var ARIA_HIDDEN = MDCTextfieldFoundation.strings.ARIA_HIDDEN;\n\n    this.adapter_.setHelptextAttr(ARIA_HIDDEN, 'true');\n  };\n\n  /**\n   * @return {boolean} True if the Textfield input fails validity checks.\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.isBadInput_ = function isBadInput_() {\n    var input = this.getNativeInput_();\n    return input.validity ? input.validity.badInput : input.badInput;\n  };\n\n  /**\n   * @return {boolean} True if the Textfield is disabled.\n   */\n\n\n  MDCTextfieldFoundation.prototype.isDisabled = function isDisabled() {\n    return this.getNativeInput_().disabled;\n  };\n\n  /**\n   * @param {boolean} disabled Sets the textfield disabled or enabled.\n   */\n\n\n  MDCTextfieldFoundation.prototype.setDisabled = function setDisabled(disabled) {\n    var DISABLED = MDCTextfieldFoundation.cssClasses.DISABLED;\n\n    this.getNativeInput_().disabled = disabled;\n    if (disabled) {\n      this.adapter_.addClass(DISABLED);\n      this.adapter_.setIconAttr('tabindex', '-1');\n    } else {\n      this.adapter_.removeClass(DISABLED);\n      this.adapter_.setIconAttr('tabindex', '0');\n    }\n  };\n\n  /**\n   * @return {!Element|!NativeInputType} The native text input from the\n   * host environment, or a dummy if none exists.\n   * @private\n   */\n\n\n  MDCTextfieldFoundation.prototype.getNativeInput_ = function getNativeInput_() {\n    return this.adapter_.getNativeInput() ||\n    /** @type {!NativeInputType} */{\n      checkValidity: function checkValidity() {\n        return true;\n      },\n      value: '',\n      disabled: false,\n      badInput: false\n    };\n  };\n\n  /**\n   * @param {boolean} isValid Sets the validity state of the Textfield.\n   */\n\n\n  MDCTextfieldFoundation.prototype.setValid = function setValid(isValid) {\n    this.useCustomValidityChecking_ = true;\n    this.changeValidity_(isValid);\n  };\n\n  return MDCTextfieldFoundation;\n}(foundation[\"a\" /* default */]);\n\n/* harmony default export */ var textfield_foundation = (foundation_MDCTextfieldFoundation);\n// CONCATENATED MODULE: ../node_modules/@material/textfield/index.js\nvar textfield__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar textfield__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction textfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction textfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction textfield__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/**\n * @extends {MDCComponent<!MDCTextfieldFoundation>}\n * @final\n */\n\nvar textfield_MDCTextfield = function (_MDCComponent) {\n  textfield__inherits(MDCTextfield, _MDCComponent);\n\n  /**\n   * @param {...?} args\n   */\n  function MDCTextfield() {\n    textfield__classCallCheck(this, MDCTextfield);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    /** @private {?Element} */\n    var _this = textfield__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));\n\n    _this.input_;\n    /** @private {?Element} */\n    _this.label_;\n    /** @type {?Element} */\n    _this.helptextElement;\n    /** @type {?MDCRipple} */\n    _this.ripple;\n    /** @private {?Element} */\n    _this.bottomLine_;\n    /** @private {?Element} */\n    _this.icon_;\n    return _this;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCTextfield}\n   */\n\n\n  MDCTextfield.attachTo = function attachTo(root) {\n    return new MDCTextfield(root);\n  };\n\n  /**\n   * @param {(function(!Element): !MDCRipple)=} rippleFactory A function which\n   * creates a new MDCRipple.\n   */\n\n\n  MDCTextfield.prototype.initialize = function initialize() {\n    var rippleFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {\n      return new ripple[\"a\" /* MDCRipple */](el);\n    };\n\n    this.input_ = this.root_.querySelector(strings.INPUT_SELECTOR);\n    this.label_ = this.root_.querySelector(strings.LABEL_SELECTOR);\n    this.helptextElement = null;\n    this.ripple = null;\n    if (this.input_.hasAttribute('aria-controls')) {\n      this.helptextElement = document.getElementById(this.input_.getAttribute('aria-controls'));\n    }\n    if (this.root_.classList.contains(cssClasses.BOX)) {\n      this.ripple = rippleFactory(this.root_);\n    };\n    if (!this.root_.classList.contains(cssClasses.TEXTAREA)) {\n      this.bottomLine_ = this.root_.querySelector(strings.BOTTOM_LINE_SELECTOR);\n    };\n    if (!this.root_.classList.contains(cssClasses.TEXT_FIELD_ICON)) {\n      this.icon_ = this.root_.querySelector(strings.ICON_SELECTOR);\n    };\n  };\n\n  MDCTextfield.prototype.destroy = function destroy() {\n    if (this.ripple) {\n      this.ripple.destroy();\n    }\n    _MDCComponent.prototype.destroy.call(this);\n  };\n\n  /**\n   * Initiliazes the Textfield's internal state based on the environment's\n   * state.\n   */\n\n\n  MDCTextfield.prototype.initialSyncWithDom = function initialSyncWithDom() {\n    this.disabled = this.input_.disabled;\n  };\n\n  /**\n   * @return {boolean} True if the Textfield is disabled.\n   */\n\n\n  /**\n   * @return {!MDCTextfieldFoundation}\n   */\n  MDCTextfield.prototype.getDefaultFoundation = function getDefaultFoundation() {\n    var _this2 = this;\n\n    return new textfield_foundation( /** @type {!MDCTextfieldAdapter} */textfield__extends({\n      addClass: function addClass(className) {\n        return _this2.root_.classList.add(className);\n      },\n      removeClass: function removeClass(className) {\n        return _this2.root_.classList.remove(className);\n      },\n      addClassToLabel: function addClassToLabel(className) {\n        var label = _this2.label_;\n        if (label) {\n          label.classList.add(className);\n        }\n      },\n      removeClassFromLabel: function removeClassFromLabel(className) {\n        var label = _this2.label_;\n        if (label) {\n          label.classList.remove(className);\n        }\n      },\n      eventTargetHasClass: function eventTargetHasClass(target, className) {\n        return target.classList.contains(className);\n      },\n      registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler(evtType, handler) {\n        return _this2.root_.addEventListener(evtType, handler);\n      },\n      deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler(evtType, handler) {\n        return _this2.root_.removeEventListener(evtType, handler);\n      },\n      notifyIconAction: function notifyIconAction() {\n        return _this2.emit(textfield_foundation.strings.ICON_EVENT, {});\n      }\n    }, this.getInputAdapterMethods_(), this.getHelptextAdapterMethods_(), this.getBottomLineAdapterMethods_(), this.getIconAdapterMethods_()));\n  };\n\n  /**\n   * @return {!{\n   *   setIconAttr: function(string, string): undefined,\n   * }}\n   */\n\n\n  MDCTextfield.prototype.getIconAdapterMethods_ = function getIconAdapterMethods_() {\n    var _this3 = this;\n\n    return {\n      setIconAttr: function setIconAttr(name, value) {\n        if (_this3.icon_) {\n          _this3.icon_.setAttribute(name, value);\n        }\n      }\n    };\n  };\n\n  /**\n   * @return {!{\n   *   addClassToBottomLine: function(string): undefined,\n   *   removeClassFromBottomLine: function(string): undefined,\n   *   setBottomLineAttr: function(string, string): undefined,\n   *   registerTransitionEndHandler: function(function()): undefined,\n   *   deregisterTransitionEndHandler: function(function()): undefined,\n   * }}\n   */\n\n\n  MDCTextfield.prototype.getBottomLineAdapterMethods_ = function getBottomLineAdapterMethods_() {\n    var _this4 = this;\n\n    return {\n      addClassToBottomLine: function addClassToBottomLine(className) {\n        if (_this4.bottomLine_) {\n          _this4.bottomLine_.classList.add(className);\n        }\n      },\n      removeClassFromBottomLine: function removeClassFromBottomLine(className) {\n        if (_this4.bottomLine_) {\n          _this4.bottomLine_.classList.remove(className);\n        }\n      },\n      setBottomLineAttr: function setBottomLineAttr(attr, value) {\n        if (_this4.bottomLine_) {\n          _this4.bottomLine_.setAttribute(attr, value);\n        }\n      },\n      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {\n        if (_this4.bottomLine_) {\n          _this4.bottomLine_.addEventListener('transitionend', handler);\n        }\n      },\n      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {\n        if (_this4.bottomLine_) {\n          _this4.bottomLine_.removeEventListener('transitionend', handler);\n        }\n      }\n    };\n  };\n\n  /**\n   * @return {!{\n   *   registerInputInteractionHandler: function(string, function()): undefined,\n   *   deregisterInputInteractionHandler: function(string, function()): undefined,\n   *   getNativeInput: function(): ?Element,\n   * }}\n   */\n\n\n  MDCTextfield.prototype.getInputAdapterMethods_ = function getInputAdapterMethods_() {\n    var _this5 = this;\n\n    return {\n      registerInputInteractionHandler: function registerInputInteractionHandler(evtType, handler) {\n        return _this5.input_.addEventListener(evtType, handler);\n      },\n      deregisterInputInteractionHandler: function deregisterInputInteractionHandler(evtType, handler) {\n        return _this5.input_.removeEventListener(evtType, handler);\n      },\n      getNativeInput: function getNativeInput() {\n        return _this5.input_;\n      }\n    };\n  };\n\n  /**\n   * @return {!{\n   *   addClassToHelptext: function(string): undefined,\n   *   removeClassFromHelptext: function(string): undefined,\n   *   helptextHasClass: function(string): boolean,\n   *   setHelptextAttr: function(string, string): undefined,\n   *   removeHelptextAttr: function(string): undefined,\n   * }}\n   */\n\n\n  MDCTextfield.prototype.getHelptextAdapterMethods_ = function getHelptextAdapterMethods_() {\n    var _this6 = this;\n\n    return {\n      addClassToHelptext: function addClassToHelptext(className) {\n        if (_this6.helptextElement) {\n          _this6.helptextElement.classList.add(className);\n        }\n      },\n      removeClassFromHelptext: function removeClassFromHelptext(className) {\n        if (_this6.helptextElement) {\n          _this6.helptextElement.classList.remove(className);\n        }\n      },\n      helptextHasClass: function helptextHasClass(className) {\n        if (!_this6.helptextElement) {\n          return false;\n        }\n        return _this6.helptextElement.classList.contains(className);\n      },\n      setHelptextAttr: function setHelptextAttr(name, value) {\n        if (_this6.helptextElement) {\n          _this6.helptextElement.setAttribute(name, value);\n        }\n      },\n      removeHelptextAttr: function removeHelptextAttr(name) {\n        if (_this6.helptextElement) {\n          _this6.helptextElement.removeAttribute(name);\n        }\n      }\n    };\n  };\n\n  textfield__createClass(MDCTextfield, [{\n    key: 'disabled',\n    get: function get() {\n      return this.foundation_.isDisabled();\n    }\n\n    /**\n     * @param {boolean} disabled Sets the Textfield disabled or enabled.\n     */\n    ,\n    set: function set(disabled) {\n      this.foundation_.setDisabled(disabled);\n    }\n\n    /**\n     * @param {boolean} valid Sets the Textfield valid or invalid.\n     */\n\n  }, {\n    key: 'valid',\n    set: function set(valid) {\n      this.foundation_.setValid(valid);\n    }\n  }]);\n\n  return MDCTextfield;\n}(component[\"a\" /* default */]);\n\n\n// CONCATENATED MODULE: ../node_modules/preact-material-components/Textfield/index.js\nfunction Textfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Textfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction Textfield__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Textfield__extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n  }return target;\n}\n\n\n\n\n\n/**\n * @prop persistent = false\n * @prop validation-msg = false\n */\n\nvar Textfield_Helptext = function (_MaterialComponent) {\n  Textfield__inherits(Helptext, _MaterialComponent);\n\n  function Helptext() {\n    Textfield__classCallCheck(this, Helptext);\n\n    var _this = Textfield__possibleConstructorReturn(this, _MaterialComponent.call(this));\n\n    _this.componentName = \"textfield-helptext\";\n    _this._mdcProps = [\"persistent\", \"validation-msg\"];\n    return _this;\n  }\n\n  Helptext.prototype.materialDom = function materialDom(props) {\n    return Object(preact_min[\"h\"])(\"p\", Textfield__extends({}, props, { \"aria-hidden\": \"true\" }), props.children);\n  };\n\n  return Helptext;\n}(MaterialComponent[\"a\" /* default */]);\n\nvar Textfield_Label = function (_MaterialComponent2) {\n  Textfield__inherits(Label, _MaterialComponent2);\n\n  function Label() {\n    Textfield__classCallCheck(this, Label);\n\n    var _this2 = Textfield__possibleConstructorReturn(this, _MaterialComponent2.call(this));\n\n    _this2.componentName = \"textfield__label\";\n    return _this2;\n  }\n\n  Label.prototype.materialDom = function materialDom(props) {\n    return Object(preact_min[\"h\"])(\"label\", props, props.children);\n  };\n\n  return Label;\n}(MaterialComponent[\"a\" /* default */]);\n\n/**\n * @prop fullwidth = false\n * @prop multiline = false\n * @prop dense = false\n * @prop disabled = false\n * @prop box = false\n * @prop type = 'text'\n * @prop value = ''\n * @prop label = ''\n */\n\n\nvar Textfield_TextfieldInput = function (_MaterialComponent3) {\n  Textfield__inherits(TextfieldInput, _MaterialComponent3);\n\n  function TextfieldInput() {\n    Textfield__classCallCheck(this, TextfieldInput);\n\n    var _this3 = Textfield__possibleConstructorReturn(this, _MaterialComponent3.call(this));\n\n    _this3.componentName = \"textfield\";\n    _this3._mdcProps = [\"fullwidth\", \"multiline\", \"dense\", \"disabled\", \"box\"];\n    _this3.state = {\n      showFloatingLabel: false\n    };\n    return _this3;\n  }\n\n  TextfieldInput.prototype.componentDidMount = function componentDidMount() {\n    var _this4 = this;\n\n    this.setState({\n      showFloatingLabel: true\n    }, function () {\n      _this4.MDComponent = new textfield_MDCTextfield(_this4.control);\n      _this4.props.onInit && _this4.props.onInit(_this4.MDComponent);\n    });\n  };\n\n  TextfieldInput.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.MDComponent && this.MDComponent.destroy && this.MDComponent.destroy();\n  };\n\n  TextfieldInput.prototype.materialDom = function materialDom(allprops) {\n    var _this5 = this;\n\n    var className = allprops.className,\n        props = _objectWithoutProperties(allprops, [\"className\"]);\n\n\n    if (\"value\" in props && this.state.showFloatingLabel) {\n      className = [className, \"mdc-textfield--upgraded\"].join(\" \");\n    }\n\n    return Object(preact_min[\"h\"])(\"div\", { className: className, ref: function ref(control) {\n        return _this5.control = control;\n      } }, props.multiline ? Object(preact_min[\"h\"])(\"textarea\", Textfield__extends({ className: \"mdc-textfield__input\" }, props)) : Object(preact_min[\"h\"])(\"input\", Textfield__extends({\n      type: props.type || \"text\",\n      className: \"mdc-textfield__input\"\n    }, props)), props.label && this.state.showFloatingLabel && Object(preact_min[\"h\"])(Textfield_Label, { \"for\": props.id }, props.label), props.multiline ? \"\" : Object(preact_min[\"h\"])(\"div\", { \"class\": \"mdc-textfield__bottom-line\" }));\n  };\n\n  return TextfieldInput;\n}(MaterialComponent[\"a\" /* default */]);\n\n/**\n * @prop fullwidth = false\n * @prop multiline = false\n * @prop dense = false\n * @prop disabled = false\n * @prop box = false\n * @prop type = 'text'\n * @prop value = ''\n * @prop label = ''\n * @prop helptext = ''\n * @prop helptextPersistent = false\n * @prop helptextValidationMsg = false\n */\n\n\nvar Textfield_Textfield = function (_Component) {\n  Textfield__inherits(Textfield, _Component);\n\n  function Textfield() {\n    Textfield__classCallCheck(this, Textfield);\n\n    var _this6 = Textfield__possibleConstructorReturn(this, _Component.call(this));\n\n    _this6.id = Textfield.uid();\n    _this6.state = {\n      showFloatingLabel: false\n    };\n    return _this6;\n  }\n\n  Textfield.prototype.componentDidMount = function componentDidMount() {\n    this.setState({\n      showFloatingLabel: true\n    });\n  };\n\n  Textfield.uid = function uid() {\n    if (!this.uidCounter) {\n      this.uidCounter = 0;\n    }\n    return ++this.uidCounter;\n  };\n\n  Textfield.prototype.render = function render(allprops, _ref) {\n    var _this7 = this;\n\n    var showFloatingLabel = _ref.showFloatingLabel;\n\n    var className = allprops.className,\n        helptextPersistent = allprops.helptextPersistent,\n        helptextValidationMsg = allprops.helptextValidationMsg,\n        props = _objectWithoutProperties(allprops, [\"className\", \"helptextPersistent\", \"helptextValidationMsg\"]);\n\n    var showDiv = props.helptext || props.label && !showFloatingLabel;\n\n    if (showDiv && !props.id) {\n      props.id = \"tf-\" + this.id;\n    }\n\n    // Helper text\n    var helptextProps = {\n      persistent: helptextPersistent,\n      \"validation-msg\": helptextValidationMsg\n    };\n\n    return showDiv ? Object(preact_min[\"h\"])(\"div\", { className: className }, props.label && !showFloatingLabel && Object(preact_min[\"h\"])(\"label\", { \"for\": props.id }, props.cssLabel || props.label + \": \"), Object(preact_min[\"h\"])(Textfield_TextfieldInput, Textfield__extends({}, props, {\n      onInit: function onInit(MDComponent) {\n        _this7.MDComponent = MDComponent;\n      },\n      \"aria-controls\": props.helptext && props.id + \"-helptext\"\n    })), props.helptext && Object(preact_min[\"h\"])(Textfield_Helptext, Textfield__extends({ id: props.id + \"-helptext\" }, helptextProps), props.helptext)) : Object(preact_min[\"h\"])(Textfield_TextfieldInput, Textfield__extends({}, props, {\n      className: className,\n      onInit: function onInit(MDComponent) {\n        _this7.MDComponent = MDComponent;\n      }\n    }));\n  };\n\n  return Textfield;\n}(preact_min[\"Component\"]);\n\nTextfield_Textfield.Helptext = Textfield_Helptext;\n\n/* harmony default export */ var preact_material_components_Textfield = (Textfield_Textfield);\n// EXTERNAL MODULE: ./components/component-table/index.js\nvar component_table = __webpack_require__(\"B/9r\");\n\n// EXTERNAL MODULE: ./components/code-block/index.js\nvar code_block = __webpack_require__(\"F4jb\");\n\n// EXTERNAL MODULE: ./routes/textfield/sample.txt\nvar sample = __webpack_require__(\"IsP3\");\nvar sample_default = /*#__PURE__*/__webpack_require__.n(sample);\n\n// CONCATENATED MODULE: ../node_modules/babel-loader/lib?{\"babelrc\":false,\"presets\":[[\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-preset-env/lib/index.js\",{\"loose\":true,\"uglify\":true,\"modules\":false,\"targets\":{\"browsers\":[\"> 1%\",\"last 2 versions\",\"IE >= 9\"]},\"exclude\":[\"transform-regenerator\",\"transform-es2015-typeof-symbol\"]}],\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-preset-stage-1/lib/index.js\"],\"plugins\":[\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-plugin-transform-object-assign/lib/index.js\",\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-plugin-transform-decorators-legacy/lib/index.js\",\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-plugin-transform-react-remove-prop-types/lib/index.js\",[\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-plugin-transform-react-jsx/lib/index.js\",{\"pragma\":\"h\"}],[\"/Users/prateekbh/projects/preact-material-components/docs/node_modules/babel-plugin-jsx-pragmatic/jsx-pragmatic.js\",{\"module\":\"preact\",\"export\":\"h\",\"import\":\"h\"}]]}!./routes/textfield/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return textfield_TextfieldPage; });\n\n\nfunction jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Dependencies\n\n\n// Material Components\n\n\n// Components\n\n\n\n// Samples\n\n\n// Class\n\nvar textfield__ref = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--display1\" },\n  \"Sample code \"\n);\n\nvar _ref2 = Object(preact_min[\"h\"])(\n  code_block[\"a\" /* default */],\n  null,\n  Object(preact_min[\"h\"])(\n    \"code\",\n    { \"class\": \"lang-js\" },\n    sample_default.a\n  )\n);\n\nvar _ref3 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--display1\" },\n  \"Original documentation\"\n);\n\nvar _ref4 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--body\" },\n  \"This component encapsulates\",\n  \" \",\n  Object(preact_min[\"h\"])(\n    \"span\",\n    { className: \"strong\" },\n    \"mdc-textfield\"\n  ),\n  \". You can refer to its documentation\",\n  Object(preact_min[\"h\"])(\n    \"a\",\n    { href: \"https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield\" },\n    \" \",\n    \"here\"\n  ),\n  \".\"\n);\n\nvar _ref5 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--display1\" },\n  \"Demo\"\n);\n\nvar _ref6 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"Default\"\n);\n\nvar _ref7 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"Multiline\"\n);\n\nvar _ref8 = Object(preact_min[\"h\"])(preact_material_components_Textfield, { multiline: true, label: \"Textarea tag\" });\n\nvar _ref9 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"Password\"\n);\n\nvar _ref10 = Object(preact_min[\"h\"])(preact_material_components_Textfield, { type: \"password\", label: \"Enter a password\" });\n\nvar _ref11 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"With help text\"\n);\n\nvar _ref12 = Object(preact_min[\"h\"])(preact_material_components_Textfield, { label: \"Help text\", helptext: \"This is the helptext\" });\n\nvar _ref13 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"With persistent help text\"\n);\n\nvar _ref14 = Object(preact_min[\"h\"])(preact_material_components_Textfield, {\n  label: \"Persistent help text\",\n  helptext: \"This is the helptext\",\n  helptextPersistent: true\n});\n\nvar _ref15 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"Dense\"\n);\n\nvar _ref16 = Object(preact_min[\"h\"])(preact_material_components_Textfield, { label: \"Dense\", dense: true });\n\nvar _ref17 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"Disabled\"\n);\n\nvar _ref18 = Object(preact_min[\"h\"])(preact_material_components_Textfield, { label: \"Disabled\", disabled: true });\n\nvar _ref19 = Object(preact_min[\"h\"])(\n  \"div\",\n  { className: \"mdc-typography--headline\" },\n  \"Link state\"\n);\n\nvar textfield_TextfieldPage = function (_Component) {\n  jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__inherits(TextfieldPage, _Component);\n\n  function TextfieldPage() {\n    jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__classCallCheck(this, TextfieldPage);\n\n    var _this = jsx_pragmatic_js____module___preact___export___h___import___h______routes_textfield__possibleConstructorReturn(this, _Component.call(this));\n\n    _this.state = {\n      value: \"\"\n    };\n    _this.propsTable = [{\n      component: \"Textfield\",\n      props: [{\n        name: \"fullwidth\",\n        description: \"Makes the textfield full width.\"\n      }, {\n        name: \"multiline\",\n        description: \"Toggles between TextArea and TextField.\"\n      }, {\n        name: \"type\",\n        description: \"Type of HTML textfield (defaults to 'text')\",\n        value: \"text, password, date, time, etc.\"\n      }, {\n        name: \"dense\",\n        description: \"Use a dense font\"\n      }, {\n        name: \"disabled\",\n        description: \"Disables the input\"\n      }, {\n        name: \"helptext\",\n        description: \"Include an help text that is useful for providing supplemental information to users, as well for validation messages\"\n      }, {\n        name: \"helptextPersistent\",\n        description: \"Makes the help text always visible\"\n      }, {\n        name: \"helptextValidationMsg\",\n        description: \"Provide styles for using the help text as a validation message\"\n      }]\n    }];\n    return _this;\n  }\n\n  TextfieldPage.prototype.render = function render() {\n    var _this2 = this;\n\n    return Object(preact_min[\"h\"])(\n      \"div\",\n      null,\n      Object(preact_min[\"h\"])(component_table[\"a\" /* default */], { data: this.propsTable }),\n      textfield__ref,\n      _ref2,\n      _ref3,\n      _ref4,\n      _ref5,\n      _ref6,\n      Object(preact_min[\"h\"])(preact_material_components_Textfield, {\n        label: \"Your name\",\n        onKeyUp: function onKeyUp(e) {\n          _this2.setState({\n            name: e.target.value\n          });\n        }\n      }),\n      \" \",\n      \"Hi - \",\n      this.state.name,\n      _ref7,\n      _ref8,\n      _ref9,\n      _ref10,\n      _ref11,\n      _ref12,\n      _ref13,\n      _ref14,\n      _ref15,\n      _ref16,\n      _ref17,\n      _ref18,\n      _ref19,\n      Object(preact_min[\"h\"])(preact_material_components_Textfield, {\n        label: \"State\",\n        value: this.state.value,\n        onInput: function onInput(e) {\n          return _this2.setState({ value: e.target.value });\n        }\n      }),\n      \"State: \",\n      this.state.value\n    );\n  };\n\n  return TextfieldPage;\n}(preact_min[\"Component\"]);\n\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// route-textfield.chunk.79a01.js","module.exports = \"import {h, Component} from 'preact';\\nimport Textfield from 'preact-material-components/Textfield';\\nimport 'preact-material-components/Textfield/style.css';\\n\\nexport default class TextfieldPage extends Component {\\n  render(){\\n    return (\\n      <div>\\n        <Textfield multiline={true} label=\\\"Textarea tag\\\"/>\\n      </div>\\n    );\\n  }\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./routes/textfield/sample.txt\n// module id = IsP3\n// module chunks = 21","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport { h, Component } from \"preact\";\nimport MaterialComponent from \"../MaterialComponent\";\nimport { MDCTextfield } from \"@material/textfield/\";\n\n/**\n * @prop persistent = false\n * @prop validation-msg = false\n */\nclass Helptext extends MaterialComponent {\n  constructor() {\n    super();\n    this.componentName = \"textfield-helptext\";\n    this._mdcProps = [\"persistent\", \"validation-msg\"];\n  }\n  materialDom(props) {\n    return h(\n      \"p\",\n      _extends({}, props, { \"aria-hidden\": \"true\" }),\n      props.children\n    );\n  }\n}\n\nclass Label extends MaterialComponent {\n  constructor() {\n    super();\n    this.componentName = \"textfield__label\";\n  }\n  materialDom(props) {\n    return h(\n      \"label\",\n      props,\n      props.children\n    );\n  }\n}\n\n/**\n * @prop fullwidth = false\n * @prop multiline = false\n * @prop dense = false\n * @prop disabled = false\n * @prop box = false\n * @prop type = 'text'\n * @prop value = ''\n * @prop label = ''\n */\nclass TextfieldInput extends MaterialComponent {\n  constructor() {\n    super();\n    this.componentName = \"textfield\";\n    this._mdcProps = [\"fullwidth\", \"multiline\", \"dense\", \"disabled\", \"box\"];\n    this.state = {\n      showFloatingLabel: false\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      showFloatingLabel: true\n    }, () => {\n      this.MDComponent = new MDCTextfield(this.control);\n      this.props.onInit && this.props.onInit(this.MDComponent);\n    });\n  }\n  componentWillUnmount() {\n    this.MDComponent && this.MDComponent.destroy && this.MDComponent.destroy();\n  }\n  materialDom(allprops) {\n    let { className } = allprops,\n        props = _objectWithoutProperties(allprops, [\"className\"]);\n\n    if (\"value\" in props && this.state.showFloatingLabel) {\n      className = [className, \"mdc-textfield--upgraded\"].join(\" \");\n    }\n\n    return h(\n      \"div\",\n      { className: className, ref: control => this.control = control },\n      props.multiline ? h(\"textarea\", _extends({ className: \"mdc-textfield__input\" }, props)) : h(\"input\", _extends({\n        type: props.type || \"text\",\n        className: \"mdc-textfield__input\"\n      }, props)),\n      props.label && this.state.showFloatingLabel && h(\n        Label,\n        { \"for\": props.id },\n        props.label\n      ),\n      props.multiline ? \"\" : h(\"div\", { \"class\": \"mdc-textfield__bottom-line\" })\n    );\n  }\n}\n\n/**\n * @prop fullwidth = false\n * @prop multiline = false\n * @prop dense = false\n * @prop disabled = false\n * @prop box = false\n * @prop type = 'text'\n * @prop value = ''\n * @prop label = ''\n * @prop helptext = ''\n * @prop helptextPersistent = false\n * @prop helptextValidationMsg = false\n */\nclass Textfield extends Component {\n  constructor() {\n    super();\n    this.id = Textfield.uid();\n    this.state = {\n      showFloatingLabel: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      showFloatingLabel: true\n    });\n  }\n\n  static uid() {\n    if (!this.uidCounter) {\n      this.uidCounter = 0;\n    }\n    return ++this.uidCounter;\n  }\n\n  render(allprops, { showFloatingLabel }) {\n    const {\n      className,\n      helptextPersistent,\n      helptextValidationMsg\n    } = allprops,\n          props = _objectWithoutProperties(allprops, [\"className\", \"helptextPersistent\", \"helptextValidationMsg\"]);\n    const showDiv = props.helptext || props.label && !showFloatingLabel;\n\n    if (showDiv && !props.id) {\n      props.id = \"tf-\" + this.id;\n    }\n\n    // Helper text\n    const helptextProps = {\n      persistent: helptextPersistent,\n      \"validation-msg\": helptextValidationMsg\n    };\n\n    return showDiv ? h(\n      \"div\",\n      { className: className },\n      props.label && !showFloatingLabel && h(\n        \"label\",\n        { \"for\": props.id },\n        props.cssLabel || `${props.label}: `\n      ),\n      h(TextfieldInput, _extends({}, props, {\n        onInit: MDComponent => {\n          this.MDComponent = MDComponent;\n        },\n        \"aria-controls\": props.helptext && props.id + \"-helptext\"\n      })),\n      props.helptext && h(\n        Helptext,\n        _extends({ id: props.id + \"-helptext\" }, helptextProps),\n        props.helptext\n      )\n    ) : h(TextfieldInput, _extends({}, props, {\n      className: className,\n      onInit: MDComponent => {\n        this.MDComponent = MDComponent;\n      }\n    }));\n  }\n}\n\nTextfield.Helptext = Helptext;\n\nexport default Textfield;\n\n\n// WEBPACK FOOTER //\n// ../node_modules/preact-material-components/Textfield/index.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  ARIA_HIDDEN: 'aria-hidden',\n  ROLE: 'role',\n  INPUT_SELECTOR: '.mdc-textfield__input',\n  LABEL_SELECTOR: '.mdc-textfield__label',\n  ICON_SELECTOR: '.mdc-textfield__icon',\n  ICON_EVENT: 'MDCTextfield:icon',\n  BOTTOM_LINE_SELECTOR: '.mdc-textfield__bottom-line',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-textfield',\n  UPGRADED: 'mdc-textfield--upgraded',\n  DISABLED: 'mdc-textfield--disabled',\n  FOCUSED: 'mdc-textfield--focused',\n  INVALID: 'mdc-textfield--invalid',\n  HELPTEXT_PERSISTENT: 'mdc-textfield-helptext--persistent',\n  HELPTEXT_VALIDATION_MSG: 'mdc-textfield-helptext--validation-msg',\n  LABEL_FLOAT_ABOVE: 'mdc-textfield__label--float-above',\n  LABEL_SHAKE: 'mdc-textfield__label--shake',\n  BOX: 'mdc-textfield--box',\n  TEXT_FIELD_ICON: 'mdc-textfield__icon',\n  TEXTAREA: 'mdc-textfield--textarea',\n  BOTTOM_LINE_ACTIVE: 'mdc-textfield__bottom-line--active',\n};\n\nexport {cssClasses, strings};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@material/textfield/constants.js","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * @typedef {{\n *   value: string,\n *   disabled: boolean,\n *   badInput: boolean,\n *   checkValidity: (function(): boolean)\n * }}\n */\nlet NativeInputType;\n\n/**\n * Adapter for MDC Textfield.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Textfield into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextfieldAdapter {\n  /**\n   * Adds a class to the root Element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root Element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Adds a class to the label Element. We recommend you add a conditional\n   * check here, and in removeClassFromLabel for whether or not the label is\n   * present so that the JS component could be used with text fields that don't\n   * require a label, such as the full-width text field.\n   * @param {string} className\n   */\n  addClassToLabel(className) {}\n\n  /**\n   * Removes a class from the label Element.\n   * @param {string} className\n   */\n  removeClassFromLabel(className) {}\n\n  /**\n   * Sets an attribute on the icon Element.\n   * @param {string} name\n   * @param {string} value\n   */\n  setIconAttr(name, value) {}\n\n  /**\n   * Returns true if classname exists for a given target element.\n   * @param {?EventTarget} target\n   * @param {string} className\n   * @return {boolean}\n   */\n  eventTargetHasClass(target, className) {}\n\n  /**\n   * Registers an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  registerTextFieldInteractionHandler(type, handler) {}\n\n  /**\n   * Deregisters an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterTextFieldInteractionHandler(type, handler) {}\n\n  /**\n   * Emits a custom event \"MDCTextfield:icon\" denoting a user has clicked the icon.\n   */\n  notifyIconAction() {}\n\n  /**\n   * Adds a class to the bottom line element.\n   * @param {string} className\n   */\n  addClassToBottomLine(className) {}\n\n  /**\n   * Removes a class from the bottom line element.\n   * @param {string} className\n   */\n  removeClassFromBottomLine(className) {}\n\n  /**\n   * Adds a class to the help text element. Note that in our code we check for\n   * whether or not we have a help text element and if we don't, we simply\n   * return.\n   * @param {string} className\n   */\n  addClassToHelptext(className) {}\n\n  /**\n   * Removes a class from the help text element.\n   * @param {string} className\n   */\n  removeClassFromHelptext(className) {}\n\n  /**\n   * Returns whether or not the help text element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  helptextHasClass(className) {}\n\n  /**\n   * Registers an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInputInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInputInteractionHandler(evtType, handler) {}\n\n  /**\n   * Registers an event listener on the bottom line element for a \"transitionend\" event.\n   * @param {function(!Event): undefined} handler\n   */\n  registerTransitionEndHandler(handler) {}\n\n  /**\n   * Deregisters an event listener on the bottom line element for a \"transitionend\" event.\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterTransitionEndHandler(handler) {}\n\n  /**\n   * Sets an attribute with a given value on the bottom line element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setBottomLineAttr(attr, value) {}\n\n  /**\n   * Sets an attribute with a given value on the help text element.\n   * @param {string} name\n   * @param {string} value\n   */\n  setHelptextAttr(name, value) {}\n\n  /**\n   * Removes an attribute from the help text element.\n   * @param {string} name\n   */\n  removeHelptextAttr(name) {}\n\n  /**\n   * Returns an object representing the native text input element, with a\n   * similar API shape. The object returned should include the value, disabled\n   * and badInput properties, as well as the checkValidity() function. We never\n   * alter the value within our code, however we do update the disabled\n   * property, so if you choose to duck-type the return value for this method\n   * in your implementation it's important to keep this in mind. Also note that\n   * this method can return null, which the foundation will handle gracefully.\n   * @return {?Element|?NativeInputType}\n   */\n  getNativeInput() {}\n}\n\nexport {MDCTextfieldAdapter, NativeInputType};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@material/textfield/adapter.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport {MDCTextfieldAdapter, NativeInputType} from './adapter';\nimport {cssClasses, strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextfieldAdapter>}\n * @final\n */\nclass MDCTextfieldFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextfieldAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextfieldAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextfieldAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      addClassToLabel: () => {},\n      removeClassFromLabel: () => {},\n      setIconAttr: () => {},\n      eventTargetHasClass: () => {},\n      registerTextFieldInteractionHandler: () => {},\n      deregisterTextFieldInteractionHandler: () => {},\n      notifyIconAction: () => {},\n      addClassToBottomLine: () => {},\n      removeClassFromBottomLine: () => {},\n      addClassToHelptext: () => {},\n      removeClassFromHelptext: () => {},\n      helptextHasClass: () => false,\n      registerInputInteractionHandler: () => {},\n      deregisterInputInteractionHandler: () => {},\n      registerTransitionEndHandler: () => {},\n      deregisterTransitionEndHandler: () => {},\n      setBottomLineAttr: () => {},\n      setHelptextAttr: () => {},\n      removeHelptextAttr: () => {},\n      getNativeInput: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextfieldAdapter=} adapter\n   */\n  constructor(adapter = /** @type {!MDCTextfieldAdapter} */ ({})) {\n    super(Object.assign(MDCTextfieldFoundation.defaultAdapter, adapter));\n\n    /** @private {boolean} */\n    this.isFocused_ = false;\n    /** @private {boolean} */\n    this.receivedUserInput_ = false;\n    /** @private {boolean} */\n    this.useCustomValidityChecking_ = false;\n    /** @private {function(): undefined} */\n    this.inputFocusHandler_ = () => this.activateFocus_();\n    /** @private {function(): undefined} */\n    this.inputBlurHandler_ = () => this.deactivateFocus_();\n    /** @private {function(): undefined} */\n    this.inputInputHandler_ = () => this.autoCompleteFocus_();\n    /** @private {function(!Event): undefined} */\n    this.setPointerXOffset_ = (evt) => this.setBottomLineTransformOrigin_(evt);\n    /** @private {function(!Event): undefined} */\n    this.textFieldInteractionHandler_ = (evt) => this.handleTextFieldInteraction_(evt);\n    /** @private {function(!Event): undefined} */\n    this.transitionEndHandler_ = (evt) => this.transitionEnd_(evt);\n  }\n\n  init() {\n    this.adapter_.addClass(MDCTextfieldFoundation.cssClasses.UPGRADED);\n    // Ensure label does not collide with any pre-filled value.\n    if (this.getNativeInput_().value) {\n      this.adapter_.addClassToLabel(MDCTextfieldFoundation.cssClasses.LABEL_FLOAT_ABOVE);\n    }\n\n    this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      this.adapter_.registerInputInteractionHandler(evtType, this.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler_);\n    });\n    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);\n  }\n\n  destroy() {\n    this.adapter_.removeClass(MDCTextfieldFoundation.cssClasses.UPGRADED);\n    this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      this.adapter_.deregisterInputInteractionHandler(evtType, this.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler_);\n    });\n    this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);\n  }\n\n  /**\n   * Handles all user interactions with the Textfield.\n   * @param {!Event} evt\n   * @private\n   */\n  handleTextFieldInteraction_(evt) {\n    if (this.adapter_.getNativeInput().disabled) {\n      return;\n    }\n\n    this.receivedUserInput_ = true;\n\n    const {target, type} = evt;\n    const {TEXT_FIELD_ICON} = MDCTextfieldFoundation.cssClasses;\n    const targetIsIcon = this.adapter_.eventTargetHasClass(target, TEXT_FIELD_ICON);\n    const eventTriggersNotification = type === 'click' || evt.key === 'Enter' || evt.keyCode === 13;\n\n    if (targetIsIcon && eventTriggersNotification) {\n      this.adapter_.notifyIconAction();\n    }\n  }\n\n  /**\n   * Activates the text field focus state.\n   * @private\n   */\n  activateFocus_() {\n    const {BOTTOM_LINE_ACTIVE, FOCUSED, LABEL_FLOAT_ABOVE, LABEL_SHAKE} = MDCTextfieldFoundation.cssClasses;\n    this.adapter_.addClass(FOCUSED);\n    this.adapter_.addClassToBottomLine(BOTTOM_LINE_ACTIVE);\n    this.adapter_.addClassToLabel(LABEL_FLOAT_ABOVE);\n    this.adapter_.removeClassFromLabel(LABEL_SHAKE);\n    this.showHelptext_();\n    this.isFocused_ = true;\n  }\n\n  /**\n   * Sets the transform-origin of the bottom line, causing it to animate out\n   * from the user's click location.\n   * @param {!Event} evt\n   * @private\n   */\n  setBottomLineTransformOrigin_(evt) {\n    const targetClientRect = evt.target.getBoundingClientRect();\n    const evtCoords = {x: evt.clientX, y: evt.clientY};\n    const normalizedX = evtCoords.x - targetClientRect.left;\n    const attributeString =\n      `transform-origin: ${normalizedX}px center`;\n\n    this.adapter_.setBottomLineAttr('style', attributeString);\n  }\n\n  /**\n   * Activates the Textfield's focus state in cases when the input value\n   * changes without user input (e.g. programatically).\n   * @private\n   */\n  autoCompleteFocus_() {\n    if (!this.receivedUserInput_) {\n      this.activateFocus_();\n    }\n  }\n\n  /**\n   * Makes the help text visible to screen readers.\n   * @private\n   */\n  showHelptext_() {\n    const {ARIA_HIDDEN} = MDCTextfieldFoundation.strings;\n    this.adapter_.removeHelptextAttr(ARIA_HIDDEN);\n  }\n\n  /**\n   * Fires when animation transition ends, performing actions that must wait\n   * for animations to finish.\n   * @param {!Event} evt\n   * @private\n   */\n  transitionEnd_(evt) {\n    const {BOTTOM_LINE_ACTIVE} = MDCTextfieldFoundation.cssClasses;\n\n    // We need to wait for the bottom line to be entirely transparent\n    // before removing the class. If we do not, we see the line start to\n    // scale down before disappearing\n    if (evt.propertyName === 'opacity' && !this.isFocused_) {\n      this.adapter_.removeClassFromBottomLine(BOTTOM_LINE_ACTIVE);\n    }\n  }\n\n  /**\n   * Deactives the Textfield's focus state.\n   * @private\n   */\n  deactivateFocus_() {\n    const {FOCUSED, LABEL_FLOAT_ABOVE, LABEL_SHAKE} = MDCTextfieldFoundation.cssClasses;\n    const input = this.getNativeInput_();\n\n    this.isFocused_ = false;\n    this.adapter_.removeClass(FOCUSED);\n    this.adapter_.removeClassFromLabel(LABEL_SHAKE);\n\n    if (!input.value && !this.isBadInput_()) {\n      this.adapter_.removeClassFromLabel(LABEL_FLOAT_ABOVE);\n      this.receivedUserInput_ = false;\n    }\n\n    if (!this.useCustomValidityChecking_) {\n      this.changeValidity_(input.checkValidity());\n    }\n  }\n\n  /**\n   * Updates the Textfield's valid state based on the supplied validity.\n   * @param {boolean} isValid\n   * @private\n   */\n  changeValidity_(isValid) {\n    const {INVALID, LABEL_SHAKE} = MDCTextfieldFoundation.cssClasses;\n    if (isValid) {\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.addClassToLabel(LABEL_SHAKE);\n      this.adapter_.addClass(INVALID);\n    }\n    this.updateHelptext_(isValid);\n  }\n\n  /**\n   * Updates the state of the Textfield's help text based on validity and\n   * the Textfield's options.\n   * @param {boolean} isValid\n   */\n  updateHelptext_(isValid) {\n    const {HELPTEXT_PERSISTENT, HELPTEXT_VALIDATION_MSG} = MDCTextfieldFoundation.cssClasses;\n    const {ROLE} = MDCTextfieldFoundation.strings;\n    const helptextIsPersistent = this.adapter_.helptextHasClass(HELPTEXT_PERSISTENT);\n    const helptextIsValidationMsg = this.adapter_.helptextHasClass(HELPTEXT_VALIDATION_MSG);\n    const validationMsgNeedsDisplay = helptextIsValidationMsg && !isValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.adapter_.setHelptextAttr(ROLE, 'alert');\n    } else {\n      this.adapter_.removeHelptextAttr(ROLE);\n    }\n\n    if (helptextIsPersistent || validationMsgNeedsDisplay) {\n      return;\n    }\n    this.hideHelptext_();\n  }\n\n  /**\n   * Hides the help text from screen readers.\n   * @private\n   */\n  hideHelptext_() {\n    const {ARIA_HIDDEN} = MDCTextfieldFoundation.strings;\n    this.adapter_.setHelptextAttr(ARIA_HIDDEN, 'true');\n  }\n\n  /**\n   * @return {boolean} True if the Textfield input fails validity checks.\n   * @private\n   */\n  isBadInput_() {\n    const input = this.getNativeInput_();\n    return input.validity ? input.validity.badInput : input.badInput;\n  }\n\n  /**\n   * @return {boolean} True if the Textfield is disabled.\n   */\n  isDisabled() {\n    return this.getNativeInput_().disabled;\n  }\n\n  /**\n   * @param {boolean} disabled Sets the textfield disabled or enabled.\n   */\n  setDisabled(disabled) {\n    const {DISABLED} = MDCTextfieldFoundation.cssClasses;\n    this.getNativeInput_().disabled = disabled;\n    if (disabled) {\n      this.adapter_.addClass(DISABLED);\n      this.adapter_.setIconAttr('tabindex', '-1');\n    } else {\n      this.adapter_.removeClass(DISABLED);\n      this.adapter_.setIconAttr('tabindex', '0');\n    }\n  }\n\n  /**\n   * @return {!Element|!NativeInputType} The native text input from the\n   * host environment, or a dummy if none exists.\n   * @private\n   */\n  getNativeInput_() {\n    return this.adapter_.getNativeInput() ||\n    /** @type {!NativeInputType} */ ({\n      checkValidity: () => true,\n      value: '',\n      disabled: false,\n      badInput: false,\n    });\n  }\n\n  /**\n   * @param {boolean} isValid Sets the validity state of the Textfield.\n   */\n  setValid(isValid) {\n    this.useCustomValidityChecking_ = true;\n    this.changeValidity_(isValid);\n  }\n}\n\nexport default MDCTextfieldFoundation;\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@material/textfield/foundation.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCRipple} from '@material/ripple';\n\nimport {cssClasses, strings} from './constants';\nimport {MDCTextfieldAdapter} from './adapter';\nimport MDCTextfieldFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCTextfieldFoundation>}\n * @final\n */\nclass MDCTextfield extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n    /** @private {?Element} */\n    this.input_;\n    /** @private {?Element} */\n    this.label_;\n    /** @type {?Element} */\n    this.helptextElement;\n    /** @type {?MDCRipple} */\n    this.ripple;\n    /** @private {?Element} */\n    this.bottomLine_;\n    /** @private {?Element} */\n    this.icon_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCTextfield}\n   */\n  static attachTo(root) {\n    return new MDCTextfield(root);\n  }\n\n  /**\n   * @param {(function(!Element): !MDCRipple)=} rippleFactory A function which\n   * creates a new MDCRipple.\n   */\n  initialize(rippleFactory = (el) => new MDCRipple(el)) {\n    this.input_ = this.root_.querySelector(strings.INPUT_SELECTOR);\n    this.label_ = this.root_.querySelector(strings.LABEL_SELECTOR);\n    this.helptextElement = null;\n    this.ripple = null;\n    if (this.input_.hasAttribute('aria-controls')) {\n      this.helptextElement = document.getElementById(this.input_.getAttribute('aria-controls'));\n    }\n    if (this.root_.classList.contains(cssClasses.BOX)) {\n      this.ripple = rippleFactory(this.root_);\n    };\n    if (!this.root_.classList.contains(cssClasses.TEXTAREA)) {\n      this.bottomLine_ = this.root_.querySelector(strings.BOTTOM_LINE_SELECTOR);\n    };\n    if (!this.root_.classList.contains(cssClasses.TEXT_FIELD_ICON)) {\n      this.icon_ = this.root_.querySelector(strings.ICON_SELECTOR);\n    };\n  }\n\n  destroy() {\n    if (this.ripple) {\n      this.ripple.destroy();\n    }\n    super.destroy();\n  }\n\n  /**\n   * Initiliazes the Textfield's internal state based on the environment's\n   * state.\n   */\n  initialSyncWithDom() {\n    this.disabled = this.input_.disabled;\n  }\n\n  /**\n   * @return {boolean} True if the Textfield is disabled.\n   */\n  get disabled() {\n    return this.foundation_.isDisabled();\n  }\n\n  /**\n   * @param {boolean} disabled Sets the Textfield disabled or enabled.\n   */\n  set disabled(disabled) {\n    this.foundation_.setDisabled(disabled);\n  }\n\n  /**\n   * @param {boolean} valid Sets the Textfield valid or invalid.\n   */\n  set valid(valid) {\n    this.foundation_.setValid(valid);\n  }\n\n  /**\n   * @return {!MDCTextfieldFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCTextfieldFoundation(/** @type {!MDCTextfieldAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      addClassToLabel: (className) => {\n        const label = this.label_;\n        if (label) {\n          label.classList.add(className);\n        }\n      },\n      removeClassFromLabel: (className) => {\n        const label = this.label_;\n        if (label) {\n          label.classList.remove(className);\n        }\n      },\n      eventTargetHasClass: (target, className) => target.classList.contains(className),\n      registerTextFieldInteractionHandler: (evtType, handler) => this.root_.addEventListener(evtType, handler),\n      deregisterTextFieldInteractionHandler: (evtType, handler) => this.root_.removeEventListener(evtType, handler),\n      notifyIconAction: () => this.emit(MDCTextfieldFoundation.strings.ICON_EVENT, {}),\n    },\n    this.getInputAdapterMethods_(),\n    this.getHelptextAdapterMethods_(),\n    this.getBottomLineAdapterMethods_(),\n    this.getIconAdapterMethods_())));\n  }\n\n  /**\n   * @return {!{\n   *   setIconAttr: function(string, string): undefined,\n   * }}\n   */\n  getIconAdapterMethods_() {\n    return {\n      setIconAttr: (name, value) => {\n        if (this.icon_) {\n          this.icon_.setAttribute(name, value);\n        }\n      },\n    };\n  }\n\n  /**\n   * @return {!{\n   *   addClassToBottomLine: function(string): undefined,\n   *   removeClassFromBottomLine: function(string): undefined,\n   *   setBottomLineAttr: function(string, string): undefined,\n   *   registerTransitionEndHandler: function(function()): undefined,\n   *   deregisterTransitionEndHandler: function(function()): undefined,\n   * }}\n   */\n  getBottomLineAdapterMethods_() {\n    return {\n      addClassToBottomLine: (className) => {\n        if (this.bottomLine_) {\n          this.bottomLine_.classList.add(className);\n        }\n      },\n      removeClassFromBottomLine: (className) => {\n        if (this.bottomLine_) {\n          this.bottomLine_.classList.remove(className);\n        }\n      },\n      setBottomLineAttr: (attr, value) => {\n        if (this.bottomLine_) {\n          this.bottomLine_.setAttribute(attr, value);\n        }\n      },\n      registerTransitionEndHandler: (handler) => {\n        if (this.bottomLine_) {\n          this.bottomLine_.addEventListener('transitionend', handler);\n        }\n      },\n      deregisterTransitionEndHandler: (handler) => {\n        if (this.bottomLine_) {\n          this.bottomLine_.removeEventListener('transitionend', handler);\n        }\n      },\n    };\n  }\n\n  /**\n   * @return {!{\n   *   registerInputInteractionHandler: function(string, function()): undefined,\n   *   deregisterInputInteractionHandler: function(string, function()): undefined,\n   *   getNativeInput: function(): ?Element,\n   * }}\n   */\n  getInputAdapterMethods_() {\n    return {\n      registerInputInteractionHandler: (evtType, handler) => this.input_.addEventListener(evtType, handler),\n      deregisterInputInteractionHandler: (evtType, handler) => this.input_.removeEventListener(evtType, handler),\n      getNativeInput: () => this.input_,\n    };\n  }\n\n  /**\n   * @return {!{\n   *   addClassToHelptext: function(string): undefined,\n   *   removeClassFromHelptext: function(string): undefined,\n   *   helptextHasClass: function(string): boolean,\n   *   setHelptextAttr: function(string, string): undefined,\n   *   removeHelptextAttr: function(string): undefined,\n   * }}\n   */\n  getHelptextAdapterMethods_() {\n    return {\n      addClassToHelptext: (className) => {\n        if (this.helptextElement) {\n          this.helptextElement.classList.add(className);\n        }\n      },\n      removeClassFromHelptext: (className) => {\n        if (this.helptextElement) {\n          this.helptextElement.classList.remove(className);\n        }\n      },\n      helptextHasClass: (className) => {\n        if (!this.helptextElement) {\n          return false;\n        }\n        return this.helptextElement.classList.contains(className);\n      },\n      setHelptextAttr: (name, value) => {\n        if (this.helptextElement) {\n          this.helptextElement.setAttribute(name, value);\n        }\n      },\n      removeHelptextAttr: (name) => {\n        if (this.helptextElement) {\n          this.helptextElement.removeAttribute(name);\n        }\n      },\n    };\n  }\n}\n\nexport {MDCTextfield, MDCTextfieldFoundation};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@material/textfield/index.js","// Dependencies\nimport { h, Component } from \"preact\";\n\n// Material Components\nimport Textfield from \"preact-material-components/Textfield\";\n\n// Components\nimport ComponentTable from \"../../components/component-table\";\nimport CodeBlock from \"../../components/code-block\";\n\n// Samples\nimport sample from \"./sample.txt\";\n\n// Class\nexport default class TextfieldPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\"\n    };\n    this.propsTable = [\n      {\n        component: \"Textfield\",\n        props: [\n          {\n            name: \"fullwidth\",\n            description: \"Makes the textfield full width.\"\n          },\n          {\n            name: \"multiline\",\n            description: \"Toggles between TextArea and TextField.\"\n          },\n          {\n            name: \"type\",\n            description: \"Type of HTML textfield (defaults to 'text')\",\n            value: \"text, password, date, time, etc.\"\n          },\n          {\n            name: \"dense\",\n            description: \"Use a dense font\"\n          },\n          {\n            name: \"disabled\",\n            description: \"Disables the input\"\n          },\n          {\n            name: \"helptext\",\n            description:\n              \"Include an help text that is useful for providing supplemental information to users, as well for validation messages\"\n          },\n          {\n            name: \"helptextPersistent\",\n            description: \"Makes the help text always visible\"\n          },\n          {\n            name: \"helptextValidationMsg\",\n            description:\n              \"Provide styles for using the help text as a validation message\"\n          }\n        ]\n      }\n    ];\n  }\n  render() {\n    return (\n      <div>\n        <ComponentTable data={this.propsTable} />\n        <div className=\"mdc-typography--display1\">Sample code </div>\n        <CodeBlock>\n          <code class=\"lang-js\">{sample}</code>\n        </CodeBlock>\n        <div className=\"mdc-typography--display1\">Original documentation</div>\n        <div className=\"mdc-typography--body\">\n          This component encapsulates{\" \"}\n          <span className=\"strong\">mdc-textfield</span>. You can refer to its\n          documentation\n          <a href=\"https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield\">\n            {\" \"}\n            here\n          </a>.\n        </div>\n        <div className=\"mdc-typography--display1\">Demo</div>\n        <div className=\"mdc-typography--headline\">Default</div>\n        <Textfield\n          label=\"Your name\"\n          onKeyUp={e => {\n            this.setState({\n              name: e.target.value\n            });\n          }}\n        />{\" \"}\n        Hi - {this.state.name}\n        <div className=\"mdc-typography--headline\">Multiline</div>\n        <Textfield multiline={true} label=\"Textarea tag\" />\n        <div className=\"mdc-typography--headline\">Password</div>\n        <Textfield type=\"password\" label=\"Enter a password\" />\n        <div className=\"mdc-typography--headline\">With help text</div>\n        <Textfield label=\"Help text\" helptext=\"This is the helptext\" />\n        <div className=\"mdc-typography--headline\">\n          With persistent help text\n        </div>\n        <Textfield\n          label=\"Persistent help text\"\n          helptext=\"This is the helptext\"\n          helptextPersistent\n        />\n        <div className=\"mdc-typography--headline\">Dense</div>\n        <Textfield label=\"Dense\" dense />\n        <div className=\"mdc-typography--headline\">Disabled</div>\n        <Textfield label=\"Disabled\" disabled />\n        <div className=\"mdc-typography--headline\">Link state</div>\n        <Textfield\n          label=\"State\"\n          value={this.state.value}\n          onInput={e => this.setState({ value: e.target.value })}\n        />\n        State: {this.state.value}\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./routes/textfield/index.js"],"sourceRoot":""}