module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "JkW7");
/******/ })
/************************************************************************/
/******/ ({

/***/ "+ieI":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Button from 'preact-material-components/Button';\nimport 'preact-material-components/Button/style.css';\nimport 'preact-material-components/Theme/style.css';\n\nexport default class ButtonsPage extends Component {\n  render(){\n    return (\n      <div>\n        <Button ripple raised>\n          Flat button with ripple\n        </Button>\n        <Button ripple raised className=\"mdc-theme--primary-bg\">\n          Primary background button\n        </Button>\n        <Button href=\"/\">This button will be rendered as an anchor</Button>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "1hb7":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport GridList from 'preact-material-components/GridList';\nimport 'preact-material-components/GridList/style.css';\n\nexport default class GridListPage extends Component {\n  render(){\n    return (\n      <div>\n        <GridList header-caption={true} with-icon-align=\"end\" twoline-caption={true} tile-gutter-1={true} tile-aspect-ratio=\"16x9\">\n            <GridList.Tiles>\n                <GridList.Tile>\n                    <GridList.PrimaryTile>\n                        <GridList.PrimaryContentTile src=\"../../../images/GridListTileSample.png\" />\n                    </GridList.PrimaryTile>\n                    <GridList.SecondaryTile>\n                        <GridList.IconTile onClick={()=>console.log(\"Edit Tile\")}>edit</GridList.IconTile>\n                        <GridList.TitleTile>Tile One</GridList.TitleTile>\n                        <GridList.SupportTextTile>subheading one</GridList.SupportTextTile>\n                    </GridList.SecondaryTile>\n                </GridList.Tile>\n                <GridList.Tile>\n                    <GridList.PrimaryTile>\n                        <GridList.PrimaryContentTile src=\"../../../images/GridListTileSample.png\" />\n                    </GridList.PrimaryTile>\n                    <GridList.SecondaryTile>\n                        <GridList.IconTile onClick={()=>console.log(\"Edit Tile\")}>edit</GridList.IconTile>\n                        <GridList.TitleTile>Tile Two</GridList.TitleTile>\n                        <GridList.SupportTextTile>subheading two</GridList.SupportTextTile>\n                    </GridList.SecondaryTile>\n                </GridList.Tile>\n            </GridList.Tiles>\n        </GridList>\n      </div>\n    );\n  }\n}"

/***/ }),

/***/ "3IxH":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "3onB":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "4ECx":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Slider from 'preact-material-components/Slider';\nimport 'preact-material-components/Slider/style.css';\n\nexport default class SnackbarPage extends Component {\n  render(){\n    return (\n      <div>\n        <Slider step={2} value={10} max={20}/>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "4YXN":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "4igI":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Switch from 'preact-material-components/Switch';\nimport 'preact-material-components/Switch/style.css';\n\nexport default class SwitchPage extends Component {\n  render(){\n    return (\n      <div>\n        <Switch/>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "56Xb":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "6Np5":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "6X9X":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport List from 'preact-material-components/List';\nimport Formfield from 'preact-material-components/Formfield';\nimport 'preact-material-components/List/style.css';\n\nexport default class ListPage extends Component {\n  render(){\n    return (\n      <div>\n        <Formfield>\n          <Radio id=\"r1\" name='opts'></Radio>\n          <label for=\"r1\">Radio 1</label>\n        </Formfield>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "8Edg":
/***/ (function(module, exports) {

module.exports = "import Radio from 'preact-material-components/Radio';\nimport FormField from 'preact-material-components/FormField';\nimport Button from 'preact-material-components/Button';"

/***/ }),

/***/ "9gb+":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Switch from 'preact-material-components/Switch';\nimport 'preact-material-components/Switch/style.css';\n\nexport default class SwitchPage extends Component {\n  render(){\n    return (\n      <div>\n        <Tabs.TabBarScroller>\n            <Tabs scroller={true}>\n            <Tabs.Tab>tab1</Tabs.Tab>\n            <Tabs.Tab active={true}>tab2</Tabs.Tab>\n            <Tabs.Tab>tab3</Tabs.Tab>\n            <Tabs.Tab>tab4</Tabs.Tab>\n            <Tabs.Tab>tab5</Tabs.Tab>\n            <Tabs.Tab>tab6</Tabs.Tab>\n            <Tabs.Tab>tab7</Tabs.Tab>\n            <Tabs.Tab>tab7</Tabs.Tab>\n            <Tabs.Tab>tab9</Tabs.Tab>\n            <Tabs.Tab>tab10</Tabs.Tab>\n            <Tabs.Tab>tab11</Tabs.Tab>\n          </Tabs>\n        </Tabs.TabBarScroller>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "9qb7":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(null, arg));
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
})();

/***/ }),

/***/ "9xBA":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Tabs from 'preact-material-components/Tabs';\nimport 'preact-material-components/Tabs/style.css';\n\nexport default class TabsPage extends Component {\n  render(){\n    return (\n      <div>\n        <Tabs className='demo-tabs' indicator-accent={true}>\n          <Tabs.Tab>Tab1</Tabs.Tab>\n          <Tabs.Tab>Tab2</Tabs.Tab>\n          <Tabs.Tab>Tab3</Tabs.Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "ApXe":
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var BUILT_INS = 'action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view';

  var ATTR_ASSIGNMENT = {
    illegal: /\}\}/,
    begin: /[a-zA-Z0-9_]+=/,
    returnBegin: true,
    relevance: 0,
    contains: [{
      className: 'attr', begin: /[a-zA-Z0-9_]+/
    }]
  };

  var SUB_EXPR = {
    illegal: /\}\}/,
    begin: /\)/, end: /\)/,
    contains: [{
      begin: /[a-zA-Z\.\-]+/,
      keywords: { built_in: BUILT_INS },
      starts: {
        endsWithParent: true, relevance: 0,
        contains: [hljs.QUOTE_STRING_MODE]
      }
    }]
  };

  var TAG_INNARDS = {
    endsWithParent: true, relevance: 0,
    keywords: { keyword: 'as', built_in: BUILT_INS },
    contains: [hljs.QUOTE_STRING_MODE, ATTR_ASSIGNMENT, hljs.NUMBER_MODE]
  };

  return {
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [hljs.COMMENT('{{!(--)?', '(--)?}}'), {
      className: 'template-tag',
      begin: /\{\{[#\/]/, end: /\}\}/,
      contains: [{
        className: 'name',
        begin: /[a-zA-Z\.\-]+/,
        keywords: { 'builtin-name': BUILT_INS },
        starts: TAG_INNARDS
      }]
    }, {
      className: 'template-variable',
      begin: /\{\{[a-zA-Z][a-zA-Z\-]+/, end: /\}\}/,
      keywords: { keyword: 'as', built_in: BUILT_INS },
      contains: [hljs.QUOTE_STRING_MODE]
    }]
  };
};

/***/ }),

/***/ "Bfdu":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Elevation from 'preact-material-components/Elevation';\nimport 'preact-material-components/Elevation/style.css';\n\nexport default class ElevationPage extends Component {\n  render(){\n    return (\n      <div>\n        <Elevation z={0}>Z0</Elevation>\n        <Elevation z={1}>Z1</Elevation>\n        <Elevation z={2}>Z2</Elevation>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "CRqb":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Radio from 'preact-material-components/Radio';\nimport FormField from 'preact-material-components/FormField';\nimport 'preact-material-components/FormField/style.css';\nimport 'preact-material-components/List/style.css';\n\nexport default class ListPage extends Component {\n  render(){\n    return (\n      <div>\n        <FormField>\n          <Radio id=\"r1\" name='opts'></Radio>\n          <label for=\"r1\">Radio 1</label>\n        </FormField>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "ElH3":
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
  var TAG_INTERNALS = {
    endsWithParent: true,
    illegal: /</,
    relevance: 0,
    contains: [{
      className: 'attr',
      begin: XML_IDENT_RE,
      relevance: 0
    }, {
      begin: /=\s*/,
      relevance: 0,
      contains: [{
        className: 'string',
        endsParent: true,
        variants: [{ begin: /"/, end: /"/ }, { begin: /'/, end: /'/ }, { begin: /[^\s"'=<>`]+/ }]
      }]
    }]
  };
  return {
    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
    case_insensitive: true,
    contains: [{
      className: 'meta',
      begin: '<!DOCTYPE', end: '>',
      relevance: 10,
      contains: [{ begin: '\\[', end: '\\]' }]
    }, hljs.COMMENT('<!--', '-->', {
      relevance: 10
    }), {
      begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
      relevance: 10
    }, {
      begin: /<\?(php)?/, end: /\?>/,
      subLanguage: 'php',
      contains: [{ begin: '/\\*', end: '\\*/', skip: true }]
    }, {
      className: 'tag',
      /*
      The lookahead pattern (?=...) ensures that 'begin' only matches
      '<style' as a single word, followed by a whitespace or an
      ending braket. The '$' is needed for the lexeme to be recognized
      by hljs.subMode() that tests lexemes outside the stream.
      */
      begin: '<style(?=\\s|>|$)', end: '>',
      keywords: { name: 'style' },
      contains: [TAG_INTERNALS],
      starts: {
        end: '</style>', returnEnd: true,
        subLanguage: ['css', 'xml']
      }
    }, {
      className: 'tag',
      // See the comment in the <style tag about the lookahead pattern
      begin: '<script(?=\\s|>|$)', end: '>',
      keywords: { name: 'script' },
      contains: [TAG_INTERNALS],
      starts: {
        end: '\<\/script\>', returnEnd: true,
        subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
      }
    }, {
      className: 'meta',
      variants: [{ begin: /<\?xml/, end: /\?>/, relevance: 10 }, { begin: /<\?\w+/, end: /\?>/ }]
    }, {
      className: 'tag',
      begin: '</?', end: '/?>',
      contains: [{
        className: 'name', begin: /[^\/><\s]+/, relevance: 0
      }, TAG_INTERNALS]
    }]
  };
};

/***/ }),

/***/ "FEFE":
/***/ (function(module, exports) {

module.exports = "import 'preact-material-components/Radio/style.css';\nimport 'preact-material-components/FormField/style.css';\nimport 'preact-material-components/Button/style.css';"

/***/ }),

/***/ "Fj5d":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Toolbar from 'preact-material-components/Toolbar';\nimport 'preact-material-components/Toolbar/style.css';\n\nexport default class ToolbarPage extends Component {\n  render(){\n    return (\n      <div>\n        <Toolbar className=\"toolbar\">\n            <Toolbar.Row>\n              <Toolbar.Section align-start={true}>\n                <Toolbar.Icon menu={true}>menu</Toolbar.Icon>\n                <Toolbar.Title>\n                  My App\n                </Toolbar.Title>\n              </Toolbar.Section>\n              <Toolbar.Section align-end={true}>\n                <Toolbar.Icon>more_vert</Toolbar.Icon>\n              </Toolbar.Section>\n            </Toolbar.Row>\n          </Toolbar>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "Hb3h":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "IsP3":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Textfield from 'preact-material-components/Textfield';\nimport 'preact-material-components/Textfield/style.css';\n\nexport default class TextfieldPage extends Component {\n  render(){\n    return (\n      <div>\n        <Textfield multiline={true} label=\"Textarea tag\"/>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "JkW7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ../node_modules/preact/dist/preact.min.js
var preact_min = __webpack_require__("KM04");
var preact_min_default = /*#__PURE__*/__webpack_require__.n(preact_min);

// CONCATENATED MODULE: ../node_modules/preact-router/dist/preact-router.es.js


var EMPTY$1 = {};

function preact_router_es_assign(obj, props) {
	// eslint-disable-next-line guard-for-in
	for (var i in props) {
		obj[i] = props[i];
	}
	return obj;
}

function exec(url, route, opts) {
	if (opts === void 0) opts = EMPTY$1;

	var reg = /(?:\?([^#]*))?(#.*)?$/,
	    c = url.match(reg),
	    matches = {},
	    ret;
	if (c && c[1]) {
		var p = c[1].split('&');
		for (var i = 0; i < p.length; i++) {
			var r = p[i].split('=');
			matches[decodeURIComponent(r[0])] = decodeURIComponent(r.slice(1).join('='));
		}
	}
	url = segmentize(url.replace(reg, ''));
	route = segmentize(route || '');
	var max = Math.max(url.length, route.length);
	for (var i$1 = 0; i$1 < max; i$1++) {
		if (route[i$1] && route[i$1].charAt(0) === ':') {
			var param = route[i$1].replace(/(^\:|[+*?]+$)/g, ''),
			    flags = (route[i$1].match(/[+*?]+$/) || EMPTY$1)[0] || '',
			    plus = ~flags.indexOf('+'),
			    star = ~flags.indexOf('*'),
			    val = url[i$1] || '';
			if (!val && !star && (flags.indexOf('?') < 0 || plus)) {
				ret = false;
				break;
			}
			matches[param] = decodeURIComponent(val);
			if (plus || star) {
				matches[param] = url.slice(i$1).map(decodeURIComponent).join('/');
				break;
			}
		} else if (route[i$1] !== url[i$1]) {
			ret = false;
			break;
		}
	}
	if (opts.default !== true && ret === false) {
		return false;
	}
	return matches;
}

function pathRankSort(a, b) {
	var aAttr = a.attributes || EMPTY$1,
	    bAttr = b.attributes || EMPTY$1;
	if (aAttr.default) {
		return 1;
	}
	if (bAttr.default) {
		return -1;
	}
	var diff = rank(aAttr.path) - rank(bAttr.path);
	return diff || aAttr.path.length - bAttr.path.length;
}

function segmentize(url) {
	return strip(url).split('/');
}

function rank(url) {
	return (strip(url).match(/\/+/g) || '').length;
}

function strip(url) {
	return url.replace(/(^\/+|\/+$)/g, '');
}

var customHistory = null;

var ROUTERS = [];

var subscribers = [];

var EMPTY = {};

function isPreactElement(node) {
	return node.__preactattr_ != null || typeof Symbol !== 'undefined' && node[Symbol.for('preactattr')] != null;
}

function setUrl(url, type) {
	if (type === void 0) type = 'push';

	if (customHistory && customHistory[type]) {
		customHistory[type](url);
	} else if (typeof history !== 'undefined' && history[type + 'State']) {
		history[type + 'State'](null, null, url);
	}
}

function getCurrentUrl() {
	var url;
	if (customHistory && customHistory.location) {
		url = customHistory.location;
	} else if (customHistory && customHistory.getCurrentLocation) {
		url = customHistory.getCurrentLocation();
	} else {
		url = typeof location !== 'undefined' ? location : EMPTY;
	}
	return "" + (url.pathname || '') + (url.search || '');
}

function route(url, replace) {
	if (replace === void 0) replace = false;

	if (typeof url !== 'string' && url.url) {
		replace = url.replace;
		url = url.url;
	}

	// only push URL into history if we can handle it
	if (canRoute(url)) {
		setUrl(url, replace ? 'replace' : 'push');
	}

	return routeTo(url);
}

/** Check if the given URL can be handled by any router instances. */
function canRoute(url) {
	for (var i = ROUTERS.length; i--;) {
		if (ROUTERS[i].canRoute(url)) {
			return true;
		}
	}
	return false;
}

/** Tell all router instances to handle the given URL.  */
function routeTo(url) {
	var didRoute = false;
	for (var i = 0; i < ROUTERS.length; i++) {
		if (ROUTERS[i].routeTo(url) === true) {
			didRoute = true;
		}
	}
	for (var i$1 = subscribers.length; i$1--;) {
		subscribers[i$1](url);
	}
	return didRoute;
}

function routeFromLink(node) {
	// only valid elements
	if (!node || !node.getAttribute) {
		return;
	}

	var href = node.getAttribute('href'),
	    target = node.getAttribute('target');

	// ignore links with targets and non-path URLs
	if (!href || !href.match(/^\//g) || target && !target.match(/^_?self$/i)) {
		return;
	}

	// attempt to route, if no match simply cede control to browser
	return route(href);
}

function handleLinkClick(e) {
	if (e.button == 0) {
		routeFromLink(e.currentTarget || e.target || this);
		return prevent(e);
	}
}

function prevent(e) {
	if (e) {
		if (e.stopImmediatePropagation) {
			e.stopImmediatePropagation();
		}
		if (e.stopPropagation) {
			e.stopPropagation();
		}
		e.preventDefault();
	}
	return false;
}

function delegateLinkHandler(e) {
	// ignore events the browser takes care of already:
	if (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || e.button !== 0) {
		return;
	}

	var t = e.target;
	do {
		if (String(t.nodeName).toUpperCase() === 'A' && t.getAttribute('href') && isPreactElement(t)) {
			if (t.hasAttribute('native')) {
				return;
			}
			// if link is handled by the router, prevent browser defaults
			if (routeFromLink(t)) {
				return prevent(e);
			}
		}
	} while (t = t.parentNode);
}

var eventListenersInitialized = false;

function initEventListeners() {
	if (eventListenersInitialized) {
		return;
	}

	if (typeof addEventListener === 'function') {
		if (!customHistory) {
			addEventListener('popstate', function () {
				return routeTo(getCurrentUrl());
			});
		}
		addEventListener('click', delegateLinkHandler);
	}
	eventListenersInitialized = true;
}

var preact_router_es_Router = function (Component$$1) {
	function Router(props) {
		Component$$1.call(this, props);
		if (props.history) {
			customHistory = props.history;
		}

		this.state = {
			url: props.url || getCurrentUrl()
		};

		initEventListeners();
	}

	if (Component$$1) Router.__proto__ = Component$$1;
	Router.prototype = Object.create(Component$$1 && Component$$1.prototype);
	Router.prototype.constructor = Router;

	Router.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {
		if (props.static !== true) {
			return true;
		}
		return props.url !== this.props.url || props.onChange !== this.props.onChange;
	};

	/** Check if the given URL can be matched against any children */
	Router.prototype.canRoute = function canRoute(url) {
		return this.getMatchingChildren(this.props.children, url, false).length > 0;
	};

	/** Re-render children with a new URL to match against. */
	Router.prototype.routeTo = function routeTo(url) {
		this._didRoute = false;
		this.setState({ url: url });

		// if we're in the middle of an update, don't synchronously re-route.
		if (this.updating) {
			return this.canRoute(url);
		}

		this.forceUpdate();
		return this._didRoute;
	};

	Router.prototype.componentWillMount = function componentWillMount() {
		ROUTERS.push(this);
		this.updating = true;
	};

	Router.prototype.componentDidMount = function componentDidMount() {
		var this$1 = this;

		if (customHistory) {
			this.unlisten = customHistory.listen(function (location) {
				this$1.routeTo("" + (location.pathname || '') + (location.search || ''));
			});
		}
		this.updating = false;
	};

	Router.prototype.componentWillUnmount = function componentWillUnmount() {
		if (typeof this.unlisten === 'function') {
			this.unlisten();
		}
		ROUTERS.splice(ROUTERS.indexOf(this), 1);
	};

	Router.prototype.componentWillUpdate = function componentWillUpdate() {
		this.updating = true;
	};

	Router.prototype.componentDidUpdate = function componentDidUpdate() {
		this.updating = false;
	};

	Router.prototype.getMatchingChildren = function getMatchingChildren(children, url, invoke) {
		return children.slice().sort(pathRankSort).map(function (vnode) {
			var attrs = vnode.attributes || {},
			    path = attrs.path,
			    matches = exec(url, path, attrs);
			if (matches) {
				if (invoke !== false) {
					var newProps = { url: url, matches: matches };
					preact_router_es_assign(newProps, matches);
					return Object(preact_min["cloneElement"])(vnode, newProps);
				}
				return vnode;
			}
			return false;
		}).filter(Boolean);
	};

	Router.prototype.render = function render(ref, ref$1) {
		var children = ref.children;
		var onChange = ref.onChange;
		var url = ref$1.url;

		var active = this.getMatchingChildren(children, url, true);

		var current = active[0] || null;
		this._didRoute = !!current;

		var previous = this.previousUrl;
		if (url !== previous) {
			this.previousUrl = url;
			if (typeof onChange === 'function') {
				onChange({
					router: this,
					url: url,
					previous: previous,
					active: active,
					current: current
				});
			}
		}

		return current;
	};

	return Router;
}(preact_min["Component"]);

var preact_router_es_Link = function Link(props) {
	return Object(preact_min["h"])('a', preact_router_es_assign({ onClick: handleLinkClick }, props));
};

var preact_router_es_Route = function Route(props) {
	return Object(preact_min["h"])(props.component, props);
};

preact_router_es_Router.subscribers = subscribers;
preact_router_es_Router.getCurrentUrl = getCurrentUrl;
preact_router_es_Router.route = route;
preact_router_es_Router.Router = preact_router_es_Router;
preact_router_es_Router.Route = preact_router_es_Route;
preact_router_es_Router.Link = preact_router_es_Link;

/* harmony default export */ var preact_router_es = (preact_router_es_Router);
//# sourceMappingURL=preact-router.es.js.map
// CONCATENATED MODULE: ../node_modules/@material/base/foundation.js
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
var MDCFoundation = function () {
  _createClass(MDCFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports every
      // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
      return {};
    }

    /** @return enum{strings} */

  }, {
    key: "strings",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
      return {};
    }

    /** @return enum{numbers} */

  }, {
    key: "numbers",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
      return {};
    }

    /** @return {!Object} */

  }, {
    key: "defaultAdapter",
    get: function get() {
      // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
      // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
      // validation.
      return {};
    }

    /**
     * @param {A=} adapter
     */

  }]);

  function MDCFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MDCFoundation);

    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  MDCFoundation.prototype.init = function init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  };

  MDCFoundation.prototype.destroy = function destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  };

  return MDCFoundation;
}();

/* harmony default export */ var base_foundation = (MDCFoundation);
// CONCATENATED MODULE: ../node_modules/@material/base/component.js
function component__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @template F
 */

var component_MDCComponent = function () {
  /**
   * @param {!Element} root
   * @return {!MDCComponent}
   */
  MDCComponent.attachTo = function attachTo(root) {
    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
    // returns an instantiated component with its root set to that element. Also note that in the cases of
    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
    // from getDefaultFoundation().
    return new MDCComponent(root, new base_foundation());
  };

  /**
   * @param {!Element} root
   * @param {F=} foundation
   * @param {...?} args
   */


  function MDCComponent(root) {
    var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    component__classCallCheck(this, MDCComponent);

    /** @protected {!Element} */
    this.root_ = root;

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.initialize.apply(this, args);
    // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.
    /** @protected {!F} */
    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  MDCComponent.prototype.initialize = function initialize() /* ...args */{}
  // Subclasses can override this to do any additional setup work that would be considered part of a
  // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
  // initialized. Any additional arguments besides root and foundation will be passed in here.


  /**
   * @return {!F} foundation
   */
  ;

  MDCComponent.prototype.getDefaultFoundation = function getDefaultFoundation() {
    // Subclasses must override this method to return a properly configured foundation class for the
    // component.
    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
  };

  MDCComponent.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    // Subclasses should override this method if they need to perform work to synchronize with a host DOM
    // object. An example of this would be a form control wrapper that needs to synchronize its internal state
    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
  };

  MDCComponent.prototype.destroy = function destroy() {
    // Subclasses may implement this method to release any resources / deregister any listeners they have
    // attached. An example of this might be deregistering a resize event from the window object.
    this.foundation_.destroy();
  };

  /**
   * Wrapper method to add an event listener to the component's root element. This is most useful when
   * listening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCComponent.prototype.listen = function listen(evtType, handler) {
    this.root_.addEventListener(evtType, handler);
  };

  /**
   * Wrapper method to remove an event listener to the component's root element. This is most useful when
   * unlistening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCComponent.prototype.unlisten = function unlisten(evtType, handler) {
    this.root_.removeEventListener(evtType, handler);
  };

  /**
   * Fires a cross-browser-compatible custom event from the component root of the given type,
   * with the given data.
   * @param {string} evtType
   * @param {!Object} evtData
   * @param {boolean=} shouldBubble
   */


  MDCComponent.prototype.emit = function emit(evtType, evtData) {
    var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var evt = void 0;
    if (typeof CustomEvent === 'function') {
      evt = new CustomEvent(evtType, {
        detail: evtData,
        bubbles: shouldBubble
      });
    } else {
      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }

    this.root_.dispatchEvent(evt);
  };

  return MDCComponent;
}();

/* harmony default export */ var base_component = (component_MDCComponent);
// CONCATENATED MODULE: ../node_modules/@material/ripple/adapter.js
function adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Ripple. Provides an interface for managing
 * - classes
 * - dom
 * - CSS variables
 * - position
 * - dimensions
 * - scroll position
 * - event handlers
 * - unbounded, active and disabled states
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */
var MDCRippleAdapter = function () {
  function MDCRippleAdapter() {
    adapter__classCallCheck(this, MDCRippleAdapter);
  }

  /** @return {boolean} */
  MDCRippleAdapter.prototype.browserSupportsCssVars = function browserSupportsCssVars() {};

  /** @return {boolean} */


  MDCRippleAdapter.prototype.isUnbounded = function isUnbounded() {};

  /** @return {boolean} */


  MDCRippleAdapter.prototype.isSurfaceActive = function isSurfaceActive() {};

  /** @return {boolean} */


  MDCRippleAdapter.prototype.isSurfaceDisabled = function isSurfaceDisabled() {};

  /** @param {string} className */


  MDCRippleAdapter.prototype.addClass = function addClass(className) {};

  /** @param {string} className */


  MDCRippleAdapter.prototype.removeClass = function removeClass(className) {};

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.registerInteractionHandler = function registerInteractionHandler(evtType, handler) {};

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.deregisterInteractionHandler = function deregisterInteractionHandler(evtType, handler) {};

  /**
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.registerResizeHandler = function registerResizeHandler(handler) {};

  /**
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.deregisterResizeHandler = function deregisterResizeHandler(handler) {};

  /**
   * @param {string} varName
   * @param {?number|string} value
   */


  MDCRippleAdapter.prototype.updateCssVariable = function updateCssVariable(varName, value) {};

  /** @return {!ClientRect} */


  MDCRippleAdapter.prototype.computeBoundingRect = function computeBoundingRect() {};

  /** @return {{x: number, y: number}} */


  MDCRippleAdapter.prototype.getWindowPageOffset = function getWindowPageOffset() {};

  return MDCRippleAdapter;
}();

/* harmony default export */ var ripple_adapter = (MDCRippleAdapter);
// CONCATENATED MODULE: ../node_modules/@material/ripple/constants.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses = {
  // Ripple is a special case where the "root" component is really a "mixin" of sorts,
  // given that it's an 'upgrade' to an existing component. That being said it is the root
  // CSS class that all other CSS classes derive from.
  ROOT: 'mdc-ripple-upgraded',
  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
  BG_ACTIVE_FILL: 'mdc-ripple-upgraded--background-active-fill',
  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation'
};

var strings = {
  VAR_SURFACE_WIDTH: '--mdc-ripple-surface-width',
  VAR_SURFACE_HEIGHT: '--mdc-ripple-surface-height',
  VAR_FG_SIZE: '--mdc-ripple-fg-size',
  VAR_LEFT: '--mdc-ripple-left',
  VAR_TOP: '--mdc-ripple-top',
  VAR_FG_SCALE: '--mdc-ripple-fg-scale',
  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end'
};

var numbers = {
  PADDING: 10,
  INITIAL_ORIGIN_SCALE: 0.6,
  DEACTIVATION_TIMEOUT_MS: 300,
  FG_DEACTIVATION_MS: 83
};


// CONCATENATED MODULE: ../node_modules/@material/ripple/util.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.
 * @private {boolean|undefined}
 */
var supportsCssVariables_ = void 0;

/**
 * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.
 * @private {boolean|undefined}
 */
var supportsPassive_ = void 0;

/**
 * @param {!Window} windowObj
 * @return {boolean}
 */
function detectEdgePseudoVarBug(windowObj) {
  // Detect versions of Edge with buggy var() support
  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  var document = windowObj.document;
  var node = document.createElement('div');
  node.className = 'mdc-ripple-surface--test-edge-var-bug';
  document.body.appendChild(node);

  // The bug exists if ::before style ends up propagating to the parent element.
  // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
  // but Firefox is known to support CSS custom properties correctly.
  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  var computedStyle = windowObj.getComputedStyle(node);
  var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
  node.remove();
  return hasPseudoVarBug;
}

/**
 * @param {!Window} windowObj
 * @param {boolean=} forceRefresh
 * @return {boolean|undefined}
 */

function supportsCssVariables(windowObj) {
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
    return supportsCssVariables_;
  }

  var supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';
  if (!supportsFunctionPresent) {
    return;
  }

  var explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');
  // See: https://bugs.webkit.org/show_bug.cgi?id=154669
  // See: README section on Safari
  var weAreFeatureDetectingSafari10plus = windowObj.CSS.supports('(--css-vars: yes)') && windowObj.CSS.supports('color', '#00000000');

  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
    supportsCssVariables_ = !detectEdgePseudoVarBug(windowObj);
  } else {
    supportsCssVariables_ = false;
  }
  return supportsCssVariables_;
}

//
/**
 * Determine whether the current browser supports passive event listeners, and if so, use them.
 * @param {!Window=} globalObj
 * @param {boolean=} forceRefresh
 * @return {boolean|{passive: boolean}}
 */
function applyPassive() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (supportsPassive_ === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    supportsPassive_ = isSupported;
  }

  return supportsPassive_ ? { passive: true } : false;
}

/**
 * @param {!Object} HTMLElementPrototype
 * @return {!Array<string>}
 */
function getMatchesProperty(HTMLElementPrototype) {
  return ['webkitMatchesSelector', 'msMatchesSelector', 'matches'].filter(function (p) {
    return p in HTMLElementPrototype;
  }).pop();
}

/**
 * @param {!Event} ev
 * @param {!{x: number, y: number}} pageOffset
 * @param {!ClientRect} clientRect
 * @return {!{x: number, y: number}}
 */
function getNormalizedEventCoords(ev, pageOffset, clientRect) {
  var x = pageOffset.x,
      y = pageOffset.y;

  var documentX = x + clientRect.left;
  var documentY = y + clientRect.top;

  var normalizedX = void 0;
  var normalizedY = void 0;
  // Determine touch point relative to the ripple container.
  if (ev.type === 'touchstart') {
    normalizedX = ev.changedTouches[0].pageX - documentX;
    normalizedY = ev.changedTouches[0].pageY - documentY;
  } else {
    normalizedX = ev.pageX - documentX;
    normalizedY = ev.pageY - documentY;
  }

  return { x: normalizedX, y: normalizedY };
}


// CONCATENATED MODULE: ../node_modules/@material/ripple/foundation.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @typedef {!{
 *   isActivated: (boolean|undefined),
 *   hasDeactivationUXRun: (boolean|undefined),
 *   wasActivatedByPointer: (boolean|undefined),
 *   wasElementMadeActive: (boolean|undefined),
 *   activationStartTime: (number|undefined),
 *   activationEvent: Event,
 *   isProgrammatic: (boolean|undefined)
 * }}
 */
var ActivationStateType = void 0;

/**
 * @typedef {!{
 *   activate: (string|undefined),
 *   deactivate: (string|undefined),
 *   focus: (string|undefined),
 *   blur: (string|undefined)
 * }}
 */
var ListenerInfoType = void 0;

/**
 * @typedef {!{
 *   activate: function(!Event),
 *   deactivate: function(!Event),
 *   focus: function(),
 *   blur: function()
 * }}
 */
var ListenersType = void 0;

/**
 * @typedef {!{
 *   x: number,
 *   y: number
 * }}
 */
var PointType = void 0;

/**
 * @enum {string}
 */
var DEACTIVATION_ACTIVATION_PAIRS = {
  mouseup: 'mousedown',
  pointerup: 'pointerdown',
  touchend: 'touchstart',
  keyup: 'keydown',
  blur: 'focus'
};

/**
 * @extends {MDCFoundation<!MDCRippleAdapter>}
 */

var foundation_MDCRippleFoundation = function (_MDCFoundation) {
  _inherits(MDCRippleFoundation, _MDCFoundation);

  foundation__createClass(MDCRippleFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return numbers;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        browserSupportsCssVars: function browserSupportsCssVars() /* boolean - cached */{},
        isUnbounded: function isUnbounded() /* boolean */{},
        isSurfaceActive: function isSurfaceActive() /* boolean */{},
        isSurfaceDisabled: function isSurfaceDisabled() /* boolean */{},
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerInteractionHandler: function registerInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        updateCssVariable: function updateCssVariable() /* varName: string, value: string */{},
        computeBoundingRect: function computeBoundingRect() /* ClientRect */{},
        getWindowPageOffset: function getWindowPageOffset() /* {x: number, y: number} */{}
      };
    }
  }]);

  function MDCRippleFoundation(adapter) {
    foundation__classCallCheck(this, MDCRippleFoundation);

    /** @private {number} */
    var _this = _possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCRippleFoundation.defaultAdapter, adapter)));

    _this.layoutFrame_ = 0;

    /** @private {!ClientRect} */
    _this.frame_ = /** @type {!ClientRect} */{ width: 0, height: 0 };

    /** @private {!ActivationStateType} */
    _this.activationState_ = _this.defaultActivationState_();

    /** @private {number} */
    _this.xfDuration_ = 0;

    /** @private {number} */
    _this.initialSize_ = 0;

    /** @private {number} */
    _this.maxRadius_ = 0;

    /** @private {!Array<{ListenerInfoType}>} */
    _this.listenerInfos_ = [{ activate: 'touchstart', deactivate: 'touchend' }, { activate: 'pointerdown', deactivate: 'pointerup' }, { activate: 'mousedown', deactivate: 'mouseup' }, { activate: 'keydown', deactivate: 'keyup' }, { focus: 'focus', blur: 'blur' }];

    /** @private {!ListenersType} */
    _this.listeners_ = {
      activate: function activate(e) {
        return _this.activate_(e);
      },
      deactivate: function deactivate(e) {
        return _this.deactivate_(e);
      },
      focus: function focus() {
        return requestAnimationFrame(function () {
          return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
      },
      blur: function blur() {
        return requestAnimationFrame(function () {
          return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
      }
    };

    /** @private {!Function} */
    _this.resizeHandler_ = function () {
      return _this.layout();
    };

    /** @private {!{left: number, top:number}} */
    _this.unboundedCoords_ = {
      left: 0,
      top: 0
    };

    /** @private {number} */
    _this.fgScale_ = 0;

    /** @private {number} */
    _this.activationTimer_ = 0;

    /** @private {number} */
    _this.fgDeactivationRemovalTimer_ = 0;

    /** @private {boolean} */
    _this.activationAnimationHasEnded_ = false;

    /** @private {!Function} */
    _this.activationTimerCallback_ = function () {
      _this.activationAnimationHasEnded_ = true;
      _this.runDeactivationUXLogicIfReady_();
    };
    return _this;
  }

  /**
   * We compute this property so that we are not querying information about the client
   * until the point in time where the foundation requests it. This prevents scenarios where
   * client-side feature-detection may happen too early, such as when components are rendered on the server
   * and then initialized at mount time on the client.
   * @return {boolean}
   * @private
   */


  MDCRippleFoundation.prototype.isSupported_ = function isSupported_() {
    return this.adapter_.browserSupportsCssVars();
  };

  /**
   * @return {!ActivationStateType}
   */


  MDCRippleFoundation.prototype.defaultActivationState_ = function defaultActivationState_() {
    return {
      isActivated: false,
      hasDeactivationUXRun: false,
      wasActivatedByPointer: false,
      wasElementMadeActive: false,
      activationStartTime: 0,
      activationEvent: null,
      isProgrammatic: false
    };
  };

  MDCRippleFoundation.prototype.init = function init() {
    var _this2 = this;

    if (!this.isSupported_()) {
      return;
    }
    this.addEventListeners_();

    var _MDCRippleFoundation$ = MDCRippleFoundation.cssClasses,
        ROOT = _MDCRippleFoundation$.ROOT,
        UNBOUNDED = _MDCRippleFoundation$.UNBOUNDED;

    requestAnimationFrame(function () {
      _this2.adapter_.addClass(ROOT);
      if (_this2.adapter_.isUnbounded()) {
        _this2.adapter_.addClass(UNBOUNDED);
      }
      _this2.layoutInternal_();
    });
  };

  /** @private */


  MDCRippleFoundation.prototype.addEventListeners_ = function addEventListeners_() {
    var _this3 = this;

    this.listenerInfos_.forEach(function (info) {
      Object.keys(info).forEach(function (k) {
        _this3.adapter_.registerInteractionHandler(info[k], _this3.listeners_[k]);
      });
    });
    this.adapter_.registerResizeHandler(this.resizeHandler_);
  };

  /**
   * @param {Event} e
   * @private
   */


  MDCRippleFoundation.prototype.activate_ = function activate_(e) {
    var _this4 = this;

    if (this.adapter_.isSurfaceDisabled()) {
      return;
    }

    var activationState = this.activationState_;

    if (activationState.isActivated) {
      return;
    }

    activationState.isActivated = true;
    activationState.isProgrammatic = e === null;
    activationState.activationEvent = e;
    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown';
    activationState.activationStartTime = Date.now();

    requestAnimationFrame(function () {
      // This needs to be wrapped in an rAF call b/c web browsers
      // report active states inconsistently when they're called within
      // event handling code:
      // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
      // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
      activationState.wasElementMadeActive = e && e.type === 'keydown' ? _this4.adapter_.isSurfaceActive() : true;
      if (activationState.wasElementMadeActive) {
        _this4.animateActivation_();
      } else {
        // Reset activation state immediately if element was not made active.
        _this4.activationState_ = _this4.defaultActivationState_();
      }
    });
  };

  /**
   * @param {?Event=} event Optional event containing position information.
   */


  MDCRippleFoundation.prototype.activate = function activate() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    this.activate_(event);
  };

  /** @private */


  MDCRippleFoundation.prototype.animateActivation_ = function animateActivation_() {
    var _this5 = this;

    var _MDCRippleFoundation$2 = MDCRippleFoundation.strings,
        VAR_FG_TRANSLATE_START = _MDCRippleFoundation$2.VAR_FG_TRANSLATE_START,
        VAR_FG_TRANSLATE_END = _MDCRippleFoundation$2.VAR_FG_TRANSLATE_END;
    var _MDCRippleFoundation$3 = MDCRippleFoundation.cssClasses,
        BG_ACTIVE_FILL = _MDCRippleFoundation$3.BG_ACTIVE_FILL,
        FG_DEACTIVATION = _MDCRippleFoundation$3.FG_DEACTIVATION,
        FG_ACTIVATION = _MDCRippleFoundation$3.FG_ACTIVATION;
    var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;


    var translateStart = '';
    var translateEnd = '';

    if (!this.adapter_.isUnbounded()) {
      var _getFgTranslationCoor = this.getFgTranslationCoordinates_(),
          startPoint = _getFgTranslationCoor.startPoint,
          endPoint = _getFgTranslationCoor.endPoint;

      translateStart = startPoint.x + 'px, ' + startPoint.y + 'px';
      translateEnd = endPoint.x + 'px, ' + endPoint.y + 'px';
    }

    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
    // Cancel any ongoing activation/deactivation animations
    clearTimeout(this.activationTimer_);
    clearTimeout(this.fgDeactivationRemovalTimer_);
    this.rmBoundedActivationClasses_();
    this.adapter_.removeClass(FG_DEACTIVATION);

    // Force layout in order to re-trigger the animation.
    this.adapter_.computeBoundingRect();
    this.adapter_.addClass(BG_ACTIVE_FILL);
    this.adapter_.addClass(FG_ACTIVATION);
    this.activationTimer_ = setTimeout(function () {
      return _this5.activationTimerCallback_();
    }, DEACTIVATION_TIMEOUT_MS);
  };

  /**
   * @private
   * @return {{startPoint: PointType, endPoint: PointType}}
   */


  MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function getFgTranslationCoordinates_() {
    var activationState = this.activationState_;
    var activationEvent = activationState.activationEvent,
        wasActivatedByPointer = activationState.wasActivatedByPointer;


    var startPoint = void 0;
    if (wasActivatedByPointer) {
      startPoint = getNormalizedEventCoords(
      /** @type {!Event} */activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
    } else {
      startPoint = {
        x: this.frame_.width / 2,
        y: this.frame_.height / 2
      };
    }
    // Center the element around the start point.
    startPoint = {
      x: startPoint.x - this.initialSize_ / 2,
      y: startPoint.y - this.initialSize_ / 2
    };

    var endPoint = {
      x: this.frame_.width / 2 - this.initialSize_ / 2,
      y: this.frame_.height / 2 - this.initialSize_ / 2
    };

    return { startPoint: startPoint, endPoint: endPoint };
  };

  /** @private */


  MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function runDeactivationUXLogicIfReady_() {
    var _this6 = this;

    var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
    var _activationState_ = this.activationState_,
        hasDeactivationUXRun = _activationState_.hasDeactivationUXRun,
        isActivated = _activationState_.isActivated;

    var activationHasEnded = hasDeactivationUXRun || !isActivated;
    if (activationHasEnded && this.activationAnimationHasEnded_) {
      this.rmBoundedActivationClasses_();
      this.adapter_.addClass(FG_DEACTIVATION);
      this.fgDeactivationRemovalTimer_ = setTimeout(function () {
        _this6.adapter_.removeClass(FG_DEACTIVATION);
      }, numbers.FG_DEACTIVATION_MS);
    }
  };

  /** @private */


  MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function rmBoundedActivationClasses_() {
    var _MDCRippleFoundation$4 = MDCRippleFoundation.cssClasses,
        BG_ACTIVE_FILL = _MDCRippleFoundation$4.BG_ACTIVE_FILL,
        FG_ACTIVATION = _MDCRippleFoundation$4.FG_ACTIVATION;

    this.adapter_.removeClass(BG_ACTIVE_FILL);
    this.adapter_.removeClass(FG_ACTIVATION);
    this.activationAnimationHasEnded_ = false;
    this.adapter_.computeBoundingRect();
  };

  /**
   * @param {Event} e
   * @private
   */


  MDCRippleFoundation.prototype.deactivate_ = function deactivate_(e) {
    var _this7 = this;

    var activationState = this.activationState_;
    // This can happen in scenarios such as when you have a keyup event that blurs the element.

    if (!activationState.isActivated) {
      return;
    }
    // Programmatic deactivation.
    if (activationState.isProgrammatic) {
      var evtObject = null;
      var _state = /** @type {!ActivationStateType} */_extends({}, activationState);
      requestAnimationFrame(function () {
        return _this7.animateDeactivation_(evtObject, _state);
      });
      this.activationState_ = this.defaultActivationState_();
      return;
    }

    var actualActivationType = DEACTIVATION_ACTIVATION_PAIRS[e.type];
    var expectedActivationType = activationState.activationEvent.type;
    // NOTE: Pointer events are tricky - https://patrickhlauke.github.io/touch/tests/results/
    // Essentially, what we need to do here is decouple the deactivation UX from the actual
    // deactivation state itself. This way, touch/pointer events in sequence do not trample one
    // another.
    var needsDeactivationUX = actualActivationType === expectedActivationType;
    var needsActualDeactivation = needsDeactivationUX;
    if (activationState.wasActivatedByPointer) {
      needsActualDeactivation = e.type === 'mouseup';
    }

    var state = /** @type {!ActivationStateType} */_extends({}, activationState);
    requestAnimationFrame(function () {
      if (needsDeactivationUX) {
        _this7.activationState_.hasDeactivationUXRun = true;
        _this7.animateDeactivation_(e, state);
      }

      if (needsActualDeactivation) {
        _this7.activationState_ = _this7.defaultActivationState_();
      }
    });
  };

  /**
   * @param {?Event=} event Optional event containing position information.
   */


  MDCRippleFoundation.prototype.deactivate = function deactivate() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    this.deactivate_(event);
  };

  /**
   * @param {Event} e
   * @param {!ActivationStateType} options
   * @private
   */


  MDCRippleFoundation.prototype.animateDeactivation_ = function animateDeactivation_(e, _ref) {
    var wasActivatedByPointer = _ref.wasActivatedByPointer,
        wasElementMadeActive = _ref.wasElementMadeActive;
    var BG_FOCUSED = MDCRippleFoundation.cssClasses.BG_FOCUSED;

    if (wasActivatedByPointer || wasElementMadeActive) {
      // Remove class left over by element being focused
      this.adapter_.removeClass(BG_FOCUSED);
      this.runDeactivationUXLogicIfReady_();
    }
  };

  MDCRippleFoundation.prototype.destroy = function destroy() {
    var _this8 = this;

    if (!this.isSupported_()) {
      return;
    }
    this.removeEventListeners_();

    var _MDCRippleFoundation$5 = MDCRippleFoundation.cssClasses,
        ROOT = _MDCRippleFoundation$5.ROOT,
        UNBOUNDED = _MDCRippleFoundation$5.UNBOUNDED;

    requestAnimationFrame(function () {
      _this8.adapter_.removeClass(ROOT);
      _this8.adapter_.removeClass(UNBOUNDED);
      _this8.removeCssVars_();
    });
  };

  /** @private */


  MDCRippleFoundation.prototype.removeEventListeners_ = function removeEventListeners_() {
    var _this9 = this;

    this.listenerInfos_.forEach(function (info) {
      Object.keys(info).forEach(function (k) {
        _this9.adapter_.deregisterInteractionHandler(info[k], _this9.listeners_[k]);
      });
    });
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
  };

  /** @private */


  MDCRippleFoundation.prototype.removeCssVars_ = function removeCssVars_() {
    var _this10 = this;

    var strings = MDCRippleFoundation.strings;

    Object.keys(strings).forEach(function (k) {
      if (k.indexOf('VAR_') === 0) {
        _this10.adapter_.updateCssVariable(strings[k], null);
      }
    });
  };

  MDCRippleFoundation.prototype.layout = function layout() {
    var _this11 = this;

    if (this.layoutFrame_) {
      cancelAnimationFrame(this.layoutFrame_);
    }
    this.layoutFrame_ = requestAnimationFrame(function () {
      _this11.layoutInternal_();
      _this11.layoutFrame_ = 0;
    });
  };

  /** @private */


  MDCRippleFoundation.prototype.layoutInternal_ = function layoutInternal_() {
    this.frame_ = this.adapter_.computeBoundingRect();

    var maxDim = Math.max(this.frame_.height, this.frame_.width);
    var surfaceDiameter = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));

    // 60% of the largest dimension of the surface
    this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;

    // Diameter of the surface + 10px
    this.maxRadius_ = surfaceDiameter + MDCRippleFoundation.numbers.PADDING;
    this.fgScale_ = this.maxRadius_ / this.initialSize_;
    this.xfDuration_ = 1000 * Math.sqrt(this.maxRadius_ / 1024);
    this.updateLayoutCssVars_();
  };

  /** @private */


  MDCRippleFoundation.prototype.updateLayoutCssVars_ = function updateLayoutCssVars_() {
    var _MDCRippleFoundation$6 = MDCRippleFoundation.strings,
        VAR_SURFACE_WIDTH = _MDCRippleFoundation$6.VAR_SURFACE_WIDTH,
        VAR_SURFACE_HEIGHT = _MDCRippleFoundation$6.VAR_SURFACE_HEIGHT,
        VAR_FG_SIZE = _MDCRippleFoundation$6.VAR_FG_SIZE,
        VAR_LEFT = _MDCRippleFoundation$6.VAR_LEFT,
        VAR_TOP = _MDCRippleFoundation$6.VAR_TOP,
        VAR_FG_SCALE = _MDCRippleFoundation$6.VAR_FG_SCALE;


    this.adapter_.updateCssVariable(VAR_SURFACE_WIDTH, this.frame_.width + 'px');
    this.adapter_.updateCssVariable(VAR_SURFACE_HEIGHT, this.frame_.height + 'px');
    this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + 'px');
    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);

    if (this.adapter_.isUnbounded()) {
      this.unboundedCoords_ = {
        left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),
        top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)
      };

      this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + 'px');
      this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + 'px');
    }
  };

  return MDCRippleFoundation;
}(base_foundation);

/* harmony default export */ var ripple_foundation = (foundation_MDCRippleFoundation);
// CONCATENATED MODULE: ../node_modules/@material/ripple/index.js
var ripple__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function ripple__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ripple__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function ripple__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @extends MDCComponent<!MDCRippleFoundation>
 */

var ripple_MDCRipple = function (_MDCComponent) {
  ripple__inherits(MDCRipple, _MDCComponent);

  /** @param {...?} args */
  function MDCRipple() {
    ripple__classCallCheck(this, MDCRipple);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @type {boolean} */
    var _this = ripple__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.disabled = false;

    /** @private {boolean} */
    _this.unbounded_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @param {{isUnbounded: (boolean|undefined)}=} options
   * @return {!MDCRipple}
   */


  MDCRipple.attachTo = function attachTo(root) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$isUnbounded = _ref.isUnbounded,
        isUnbounded = _ref$isUnbounded === undefined ? undefined : _ref$isUnbounded;

    var ripple = new MDCRipple(root);
    // Only override unbounded behavior if option is explicitly specified
    if (isUnbounded !== undefined) {
      ripple.unbounded = /** @type {boolean} */isUnbounded;
    }
    return ripple;
  };

  /**
   * @param {!RippleCapableSurface} instance
   * @return {!MDCRippleAdapter}
   */


  MDCRipple.createAdapter = function createAdapter(instance) {
    var MATCHES = getMatchesProperty(HTMLElement.prototype);

    return {
      browserSupportsCssVars: function browserSupportsCssVars() {
        return supportsCssVariables(window);
      },
      isUnbounded: function isUnbounded() {
        return instance.unbounded;
      },
      isSurfaceActive: function isSurfaceActive() {
        return instance.root_[MATCHES](':active');
      },
      isSurfaceDisabled: function isSurfaceDisabled() {
        return instance.disabled;
      },
      addClass: function addClass(className) {
        return instance.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return instance.root_.classList.remove(className);
      },
      registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
        return instance.root_.addEventListener(evtType, handler, applyPassive());
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
        return instance.root_.removeEventListener(evtType, handler, applyPassive());
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      updateCssVariable: function updateCssVariable(varName, value) {
        return instance.root_.style.setProperty(varName, value);
      },
      computeBoundingRect: function computeBoundingRect() {
        return instance.root_.getBoundingClientRect();
      },
      getWindowPageOffset: function getWindowPageOffset() {
        return { x: window.pageXOffset, y: window.pageYOffset };
      }
    };
  };

  /** @return {boolean} */


  MDCRipple.prototype.activate = function activate() {
    this.foundation_.activate();
  };

  MDCRipple.prototype.deactivate = function deactivate() {
    this.foundation_.deactivate();
  };

  MDCRipple.prototype.layout = function layout() {
    this.foundation_.layout();
  };

  /** @return {!MDCRippleFoundation} */


  MDCRipple.prototype.getDefaultFoundation = function getDefaultFoundation() {
    return new ripple_foundation(MDCRipple.createAdapter(this));
  };

  MDCRipple.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;
  };

  ripple__createClass(MDCRipple, [{
    key: 'unbounded',
    get: function get() {
      return this.unbounded_;
    }

    /** @param {boolean} unbounded */
    ,
    set: function set(unbounded) {
      var UNBOUNDED = ripple_foundation.cssClasses.UNBOUNDED;

      this.unbounded_ = Boolean(unbounded);
      if (this.unbounded_) {
        this.root_.classList.add(UNBOUNDED);
      } else {
        this.root_.classList.remove(UNBOUNDED);
      }
    }
  }]);

  return MDCRipple;
}(base_component);

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */


var RippleCapableSurface = function RippleCapableSurface() {
  ripple__classCallCheck(this, RippleCapableSurface);
};

/** @protected {!Element} */


RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;


// CONCATENATED MODULE: ../node_modules/preact-material-components/MaterialComponent.js
var MaterialComponent__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function MaterialComponent__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function MaterialComponent__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function MaterialComponent__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * Base class for every Material component in this package
 * NOTE: every component should add a ref by the name of `control` to its root dom for autoInit Properties
 *
 * @export
 * @class MaterialComponent
 * @extends {Component}
 */

var MaterialComponent_MaterialComponent = function (_Component) {
  MaterialComponent__inherits(MaterialComponent, _Component);

  function MaterialComponent() {
    MaterialComponent__classCallCheck(this, MaterialComponent);

    // Attributes inside this array will be check for boolean value true
    // and will be converted to mdc classes
    var _this = MaterialComponent__possibleConstructorReturn(this, _Component.call(this));

    _this._mdcProps = [];
    // This will again be used to add apt classname to the component
    _this.componentName = "";
    // The final class name given to the dom
    _this.classText = "";
    return _this;
  }

  MaterialComponent.prototype.attachRipple = function attachRipple() {
    if (this.props.ripple && this.control) {
      ripple_MDCRipple.attachTo(this.control);
    }
  };
  // Build the className


  MaterialComponent.prototype.buildClassName = function buildClassName(props) {
    this.classText = "mdc-" + this.componentName;
    for (var propKey in this.props) {
      if (this.props.hasOwnProperty(propKey)) {
        var prop = this.props[propKey];
        if (typeof prop === "boolean" && prop) {
          if (this._mdcProps.indexOf(propKey) !== -1) {
            this.classText += " mdc-" + this.componentName + "--" + propKey;
          }
        }
      }
    }
  };

  MaterialComponent.prototype.getClassName = function getClassName(element) {
    if (!element) {
      return "";
    }
    var attrs = element.attributes = element.attributes || {};
    var classText = this.classText;
    if (attrs.class) {
      classText += " " + attrs.class;
    }
    if (attrs.className && attrs.className !== attrs.class) {
      classText += " " + attrs.className;
    }
    return classText;
  };
  // Components must implement this method for their specific DOM structure


  MaterialComponent.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("div", MaterialComponent__extends({}, props), props.children);
  };

  MaterialComponent.prototype.render = function render() {
    this.buildClassName();
    // Fetch a VNode
    var componentProps = this.props;
    if (componentProps.class) {
      // We delete class prop here so that any sub node's class doesn't get over-ridden from this
      delete componentProps.class;
    }
    var element = this.materialDom(componentProps);
    element.attributes = element.attributes || {};
    // Fix for className
    element.attributes.class = this.getClassName(element);
    element.attributes.className = this.getClassName(element);
    // Clean this shit of proxy attributes
    this._mdcProps.forEach(function (prop) {
      delete element.attributes[prop];
    });
    return element;
  };

  return MaterialComponent;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Formfield/index.js
function Formfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Formfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Formfield__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @prop mini = false
 * @prop plain = false
 */

var Formfield = function (_MaterialComponent) {
  Formfield__inherits(Formfield, _MaterialComponent);

  function Formfield() {
    Formfield__classCallCheck(this, Formfield);

    var _this = Formfield__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "form-field";
    _this._mdcProps = ["align-end"];
    return _this;
  }

  return Formfield;
}(MaterialComponent_MaterialComponent);


// CONCATENATED MODULE: ../node_modules/preact-material-components/LayoutGrid/index.js
function LayoutGrid__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function LayoutGrid__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function LayoutGrid__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LayoutGrid__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};




var LayoutGrid_LayoutGrid = function (_MaterialComponent) {
  LayoutGrid__inherits(LayoutGrid, _MaterialComponent);

  function LayoutGrid() {
    LayoutGrid__classCallCheck(this, LayoutGrid);

    var _this = LayoutGrid__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "layout-grid";
    return _this;
  }

  LayoutGrid.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("div", LayoutGrid__extends({
      ref: function ref(control) {
        _this2.control = control;
      }
    }, props), props.children);
  };

  return LayoutGrid;
}(MaterialComponent_MaterialComponent);

var LayoutGrid_LayoutGridInner = function (_MaterialComponent2) {
  LayoutGrid__inherits(LayoutGridInner, _MaterialComponent2);

  function LayoutGridInner() {
    LayoutGrid__classCallCheck(this, LayoutGridInner);

    var _this3 = LayoutGrid__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "layout-grid__inner";
    return _this3;
  }

  LayoutGridInner.prototype.materialDom = function materialDom(props) {
    var _this4 = this;

    return Object(preact_min["h"])("div", LayoutGrid__extends({
      ref: function ref(control) {
        _this4.control = control;
      }
    }, props), props.children);
  };

  return LayoutGridInner;
}(MaterialComponent_MaterialComponent);

/**
 * @prop cols = 0
 * @prop desktopCols = 0
 * @prop tabletCols = 0
 * @prop phoneCols = 0
 * @prop order = 0
 * @prop align = ''
 */


var LayoutGrid_LayoutGridCell = function (_MaterialComponent3) {
  LayoutGrid__inherits(LayoutGridCell, _MaterialComponent3);

  function LayoutGridCell() {
    LayoutGrid__classCallCheck(this, LayoutGridCell);

    var _this5 = LayoutGrid__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this5.componentName = "layout-grid__cell";
    _this5._propsDict = {
      cols: "cols",
      desktop: "desktopCols",
      tablet: "tabletCols",
      phone: "phoneCols",
      order: "order",
      align: "align"
    };
    return _this5;
  }

  LayoutGridCell.prototype.createClassName = function createClassName(props) {
    var baseClass = "mdc-layout-grid__cell--";
    var classes = [];

    if (props[this._propsDict.cols]) {
      classes.push(baseClass + "span-" + props[this._propsDict.cols]);
    }

    if (props[this._propsDict.desktop]) {
      classes.push(baseClass + "span-" + props[this._propsDict.desktop] + "-desktop");
    }

    if (props[this._propsDict.tablet]) {
      classes.push(baseClass + "span-" + props[this._propsDict.tablet] + "-tablet");
    }

    if (props[this._propsDict.phone]) {
      classes.push(baseClass + "span-" + props[this._propsDict.phone] + "-phone");
    }

    if (props[this._propsDict.order]) {
      classes.push(baseClass + "order-" + props[this._propsDict.order]);
    }

    if (props[this._propsDict.align]) {
      classes.push(baseClass + "align-" + props[this._propsDict.align]);
    }

    return classes.join(" ");
  };

  LayoutGridCell.prototype.materialDom = function materialDom(props) {
    var _this6 = this;

    return Object(preact_min["h"])("div", LayoutGrid__extends({
      className: this.createClassName(props),
      ref: function ref(control) {
        _this6.control = control;
      }
    }, props), props.children);
  };

  LayoutGridCell.prototype.render = function render() {
    var _this7 = this;

    var element = _MaterialComponent3.prototype.render.call(this);
    // remove the extra attributes used for customising this element - keep the DOM clean
    Object.keys(this._propsDict).forEach(function (key) {
      return delete element.attributes[_this7._propsDict[key]];
    });
    return element;
  };

  return LayoutGridCell;
}(MaterialComponent_MaterialComponent);

LayoutGrid_LayoutGrid.Cell = LayoutGrid_LayoutGridCell;
LayoutGrid_LayoutGrid.Inner = LayoutGrid_LayoutGridInner;

/* harmony default export */ var preact_material_components_LayoutGrid = (LayoutGrid_LayoutGrid);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Switch/index.js
function Switch__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Switch__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Switch__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Switch__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}




/**
 * @prop disabled = false
 */

var Switch_Switch = function (_MaterialComponent) {
  Switch__inherits(Switch, _MaterialComponent);

  function Switch() {
    Switch__classCallCheck(this, Switch);

    var _this = Switch__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "switch";
    _this._mdcProps = ["disabled"];
    return _this;
  }

  Switch.prototype.materialDom = function materialDom(allprops) {
    var className = allprops.className,
        props = _objectWithoutProperties(allprops, ["className"]);

    return Object(preact_min["h"])("div", { className: className }, Object(preact_min["h"])("input", Switch__extends({
      type: "checkbox",
      className: "mdc-switch__native-control"
    }, props)), Object(preact_min["h"])("div", { className: "mdc-switch__background" }, Object(preact_min["h"])("div", { className: "mdc-switch__knob" })));
  };

  return Switch;
}(MaterialComponent_MaterialComponent);


// CONCATENATED MODULE: ../node_modules/@material/base/index.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





// CONCATENATED MODULE: ../node_modules/@material/toolbar/constants.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var constants_cssClasses = {
  FIXED: 'mdc-toolbar--fixed',
  FIXED_LASTROW: 'mdc-toolbar--fixed-lastrow-only',
  FIXED_AT_LAST_ROW: 'mdc-toolbar--fixed-at-last-row',
  TOOLBAR_ROW_FLEXIBLE: 'mdc-toolbar--flexible',
  FLEXIBLE_DEFAULT_BEHAVIOR: 'mdc-toolbar--flexible-default-behavior',
  FLEXIBLE_MAX: 'mdc-toolbar--flexible-space-maximized',
  FLEXIBLE_MIN: 'mdc-toolbar--flexible-space-minimized'
};

var constants_strings = {
  TITLE_SELECTOR: '.mdc-toolbar__title',
  FIRST_ROW_SELECTOR: '.mdc-toolbar__row:first-child',
  CHANGE_EVENT: 'MDCToolbar:change'
};

var constants_numbers = {
  MAX_TITLE_SIZE: 2.125,
  MIN_TITLE_SIZE: 1.25,
  TOOLBAR_ROW_HEIGHT: 64,
  TOOLBAR_ROW_MOBILE_HEIGHT: 56,
  TOOLBAR_MOBILE_BREAKPOINT: 600
};
// CONCATENATED MODULE: ../node_modules/@material/toolbar/foundation.js
var foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var toolbar_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function toolbar_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var foundation_MDCToolbarFoundation = function (_MDCFoundation) {
  foundation__inherits(MDCToolbarFoundation, _MDCFoundation);

  toolbar_foundation__createClass(MDCToolbarFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return constants_strings;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return constants_numbers;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        hasClass: function hasClass() {
          return (/* className: string */ /* boolean */false
          );
        },
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerScrollHandler: function registerScrollHandler() /* handler: EventListener */{},
        deregisterScrollHandler: function deregisterScrollHandler() /* handler: EventListener */{},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        getViewportWidth: function getViewportWidth() {
          return (/* number */0
          );
        },
        getViewportScrollY: function getViewportScrollY() {
          return (/* number */0
          );
        },
        getOffsetHeight: function getOffsetHeight() {
          return (/* number */0
          );
        },
        getFirstRowElementOffsetHeight: function getFirstRowElementOffsetHeight() {
          return (/* number */0
          );
        },
        notifyChange: function notifyChange() /* evtData: {flexibleExpansionRatio: number} */{},
        setStyle: function setStyle() /* property: string, value: string */{},
        setStyleForTitleElement: function setStyleForTitleElement() /* property: string, value: string */{},
        setStyleForFlexibleRowElement: function setStyleForFlexibleRowElement() /* property: string, value: string */{},
        setStyleForFixedAdjustElement: function setStyleForFixedAdjustElement() /* property: string, value: string */{}
      };
    }
  }]);

  function MDCToolbarFoundation(adapter) {
    toolbar_foundation__classCallCheck(this, MDCToolbarFoundation);

    var _this = foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, foundation__extends(MDCToolbarFoundation.defaultAdapter, adapter)));

    _this.resizeHandler_ = function () {
      return _this.checkRowHeight_();
    };
    _this.scrollHandler_ = function () {
      return _this.updateToolbarStyles_();
    };
    _this.checkRowHeightFrame_ = 0;
    _this.scrollFrame_ = 0;
    _this.executedLastChange_ = false;

    _this.calculations_ = {
      toolbarRowHeight: 0,
      // Calculated Height ratio. We use ratio to calculate corresponding heights in resize event.
      toolbarRatio: 0, // The ratio of toolbar height to row height
      flexibleExpansionRatio: 0, // The ratio of flexible space height to row height
      maxTranslateYRatio: 0, // The ratio of max toolbar move up distance to row height
      scrollThresholdRatio: 0, // The ratio of max scrollTop that we should listen to to row height
      // Derived Heights based on the above key ratios.
      toolbarHeight: 0,
      flexibleExpansionHeight: 0, // Flexible row minus toolbar height (derived)
      maxTranslateYDistance: 0, // When toolbar only fix last row (derived)
      scrollThreshold: 0
    };
    // Toolbar fixed behavior
    // If toolbar is fixed
    _this.fixed_ = false;
    // If fixed is targeted only at the last row
    _this.fixedLastrow_ = false;
    // Toolbar flexible behavior
    // If the first row is flexible
    _this.hasFlexibleRow_ = false;
    // If use the default behavior
    _this.useFlexDefaultBehavior_ = false;
    return _this;
  }

  MDCToolbarFoundation.prototype.init = function init() {
    this.fixed_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED);
    this.fixedLastrow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED_LASTROW) & this.fixed_;
    this.hasFlexibleRow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.TOOLBAR_ROW_FLEXIBLE);
    if (this.hasFlexibleRow_) {
      this.useFlexDefaultBehavior_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_DEFAULT_BEHAVIOR);
    }
    this.initKeyRatio_();
    this.setKeyHeights_();
    this.adapter_.registerResizeHandler(this.resizeHandler_);
    this.adapter_.registerScrollHandler(this.scrollHandler_);
  };

  MDCToolbarFoundation.prototype.destroy = function destroy() {
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  };

  MDCToolbarFoundation.prototype.updateAdjustElementStyles = function updateAdjustElementStyles() {
    if (this.fixed_) {
      this.adapter_.setStyleForFixedAdjustElement('margin-top', this.calculations_.toolbarHeight + 'px');
    }
  };

  MDCToolbarFoundation.prototype.getFlexibleExpansionRatio_ = function getFlexibleExpansionRatio_(scrollTop) {
    // To prevent division by zero when there is no flexibleExpansionHeight
    var delta = 0.0001;
    return Math.max(0, 1 - scrollTop / (this.calculations_.flexibleExpansionHeight + delta));
  };

  MDCToolbarFoundation.prototype.checkRowHeight_ = function checkRowHeight_() {
    var _this2 = this;

    cancelAnimationFrame(this.checkRowHeightFrame_);
    this.checkRowHeightFrame_ = requestAnimationFrame(function () {
      return _this2.setKeyHeights_();
    });
  };

  MDCToolbarFoundation.prototype.setKeyHeights_ = function setKeyHeights_() {
    var newToolbarRowHeight = this.getRowHeight_();
    if (newToolbarRowHeight !== this.calculations_.toolbarRowHeight) {
      this.calculations_.toolbarRowHeight = newToolbarRowHeight;
      this.calculations_.toolbarHeight = this.calculations_.toolbarRatio * this.calculations_.toolbarRowHeight;
      this.calculations_.flexibleExpansionHeight = this.calculations_.flexibleExpansionRatio * this.calculations_.toolbarRowHeight;
      this.calculations_.maxTranslateYDistance = this.calculations_.maxTranslateYRatio * this.calculations_.toolbarRowHeight;
      this.calculations_.scrollThreshold = this.calculations_.scrollThresholdRatio * this.calculations_.toolbarRowHeight;
      this.updateAdjustElementStyles();
      this.updateToolbarStyles_();
    }
  };

  MDCToolbarFoundation.prototype.updateToolbarStyles_ = function updateToolbarStyles_() {
    var _this3 = this;

    cancelAnimationFrame(this.scrollFrame_);
    this.scrollFrame_ = requestAnimationFrame(function () {
      var scrollTop = _this3.adapter_.getViewportScrollY();
      var hasScrolledOutOfThreshold = _this3.scrolledOutOfThreshold_(scrollTop);

      if (hasScrolledOutOfThreshold && _this3.executedLastChange_) {
        return;
      }

      var flexibleExpansionRatio = _this3.getFlexibleExpansionRatio_(scrollTop);

      _this3.updateToolbarFlexibleState_(flexibleExpansionRatio);
      if (_this3.fixedLastrow_) {
        _this3.updateToolbarFixedState_(scrollTop);
      }
      if (_this3.hasFlexibleRow_) {
        _this3.updateFlexibleRowElementStyles_(flexibleExpansionRatio);
      }
      _this3.executedLastChange_ = hasScrolledOutOfThreshold;
      _this3.adapter_.notifyChange({ flexibleExpansionRatio: flexibleExpansionRatio });
    });
  };

  MDCToolbarFoundation.prototype.scrolledOutOfThreshold_ = function scrolledOutOfThreshold_(scrollTop) {
    return scrollTop > this.calculations_.scrollThreshold;
  };

  MDCToolbarFoundation.prototype.initKeyRatio_ = function initKeyRatio_() {
    var toolbarRowHeight = this.getRowHeight_();
    var firstRowMaxRatio = this.adapter_.getFirstRowElementOffsetHeight() / toolbarRowHeight;
    this.calculations_.toolbarRatio = this.adapter_.getOffsetHeight() / toolbarRowHeight;
    this.calculations_.flexibleExpansionRatio = firstRowMaxRatio - 1;
    this.calculations_.maxTranslateYRatio = this.fixedLastrow_ ? this.calculations_.toolbarRatio - firstRowMaxRatio : 0;
    this.calculations_.scrollThresholdRatio = (this.fixedLastrow_ ? this.calculations_.toolbarRatio : firstRowMaxRatio) - 1;
  };

  MDCToolbarFoundation.prototype.getRowHeight_ = function getRowHeight_() {
    var breakpoint = MDCToolbarFoundation.numbers.TOOLBAR_MOBILE_BREAKPOINT;
    return this.adapter_.getViewportWidth() < breakpoint ? MDCToolbarFoundation.numbers.TOOLBAR_ROW_MOBILE_HEIGHT : MDCToolbarFoundation.numbers.TOOLBAR_ROW_HEIGHT;
  };

  MDCToolbarFoundation.prototype.updateToolbarFlexibleState_ = function updateToolbarFlexibleState_(flexibleExpansionRatio) {
    this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);
    this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);
    if (flexibleExpansionRatio === 1) {
      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);
    } else if (flexibleExpansionRatio === 0) {
      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);
    }
  };

  MDCToolbarFoundation.prototype.updateToolbarFixedState_ = function updateToolbarFixedState_(scrollTop) {
    var translateDistance = Math.max(0, Math.min(scrollTop - this.calculations_.flexibleExpansionHeight, this.calculations_.maxTranslateYDistance));
    this.adapter_.setStyle('transform', 'translateY(' + -translateDistance + 'px)');

    if (translateDistance === this.calculations_.maxTranslateYDistance) {
      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);
    } else {
      this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);
    }
  };

  MDCToolbarFoundation.prototype.updateFlexibleRowElementStyles_ = function updateFlexibleRowElementStyles_(flexibleExpansionRatio) {
    if (this.fixed_) {
      var height = this.calculations_.flexibleExpansionHeight * flexibleExpansionRatio;
      this.adapter_.setStyleForFlexibleRowElement('height', height + this.calculations_.toolbarRowHeight + 'px');
    }
    if (this.useFlexDefaultBehavior_) {
      this.updateElementStylesDefaultBehavior_(flexibleExpansionRatio);
    }
  };

  MDCToolbarFoundation.prototype.updateElementStylesDefaultBehavior_ = function updateElementStylesDefaultBehavior_(flexibleExpansionRatio) {
    var maxTitleSize = MDCToolbarFoundation.numbers.MAX_TITLE_SIZE;
    var minTitleSize = MDCToolbarFoundation.numbers.MIN_TITLE_SIZE;
    var currentTitleSize = (maxTitleSize - minTitleSize) * flexibleExpansionRatio + minTitleSize;

    this.adapter_.setStyleForTitleElement('font-size', currentTitleSize + 'rem');
  };

  return MDCToolbarFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/toolbar/util.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var util_supportsPassive_ = void 0;

// Determine whether the current browser supports passive event listeners, and if so, use them.
function util_applyPassive() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (util_supportsPassive_ === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    util_supportsPassive_ = isSupported;
  }

  return util_supportsPassive_ ? { passive: true } : false;
}
// CONCATENATED MODULE: ../node_modules/@material/toolbar/index.js
var toolbar__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function toolbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function toolbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function toolbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









var toolbar_MDCToolbar = function (_MDCComponent) {
  toolbar__inherits(MDCToolbar, _MDCComponent);

  function MDCToolbar() {
    toolbar__classCallCheck(this, MDCToolbar);

    return toolbar__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCToolbar.attachTo = function attachTo(root) {
    return new MDCToolbar(root);
  };

  MDCToolbar.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCToolbarFoundation({
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      registerScrollHandler: function registerScrollHandler(handler) {
        return window.addEventListener('scroll', handler, util_applyPassive());
      },
      deregisterScrollHandler: function deregisterScrollHandler(handler) {
        return window.removeEventListener('scroll', handler, util_applyPassive());
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      getViewportWidth: function getViewportWidth() {
        return window.innerWidth;
      },
      getViewportScrollY: function getViewportScrollY() {
        return window.pageYOffset;
      },
      getOffsetHeight: function getOffsetHeight() {
        return _this2.root_.offsetHeight;
      },
      getFirstRowElementOffsetHeight: function getFirstRowElementOffsetHeight() {
        return _this2.firstRowElement_.offsetHeight;
      },
      notifyChange: function notifyChange(evtData) {
        return _this2.emit(foundation_MDCToolbarFoundation.strings.CHANGE_EVENT, evtData);
      },
      setStyle: function setStyle(property, value) {
        return _this2.root_.style.setProperty(property, value);
      },
      setStyleForTitleElement: function setStyleForTitleElement(property, value) {
        return _this2.titleElement_.style.setProperty(property, value);
      },
      setStyleForFlexibleRowElement: function setStyleForFlexibleRowElement(property, value) {
        return _this2.firstRowElement_.style.setProperty(property, value);
      },
      setStyleForFixedAdjustElement: function setStyleForFixedAdjustElement(property, value) {
        if (_this2.fixedAdjustElement) {
          _this2.fixedAdjustElement.style.setProperty(property, value);
        }
      }
    });
  };

  toolbar__createClass(MDCToolbar, [{
    key: 'firstRowElement_',
    get: function get() {
      return this.root_.querySelector(foundation_MDCToolbarFoundation.strings.FIRST_ROW_SELECTOR);
    }
  }, {
    key: 'titleElement_',
    get: function get() {
      return this.root_.querySelector(foundation_MDCToolbarFoundation.strings.TITLE_SELECTOR);
    }
  }, {
    key: 'fixedAdjustElement',
    set: function set(fixedAdjustElement) {
      this.fixedAdjustElement_ = fixedAdjustElement;
      this.foundation_.updateAdjustElementStyles();
    },
    get: function get() {
      return this.fixedAdjustElement_;
    }
  }]);

  return MDCToolbar;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Toolbar/index.js
function Toolbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Toolbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Toolbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toolbar__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};




/**
 * @prop fixed = false
 * @prop fixed-lastrow-only = false
 * @prop waterfall = false
 * @prop flexible = false
 * @prop flexible-default-behavior = false
 */

var Toolbar_Toolbar = function (_MaterialComponent) {
  Toolbar__inherits(Toolbar, _MaterialComponent);

  function Toolbar() {
    Toolbar__classCallCheck(this, Toolbar);

    var _this = Toolbar__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "toolbar";
    _this._mdcProps = ["fixed", "fixed-lastrow-only", "waterfall", "flexible", "flexible-default-behavior"];
    _this._onChange = _this._onChange.bind(_this);
    return _this;
  }

  Toolbar.prototype._onChange = function _onChange(e) {
    if (this.props.onChange) {
      this.props.onChange(e);
    }
  };

  Toolbar.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new toolbar_MDCToolbar(this.control);
    this.MDComponent.listen("MDCToolbar:change", this._onChange);
  };

  Toolbar.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCToolbar:change", this._onChange);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Toolbar.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("header", Toolbar__extends({
      ref: function ref(control) {
        _this2.control = control;
      }
    }, props), props.children);
  };

  return Toolbar;
}(MaterialComponent_MaterialComponent);

var ToolbarRow = function (_MaterialComponent2) {
  Toolbar__inherits(ToolbarRow, _MaterialComponent2);

  function ToolbarRow() {
    Toolbar__classCallCheck(this, ToolbarRow);

    var _this3 = Toolbar__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "toolbar__row";
    return _this3;
  }

  return ToolbarRow;
}(MaterialComponent_MaterialComponent);

/**
 * @prop align-end = false
 * @prop align-start = false
 * @prop shrink-to-fit = false
 */


var Toolbar_ToolbarSection = function (_MaterialComponent3) {
  Toolbar__inherits(ToolbarSection, _MaterialComponent3);

  function ToolbarSection() {
    Toolbar__classCallCheck(this, ToolbarSection);

    var _this4 = Toolbar__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this4.componentName = "toolbar__section";
    _this4._mdcProps = ["align-start", "align-end", "shrink-to-fit"];
    return _this4;
  }

  ToolbarSection.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("section", props, props.children);
  };

  return ToolbarSection;
}(MaterialComponent_MaterialComponent);

/**
 * @prop menu = false
 */


var Toolbar_ToolbarIcon = function (_MaterialComponent4) {
  Toolbar__inherits(ToolbarIcon, _MaterialComponent4);

  function ToolbarIcon(props) {
    Toolbar__classCallCheck(this, ToolbarIcon);

    var _this5 = Toolbar__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this5.componentName = "toolbar__icon";
    if (props.menu) {
      _this5.componentName = "toolbar__menu-icon";
    }
    return _this5;
  }

  ToolbarIcon.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("a", Toolbar__extends({ className: "material-icons" }, props), props.children || "menu");
  };

  return ToolbarIcon;
}(MaterialComponent_MaterialComponent);

/**
 * @prop title = ''
 */


var Toolbar_ToolbarTitle = function (_MaterialComponent5) {
  Toolbar__inherits(ToolbarTitle, _MaterialComponent5);

  function ToolbarTitle() {
    Toolbar__classCallCheck(this, ToolbarTitle);

    var _this6 = Toolbar__possibleConstructorReturn(this, _MaterialComponent5.call(this));

    _this6.componentName = "toolbar__title";
    return _this6;
  }

  ToolbarTitle.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("span", props, props.children);
  };

  return ToolbarTitle;
}(MaterialComponent_MaterialComponent);

Toolbar_Toolbar.Section = Toolbar_ToolbarSection;
Toolbar_Toolbar.Icon = Toolbar_ToolbarIcon;
Toolbar_Toolbar.Title = Toolbar_ToolbarTitle;
Toolbar_Toolbar.Row = ToolbarRow;

/* harmony default export */ var preact_material_components_Toolbar = (Toolbar_Toolbar);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Icon/index.js
function Icon__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Icon__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Icon__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Icon__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};




/**
 * @prop disabled = false
 */

var Icon_Icon = function (_MaterialComponent) {
  Icon__inherits(Icon, _MaterialComponent);

  function Icon() {
    Icon__classCallCheck(this, Icon);

    var _this = Icon__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "icon";
    return _this;
  }

  Icon.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("i", Icon__extends({}, props, { className: "material-icons" }), props.children);
  };

  return Icon;
}(MaterialComponent_MaterialComponent);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Button/index.js
function Button__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Button__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Button__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Button__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





/**
 *  @prop dense = false
 *  @prop raised = false
 *  @prop compact = false
 *  @prop disabled = false
 *  @prop unelevated = false
 *  @prop stroked = false
 */

var Button_Button = function (_MaterialComponent) {
  Button__inherits(Button, _MaterialComponent);

  function Button() {
    Button__classCallCheck(this, Button);

    var _this = Button__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "button";
    _this._mdcProps = ["dense", "raised", "compact", "unelevated", "stroked"];
    return _this;
  }

  Button.prototype.componentDidMount = function componentDidMount() {
    _MaterialComponent.prototype.attachRipple.call(this);
  };

  Button.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    var ButtonElement = props.href ? "a" : "button";

    return Object(preact_min["h"])(ButtonElement, Button__extends({
      ref: function ref(control) {
        _this2.control = control;
      }
    }, props), this.props.children);
  };

  return Button;
}(MaterialComponent_MaterialComponent);

var ButtonIcon = function (_Icon) {
  Button__inherits(ButtonIcon, _Icon);

  function ButtonIcon() {
    Button__classCallCheck(this, ButtonIcon);

    var _this3 = Button__possibleConstructorReturn(this, _Icon.call(this));

    _this3.componentName = "button__icon";
    return _this3;
  }

  return ButtonIcon;
}(Icon_Icon);

Button_Button.Icon = ButtonIcon;
/* harmony default export */ var preact_material_components_Button = (Button_Button);
// CONCATENATED MODULE: ./components/component-table/index.js


function component_table__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function component_table__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function component_table__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Class

var component_table__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Components and their props"
);

var _ref2 = Object(preact_min["h"])(
  "li",
  null,
  Object(preact_min["h"])(
    "div",
    { className: "mdc-typography--caption" },
    "no specific props"
  )
);

var component_table_ComponentTable = function (_Component) {
  component_table__inherits(ComponentTable, _Component);

  function ComponentTable() {
    component_table__classCallCheck(this, ComponentTable);

    return component_table__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  ComponentTable.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      component_table__ref,
      Object(preact_min["h"])(
        "ul",
        null,
        this.props.data.map(function (component) {
          return Object(preact_min["h"])(
            "li",
            null,
            Object(preact_min["h"])(
              "div",
              { className: "mdc-typography--headline" },
              component.component
            ),
            Object(preact_min["h"])(
              "ul",
              null,
              component.props && component.props.map(function (prop) {
                return Object(preact_min["h"])(
                  "li",
                  null,
                  Object(preact_min["h"])(
                    "div",
                    null,
                    Object(preact_min["h"])(
                      "div",
                      null,
                      Object(preact_min["h"])(
                        "span",
                        { className: "mdc-typography--title" },
                        prop.name,
                        " "
                      ),
                      Object(preact_min["h"])(
                        "span",
                        { className: "mdc-typography--body2" },
                        prop.value || "true/false"
                      )
                    ),
                    Object(preact_min["h"])(
                      "div",
                      { className: "mdc-typography--caption" },
                      prop.description
                    )
                  )
                );
              }),
              component.props.length === 0 && _ref2
            )
          );
        })
      )
    );
  };

  return ComponentTable;
}(preact_min["Component"]);


// EXTERNAL MODULE: ../node_modules/classnames/index.js
var classnames = __webpack_require__("9qb7");
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// EXTERNAL MODULE: ../node_modules/highlight.js/lib/highlight.js
var highlight = __webpack_require__("R7gn");
var highlight_default = /*#__PURE__*/__webpack_require__.n(highlight);

// EXTERNAL MODULE: ../node_modules/highlight.js/lib/languages/javascript.js
var javascript = __webpack_require__("Yr+x");
var javascript_default = /*#__PURE__*/__webpack_require__.n(javascript);

// EXTERNAL MODULE: ../node_modules/highlight.js/lib/languages/htmlbars.js
var htmlbars = __webpack_require__("ApXe");
var htmlbars_default = /*#__PURE__*/__webpack_require__.n(htmlbars);

// EXTERNAL MODULE: ../node_modules/highlight.js/lib/languages/json.js
var json = __webpack_require__("VSmG");
var json_default = /*#__PURE__*/__webpack_require__.n(json);

// EXTERNAL MODULE: ../node_modules/highlight.js/lib/languages/xml.js
var xml = __webpack_require__("ElH3");
var xml_default = /*#__PURE__*/__webpack_require__.n(xml);

// EXTERNAL MODULE: ../node_modules/highlight.js/styles/github.css
var github = __webpack_require__("UfTO");
var github_default = /*#__PURE__*/__webpack_require__.n(github);

// CONCATENATED MODULE: ./components/code-block/index.js


function code_block__objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Dependencies









var LANGUAGES = { javascript: javascript_default.a, json: json_default.a, xml: xml_default.a, htmlbars: htmlbars_default.a };
Object.keys(LANGUAGES).forEach(function (key) {
  return highlight_default.a.registerLanguage(key, LANGUAGES[key]);
});

// Class
/* harmony default export */ var code_block = (function (_ref) {
  var children = _ref.children,
      props = code_block__objectWithoutProperties(_ref, ["children"]);

  var child = children && children[0],
      isHighlight = child && child.nodeName === "code";
  if (isHighlight) {
    var text = child.children[0].replace(/(^\s+|\s+$)/g, ""),
        lang = (child.attributes.class && child.attributes.class).match(/lang-([a-z]+)/)[1],
        highlighted = highlight_default.a.highlightAuto(text, lang ? [lang] : null),
        hLang = highlighted.language;
    return Object(preact_min["h"])(
      "pre",
      { "class": classnames_default()("highlight", "highlight-" + hLang, props.class) },
      Object(preact_min["h"])("code", {
        "class": "hljs lang-" + hLang,
        dangerouslySetInnerHTML: { __html: highlighted.value }
      })
    );
  }
  return Object(preact_min["h"])(
    "pre",
    props,
    children
  );
});
// EXTERNAL MODULE: ./routes/button/style.scss
var style = __webpack_require__("rnIz");
var style_default = /*#__PURE__*/__webpack_require__.n(style);

// EXTERNAL MODULE: ./routes/button/sample.txt
var sample = __webpack_require__("+ieI");
var sample_default = /*#__PURE__*/__webpack_require__.n(sample);

// CONCATENATED MODULE: ./routes/button/index.js


function button__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function button__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function button__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Samples


// Class

var button__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var button__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    sample_default.a
  )
);

var button__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var button__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-button"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-button" },
    " ",
    "here"
  ),
  "."
);

var _ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var _ref6 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    null,
    "Default Flat button without ripple"
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      "<Button>Default Flat button without ripple</Button>"
    )
  )
);

var _ref7 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    { raised: true },
    "Default Raised button"
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      "<Button raised>Default Raised button</Button>"
    )
  )
);

var _ref8 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    { unelevated: true },
    "Default Unelevated button"
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      "<Button unelevated>Default Unelevated button</Button>"
    )
  )
);

var _ref9 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    { stroked: true },
    "Default Stroked button"
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      "<Button stroked>Default Stroked button</Button>"
    )
  )
);

var _ref10 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    { raised: true, disabled: true },
    "Disabled Raised button"
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      "<Button raised disabled>Disabled Raised button</Button>"
    )
  )
);

var _ref11 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    { raised: true, ripple: true },
    "Raised button with ripple"
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      "<Button raised ripple>Raised button with ripple</Button>"
    )
  )
);

var _ref12 = Object(preact_min["h"])(
  preact_material_components_Button,
  { raised: true, className: "mdc-theme--primary-bg" },
  "Primary Raised button",
  " "
);

var _ref13 = Object(preact_min["h"])(
  preact_material_components_Button,
  { raised: true, className: "mdc-theme--secondary-bg" },
  "Secondary Raised button",
  " "
);

var _ref14 = Object(preact_min["h"])(
  preact_material_components_Button,
  { raised: true, dense: true },
  "Dense Raised button",
  " "
);

var _ref15 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    preact_material_components_Button,
    { raised: true, compact: true },
    "Compact Raised button",
    " "
  ),
  Object(preact_min["h"])(
    code_block,
    null,
    Object(preact_min["h"])(
      "code",
      { "class": "lang-html" },
      '<Button raised compact>Compact Raised button{" "}</Button>'
    )
  )
);

var _ref16 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Note"
);

var _ref17 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--caption" },
  Object(preact_min["h"])(
    "div",
    null,
    "Adding an ",
    Object(preact_min["h"])(
      "code",
      null,
      "href"
    ),
    " to the ",
    Object(preact_min["h"])(
      "code",
      null,
      "Button"
    ),
    " automatically makes in an ",
    Object(preact_min["h"])(
      "code",
      null,
      "<a>"
    ),
    "."
  )
);

var button_ButtonPage = function (_Component) {
  button__inherits(ButtonPage, _Component);

  function ButtonPage() {
    button__classCallCheck(this, ButtonPage);

    var _this = button__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Button",
      props: [{
        name: "ripple",
        description: "Adds riple effect to the button"
      }, {
        name: "dense",
        description: "Adds dense padding to the button"
      }, {
        name: "compact",
        description: "Adds compact padding to the button"
      }, {
        name: "raised",
        description: "Adds raised effect to the button"
      }, {
        name: "disabled",
        description: "Disables the button"
      }, {
        name: "unelevated",
        description: "Adds unelevated effect to the button"
      }, {
        name: "stroked",
        description: "Adds stroked effect to the button"
      }]
    }];
    return _this;
  }

  ButtonPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-buttons" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      button__ref,
      button__ref2,
      button__ref3,
      button__ref4,
      _ref5,
      _ref6,
      _ref7,
      _ref8,
      _ref9,
      _ref10,
      _ref11,
      Object(preact_min["h"])(
        "div",
        null,
        _ref12,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "\n\t\t\t\t\t\t\t\t\t<Button raised className=\"mdc-theme--primary-bg\">Primary Raised button{\" \"}</Button>\n\t\t\t\t\t\t\t\t"
          )
        )
      ),
      Object(preact_min["h"])(
        "div",
        null,
        _ref13,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "\n\t\t\t\t\t\t\t\t<Button raised className=\"mdc-theme--secondary-bg\">Secondary Raised button{\" \"}</Button>\n\t\t\t\t\t\t\t"
          )
        )
      ),
      Object(preact_min["h"])(
        "div",
        null,
        _ref14,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "<Button raised dense>Dense Raised button{\" \"}</Button>"
          )
        )
      ),
      _ref15,
      _ref16,
      _ref17
    );
  };

  return ButtonPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Card/index.js
function Card__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Card__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Card__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Card__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





var Card = function (_MaterialComponent) {
  Card__inherits(Card, _MaterialComponent);

  function Card() {
    Card__classCallCheck(this, Card);

    var _this = Card__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "card";
    _this._mdcProps = ["theme-dark"];
    return _this;
  }

  return Card;
}(MaterialComponent_MaterialComponent);

var Card_CardSection = function (_MaterialComponent2) {
  Card__inherits(CardSection, _MaterialComponent2);

  function CardSection() {
    Card__classCallCheck(this, CardSection);

    var _this2 = Card__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this2.componentName = "";
    return _this2;
  }

  CardSection.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("section", props, props.children);
  };

  return CardSection;
}(MaterialComponent_MaterialComponent);

var CardPrimary = function (_CardSection) {
  Card__inherits(CardPrimary, _CardSection);

  function CardPrimary() {
    Card__classCallCheck(this, CardPrimary);

    var _this3 = Card__possibleConstructorReturn(this, _CardSection.call(this));

    _this3.componentName = "card__primary";
    return _this3;
  }

  return CardPrimary;
}(Card_CardSection);

var CardSupportingText = function (_CardSection2) {
  Card__inherits(CardSupportingText, _CardSection2);

  function CardSupportingText() {
    Card__classCallCheck(this, CardSupportingText);

    var _this4 = Card__possibleConstructorReturn(this, _CardSection2.call(this));

    _this4.componentName = "card__supporting-text";
    return _this4;
  }

  return CardSupportingText;
}(Card_CardSection);

var CardActions = function (_CardSection3) {
  Card__inherits(CardActions, _CardSection3);

  function CardActions() {
    Card__classCallCheck(this, CardActions);

    var _this5 = Card__possibleConstructorReturn(this, _CardSection3.call(this));

    _this5.componentName = "card__actions";
    _this5._mdcProps = ["vertical"];
    return _this5;
  }

  return CardActions;
}(Card_CardSection);

var CardMedia = function (_CardSection4) {
  Card__inherits(CardMedia, _CardSection4);

  function CardMedia() {
    Card__classCallCheck(this, CardMedia);

    var _this6 = Card__possibleConstructorReturn(this, _CardSection4.call(this));

    _this6.componentName = "card__media";
    return _this6;
  }

  return CardMedia;
}(Card_CardSection);

var Card_CardAction = function (_Button) {
  Card__inherits(CardAction, _Button);

  function CardAction() {
    Card__classCallCheck(this, CardAction);

    var _this7 = Card__possibleConstructorReturn(this, _Button.call(this));

    _this7.componentName = "card__action";
    return _this7;
  }

  CardAction.prototype.materialDom = function materialDom(props) {
    var _this8 = this;

    return Object(preact_min["h"])("button", Card__extends({
      className: "mdc-button mdc-button--compact"
    }, props, {
      ref: function ref(control) {
        _this8.control = control;
      }
    }), props.children);
  };

  return CardAction;
}(preact_material_components_Button);

var Card_CardTitle = function (_MaterialComponent3) {
  Card__inherits(CardTitle, _MaterialComponent3);

  function CardTitle() {
    Card__classCallCheck(this, CardTitle);

    var _this9 = Card__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this9.componentName = "card__title";
    _this9._mdcProps = ["large"];
    return _this9;
  }

  CardTitle.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("h1", props, props.children);
  };

  return CardTitle;
}(MaterialComponent_MaterialComponent);

var Card_CardSubtitle = function (_MaterialComponent4) {
  Card__inherits(CardSubtitle, _MaterialComponent4);

  function CardSubtitle() {
    Card__classCallCheck(this, CardSubtitle);

    var _this10 = Card__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this10.componentName = "card__subtitle";
    return _this10;
  }

  CardSubtitle.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("h2", props, props.children);
  };

  return CardSubtitle;
}(MaterialComponent_MaterialComponent);

var CardHorizontalBlock = function (_CardSection5) {
  Card__inherits(CardHorizontalBlock, _CardSection5);

  function CardHorizontalBlock() {
    Card__classCallCheck(this, CardHorizontalBlock);

    var _this11 = Card__possibleConstructorReturn(this, _CardSection5.call(this));

    _this11.componentName = "card__horizontal-block";
    return _this11;
  }

  return CardHorizontalBlock;
}(Card_CardSection);

var Card_CardMediaItem = function (_MaterialComponent5) {
  Card__inherits(CardMediaItem, _MaterialComponent5);

  function CardMediaItem() {
    Card__classCallCheck(this, CardMediaItem);

    var _this12 = Card__possibleConstructorReturn(this, _MaterialComponent5.call(this));

    _this12.componentName = "card__media-item";
    _this12._mdcProps = [];
    return _this12;
  }

  CardMediaItem.prototype.materialDom = function materialDom(props) {
    var className = "";
    if (props.x) {
      className = "mdc-card__media-item--" + props.x + "x";
    }
    return Object(preact_min["h"])("img", Card__extends({ className: className }, props));
  };

  return CardMediaItem;
}(MaterialComponent_MaterialComponent);

Card.Primary = CardPrimary;
Card.SupportingText = CardSupportingText;
Card.Actions = CardActions;
Card.Action = Card_CardAction;
Card.Media = CardMedia;
Card.Title = Card_CardTitle;
Card.Subtitle = Card_CardSubtitle;
Card.HorizontalBlock = CardHorizontalBlock;
Card.MediaItem = Card_CardMediaItem;

/* harmony default export */ var preact_material_components_Card = (Card);
// EXTERNAL MODULE: ./routes/card/style.scss
var card_style = __webpack_require__("ewDS");
var card_style_default = /*#__PURE__*/__webpack_require__.n(card_style);

// EXTERNAL MODULE: ./routes/card/sample.txt
var card_sample = __webpack_require__("tJYt");
var card_sample_default = /*#__PURE__*/__webpack_require__.n(card_sample);

// CONCATENATED MODULE: ./routes/card/index.js


function card__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function card__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function card__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Style


// Samples


// Class

var card__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code"
);

var card__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    card_sample_default.a
  )
);

var card__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var card__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-card"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-card" },
    " ",
    "here"
  ),
  "."
);

var card__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo"
);

var card__ref6 = Object(preact_min["h"])(
  preact_material_components_Card,
  null,
  Object(preact_min["h"])(
    preact_material_components_Card.Primary,
    null,
    Object(preact_min["h"])(
      preact_material_components_Card.Title,
      null,
      "Hi"
    ),
    Object(preact_min["h"])(
      preact_material_components_Card.Subtitle,
      null,
      "Let me subtitle"
    )
  ),
  Object(preact_min["h"])(preact_material_components_Card.Media, { className: "card-media" }),
  Object(preact_min["h"])(
    preact_material_components_Card.Actions,
    null,
    Object(preact_min["h"])(
      preact_material_components_Card.Action,
      null,
      "OKAY"
    )
  )
);

var card__ref7 = Object(preact_min["h"])(
  preact_material_components_Card,
  null,
  Object(preact_min["h"])(
    preact_material_components_Card.Primary,
    null,
    Object(preact_min["h"])(
      preact_material_components_Card.Title,
      null,
      "Hi"
    ),
    Object(preact_min["h"])(
      preact_material_components_Card.Subtitle,
      null,
      "Let me subtitle"
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_Card.SupportingText,
    null,
    "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt."
  ),
  Object(preact_min["h"])(
    preact_material_components_Card.Actions,
    null,
    Object(preact_min["h"])(
      preact_material_components_Card.Action,
      null,
      "OKAY"
    )
  )
);

var card__ref8 = Object(preact_min["h"])(
  preact_material_components_Card,
  null,
  Object(preact_min["h"])(
    preact_material_components_Card.HorizontalBlock,
    null,
    Object(preact_min["h"])(
      preact_material_components_Card.Primary,
      null,
      Object(preact_min["h"])(
        preact_material_components_Card.Title,
        { large: true },
        "Hi"
      ),
      Object(preact_min["h"])(
        preact_material_components_Card.Subtitle,
        null,
        "Let me subtitle"
      )
    ),
    Object(preact_min["h"])(preact_material_components_Card.MediaItem, { src: "favicon.png", x: "1dot5" })
  ),
  Object(preact_min["h"])(
    preact_material_components_Card.Actions,
    null,
    Object(preact_min["h"])(
      preact_material_components_Card.Action,
      null,
      "OKAY"
    )
  )
);

var card_CardPage = function (_Component) {
  card__inherits(CardPage, _Component);

  function CardPage() {
    card__classCallCheck(this, CardPage);

    var _this = card__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Card",
      props: []
    }, {
      component: "Card.Primary",
      props: []
    }, {
      component: "Card.SupportingText",
      props: []
    }, {
      component: "Card.Actions",
      props: [{
        name: "vertical",
        description: "This arranges the actions vertically"
      }]
    }, {
      component: "Card.Action",
      props: []
    }, {
      component: "Card.Media",
      props: []
    }, {
      component: "Card.MediaItem",
      props: [{
        name: "x",
        value: "1dot5, 2, 3",
        description: "Changes the size of the image"
      }]
    }, {
      component: "Card.Title",
      props: [{
        name: "large",
        description: "This enlarges the title size"
      }]
    }, {
      component: "Card.Subtitle",
      props: []
    }, {
      component: "Card.HorizontalBlock",
      props: []
    }];
    return _this;
  }

  CardPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-card" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      card__ref,
      card__ref2,
      card__ref3,
      card__ref4,
      card__ref5,
      card__ref6,
      card__ref7,
      card__ref8
    );
  };

  return CardPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/animation/index.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   noPrefix: string,
 *   webkitPrefix: string
 * }}
 */
var VendorPropertyMapType = void 0;

/** @const {Object<string, !VendorPropertyMapType>} */
var eventTypeMap = {
  'animationstart': {
    noPrefix: 'animationstart',
    webkitPrefix: 'webkitAnimationStart',
    styleProperty: 'animation'
  },
  'animationend': {
    noPrefix: 'animationend',
    webkitPrefix: 'webkitAnimationEnd',
    styleProperty: 'animation'
  },
  'animationiteration': {
    noPrefix: 'animationiteration',
    webkitPrefix: 'webkitAnimationIteration',
    styleProperty: 'animation'
  },
  'transitionend': {
    noPrefix: 'transitionend',
    webkitPrefix: 'webkitTransitionEnd',
    styleProperty: 'transition'
  }
};

/** @const {Object<string, !VendorPropertyMapType>} */
var cssPropertyMap = {
  'animation': {
    noPrefix: 'animation',
    webkitPrefix: '-webkit-animation'
  },
  'transform': {
    noPrefix: 'transform',
    webkitPrefix: '-webkit-transform'
  },
  'transition': {
    noPrefix: 'transition',
    webkitPrefix: '-webkit-transition'
  }
};

/**
 * @param {!Object} windowObj
 * @return {boolean}
 */
function hasProperShape(windowObj) {
  return windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function';
}

/**
 * @param {string} eventType
 * @return {boolean}
 */
function eventFoundInMaps(eventType) {
  return eventType in eventTypeMap || eventType in cssPropertyMap;
}

/**
 * @param {string} eventType
 * @param {!Object<string, !VendorPropertyMapType>} map
 * @param {!Element} el
 * @return {string}
 */
function getJavaScriptEventName(eventType, map, el) {
  return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
}

/**
 * Helper function to determine browser prefix for CSS3 animation events
 * and property names.
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getAnimationName(windowObj, eventType) {
  if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {
    return eventType;
  }

  var map = /** @type {!Object<string, !VendorPropertyMapType>} */eventType in eventTypeMap ? eventTypeMap : cssPropertyMap;
  var el = windowObj['document']['createElement']('div');
  var eventName = '';

  if (map === eventTypeMap) {
    eventName = getJavaScriptEventName(eventType, map, el);
  } else {
    eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
  }

  return eventName;
}

// Public functions to access getAnimationName() for JavaScript events or CSS
// property names.

var transformStyleProperties = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'MSTransform'];

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectEventName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectPropertyName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}


// CONCATENATED MODULE: ../node_modules/@material/selection-control/index.js
var selection_control__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function selection_control__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */

/* eslint-enable no-unused-vars */

/**
 * @typedef {!{
 *   checked: boolean,
 *   indeterminate: boolean,
 *   disabled: boolean,
 *   value: ?string
 * }}
 */
var MDCSelectionControlState = void 0;

/**
 * @record
 */

var MDCSelectionControl = function () {
  function MDCSelectionControl() {
    selection_control__classCallCheck(this, MDCSelectionControl);
  }

  selection_control__createClass(MDCSelectionControl, [{
    key: 'ripple',

    /** @return {?MDCRipple} */
    get: function get() {}
  }]);

  return MDCSelectionControl;
}();


// CONCATENATED MODULE: ../node_modules/@material/checkbox/adapter.js
function checkbox_adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */


/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Checkbox. Provides an interface for managing
 * - classes
 * - dom
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */

var MDCCheckboxAdapter = function () {
  function MDCCheckboxAdapter() {
    checkbox_adapter__classCallCheck(this, MDCCheckboxAdapter);
  }

  /** @param {string} className */
  MDCCheckboxAdapter.prototype.addClass = function addClass(className) {};

  /** @param {string} className */


  MDCCheckboxAdapter.prototype.removeClass = function removeClass(className) {};

  /** @param {!EventListener} handler */


  MDCCheckboxAdapter.prototype.registerAnimationEndHandler = function registerAnimationEndHandler(handler) {};

  /** @param {!EventListener} handler */


  MDCCheckboxAdapter.prototype.deregisterAnimationEndHandler = function deregisterAnimationEndHandler(handler) {};

  /** @param {!EventListener} handler */


  MDCCheckboxAdapter.prototype.registerChangeHandler = function registerChangeHandler(handler) {};

  /** @param {!EventListener} handler */


  MDCCheckboxAdapter.prototype.deregisterChangeHandler = function deregisterChangeHandler(handler) {};

  /** @return {!MDCSelectionControlState} */


  MDCCheckboxAdapter.prototype.getNativeControl = function getNativeControl() {};

  MDCCheckboxAdapter.prototype.forceLayout = function forceLayout() {};

  /** @return {boolean} */


  MDCCheckboxAdapter.prototype.isAttachedToDOM = function isAttachedToDOM() {};

  return MDCCheckboxAdapter;
}();

/* harmony default export */ var checkbox_adapter = (MDCCheckboxAdapter);
// CONCATENATED MODULE: ../node_modules/@material/checkbox/constants.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @const {string} */
var ROOT = 'mdc-checkbox';

/** @enum {string} */
var checkbox_constants_cssClasses = {
  UPGRADED: 'mdc-checkbox--upgraded',
  CHECKED: 'mdc-checkbox--checked',
  INDETERMINATE: 'mdc-checkbox--indeterminate',
  DISABLED: 'mdc-checkbox--disabled',
  ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
  ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
  ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
  ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
  ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
  ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked'
};

/** @enum {string} */
var checkbox_constants_strings = {
  NATIVE_CONTROL_SELECTOR: '.' + ROOT + '__native-control',
  TRANSITION_STATE_INIT: 'init',
  TRANSITION_STATE_CHECKED: 'checked',
  TRANSITION_STATE_UNCHECKED: 'unchecked',
  TRANSITION_STATE_INDETERMINATE: 'indeterminate'
};

/** @enum {number} */
var checkbox_constants_numbers = {
  ANIM_END_LATCH_MS: 100
};


// CONCATENATED MODULE: ../node_modules/@material/checkbox/foundation.js
var checkbox_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var checkbox_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function checkbox_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function checkbox_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function checkbox_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* eslint-disable no-unused-vars */


/* eslint-enable no-unused-vars */


/** @const {!Array<string>} */
var CB_PROTO_PROPS = ['checked', 'indeterminate'];

/**
 * @extends {MDCFoundation<!MDCCheckboxAdapter>}
 */

var foundation_MDCCheckboxFoundation = function (_MDCFoundation) {
  checkbox_foundation__inherits(MDCCheckboxFoundation, _MDCFoundation);

  checkbox_foundation__createClass(MDCCheckboxFoundation, null, [{
    key: 'cssClasses',

    /** @return enum {cssClasses} */
    get: function get() {
      return checkbox_constants_cssClasses;
    }

    /** @return enum {strings} */

  }, {
    key: 'strings',
    get: function get() {
      return checkbox_constants_strings;
    }

    /** @return enum {numbers} */

  }, {
    key: 'numbers',
    get: function get() {
      return checkbox_constants_numbers;
    }

    /** @return {!MDCCheckboxAdapter} */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCCheckboxAdapter} */{
          addClass: function addClass() /* className: string */{},
          removeClass: function removeClass() /* className: string */{},
          registerAnimationEndHandler: function registerAnimationEndHandler() /* handler: EventListener */{},
          deregisterAnimationEndHandler: function deregisterAnimationEndHandler() /* handler: EventListener */{},
          registerChangeHandler: function registerChangeHandler() /* handler: EventListener */{},
          deregisterChangeHandler: function deregisterChangeHandler() /* handler: EventListener */{},
          getNativeControl: function getNativeControl() /* !MDCSelectionControlState */{},
          forceLayout: function forceLayout() {},
          isAttachedToDOM: function isAttachedToDOM() /* boolean */{}
        }
      );
    }
  }]);

  function MDCCheckboxFoundation(adapter) {
    checkbox_foundation__classCallCheck(this, MDCCheckboxFoundation);

    /** @private {string} */
    var _this = checkbox_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, checkbox_foundation__extends(MDCCheckboxFoundation.defaultAdapter, adapter)));

    _this.currentCheckState_ = checkbox_constants_strings.TRANSITION_STATE_INIT;

    /** @private {string} */
    _this.currentAnimationClass_ = '';

    /** @private {number} */
    _this.animEndLatchTimer_ = 0;

    _this.animEndHandler_ = /** @private {!EventListener} */function () {
      clearTimeout(_this.animEndLatchTimer_);
      _this.animEndLatchTimer_ = setTimeout(function () {
        _this.adapter_.removeClass(_this.currentAnimationClass_);
        _this.adapter_.deregisterAnimationEndHandler(_this.animEndHandler_);
      }, checkbox_constants_numbers.ANIM_END_LATCH_MS);
    };

    _this.changeHandler_ = /** @private {!EventListener} */function () {
      return _this.transitionCheckState_();
    };
    return _this;
  }

  MDCCheckboxFoundation.prototype.init = function init() {
    this.currentCheckState_ = this.determineCheckState_(this.getNativeControl_());
    this.adapter_.addClass(checkbox_constants_cssClasses.UPGRADED);
    this.adapter_.registerChangeHandler(this.changeHandler_);
    this.installPropertyChangeHooks_();
  };

  MDCCheckboxFoundation.prototype.destroy = function destroy() {
    this.adapter_.deregisterChangeHandler(this.changeHandler_);
    this.uninstallPropertyChangeHooks_();
  };

  /** @return {boolean} */


  MDCCheckboxFoundation.prototype.isChecked = function isChecked() {
    return this.getNativeControl_().checked;
  };

  /** @param {boolean} checked */


  MDCCheckboxFoundation.prototype.setChecked = function setChecked(checked) {
    this.getNativeControl_().checked = checked;
  };

  /** @return {boolean} */


  MDCCheckboxFoundation.prototype.isIndeterminate = function isIndeterminate() {
    return this.getNativeControl_().indeterminate;
  };

  /** @param {boolean} indeterminate */


  MDCCheckboxFoundation.prototype.setIndeterminate = function setIndeterminate(indeterminate) {
    this.getNativeControl_().indeterminate = indeterminate;
  };

  /** @return {boolean} */


  MDCCheckboxFoundation.prototype.isDisabled = function isDisabled() {
    return this.getNativeControl_().disabled;
  };

  /** @param {boolean} disabled */


  MDCCheckboxFoundation.prototype.setDisabled = function setDisabled(disabled) {
    this.getNativeControl_().disabled = disabled;
    if (disabled) {
      this.adapter_.addClass(checkbox_constants_cssClasses.DISABLED);
    } else {
      this.adapter_.removeClass(checkbox_constants_cssClasses.DISABLED);
    }
  };

  /** @return {?string} */


  MDCCheckboxFoundation.prototype.getValue = function getValue() {
    return this.getNativeControl_().value;
  };

  /** @param {?string} value */


  MDCCheckboxFoundation.prototype.setValue = function setValue(value) {
    this.getNativeControl_().value = value;
  };

  /** @private */


  MDCCheckboxFoundation.prototype.installPropertyChangeHooks_ = function installPropertyChangeHooks_() {
    var _this2 = this;

    var nativeCb = this.getNativeControl_();
    var cbProto = Object.getPrototypeOf(nativeCb);

    CB_PROTO_PROPS.forEach(function (controlState) {
      var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
      // We have to check for this descriptor, since some browsers (Safari) don't support its return.
      // See: https://bugs.webkit.org/show_bug.cgi?id=49739
      if (validDescriptor(desc)) {
        var nativeCbDesc = /** @type {!ObjectPropertyDescriptor} */{
          get: desc.get,
          set: function set(state) {
            desc.set.call(nativeCb, state);
            _this2.transitionCheckState_();
          },
          configurable: desc.configurable,
          enumerable: desc.enumerable
        };
        Object.defineProperty(nativeCb, controlState, nativeCbDesc);
      }
    });
  };

  /** @private */


  MDCCheckboxFoundation.prototype.uninstallPropertyChangeHooks_ = function uninstallPropertyChangeHooks_() {
    var nativeCb = this.getNativeControl_();
    var cbProto = Object.getPrototypeOf(nativeCb);

    CB_PROTO_PROPS.forEach(function (controlState) {
      var desc = /** @type {!ObjectPropertyDescriptor} */Object.getOwnPropertyDescriptor(cbProto, controlState);
      if (validDescriptor(desc)) {
        Object.defineProperty(nativeCb, controlState, desc);
      }
    });
  };

  /** @private */


  MDCCheckboxFoundation.prototype.transitionCheckState_ = function transitionCheckState_() {
    var nativeCb = this.adapter_.getNativeControl();
    if (!nativeCb) {
      return;
    }
    var oldState = this.currentCheckState_;
    var newState = this.determineCheckState_(nativeCb);
    if (oldState === newState) {
      return;
    }

    // Check to ensure that there isn't a previously existing animation class, in case for example
    // the user interacted with the checkbox before the animation was finished.
    if (this.currentAnimationClass_.length > 0) {
      clearTimeout(this.animEndLatchTimer_);
      this.adapter_.forceLayout();
      this.adapter_.removeClass(this.currentAnimationClass_);
    }

    this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);
    this.currentCheckState_ = newState;

    // Check for parentNode so that animations are only run when the element is attached
    // to the DOM.
    if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {
      this.adapter_.addClass(this.currentAnimationClass_);
      this.adapter_.registerAnimationEndHandler(this.animEndHandler_);
    }
  };

  /**
   * @param {!MDCSelectionControlState} nativeCb
   * @return {string}
   * @private
   */


  MDCCheckboxFoundation.prototype.determineCheckState_ = function determineCheckState_(nativeCb) {
    var TRANSITION_STATE_INDETERMINATE = checkbox_constants_strings.TRANSITION_STATE_INDETERMINATE,
        TRANSITION_STATE_CHECKED = checkbox_constants_strings.TRANSITION_STATE_CHECKED,
        TRANSITION_STATE_UNCHECKED = checkbox_constants_strings.TRANSITION_STATE_UNCHECKED;


    if (nativeCb.indeterminate) {
      return TRANSITION_STATE_INDETERMINATE;
    }
    return nativeCb.checked ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
  };

  /**
   * @param {string} oldState
   * @param {string} newState
   * @return {string}
   */


  MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function getTransitionAnimationClass_(oldState, newState) {
    var TRANSITION_STATE_INIT = checkbox_constants_strings.TRANSITION_STATE_INIT,
        TRANSITION_STATE_CHECKED = checkbox_constants_strings.TRANSITION_STATE_CHECKED,
        TRANSITION_STATE_UNCHECKED = checkbox_constants_strings.TRANSITION_STATE_UNCHECKED;
    var _MDCCheckboxFoundatio = MDCCheckboxFoundation.cssClasses,
        ANIM_UNCHECKED_CHECKED = _MDCCheckboxFoundatio.ANIM_UNCHECKED_CHECKED,
        ANIM_UNCHECKED_INDETERMINATE = _MDCCheckboxFoundatio.ANIM_UNCHECKED_INDETERMINATE,
        ANIM_CHECKED_UNCHECKED = _MDCCheckboxFoundatio.ANIM_CHECKED_UNCHECKED,
        ANIM_CHECKED_INDETERMINATE = _MDCCheckboxFoundatio.ANIM_CHECKED_INDETERMINATE,
        ANIM_INDETERMINATE_CHECKED = _MDCCheckboxFoundatio.ANIM_INDETERMINATE_CHECKED,
        ANIM_INDETERMINATE_UNCHECKED = _MDCCheckboxFoundatio.ANIM_INDETERMINATE_UNCHECKED;


    switch (oldState) {
      case TRANSITION_STATE_INIT:
        if (newState === TRANSITION_STATE_UNCHECKED) {
          return '';
        }
      // fallthrough
      case TRANSITION_STATE_UNCHECKED:
        return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
      case TRANSITION_STATE_CHECKED:
        return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
      // TRANSITION_STATE_INDETERMINATE
      default:
        return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
    }
  };

  /**
   * @return {!MDCSelectionControlState}
   * @private
   */


  MDCCheckboxFoundation.prototype.getNativeControl_ = function getNativeControl_() {
    return this.adapter_.getNativeControl() || {
      checked: false,
      indeterminate: false,
      disabled: false,
      value: null
    };
  };

  return MDCCheckboxFoundation;
}(base_foundation);

/**
 * @param {ObjectPropertyDescriptor|undefined} inputPropDesc
 * @return {boolean}
 */


function validDescriptor(inputPropDesc) {
  return !!inputPropDesc && typeof inputPropDesc.set === 'function';
}

/* harmony default export */ var checkbox_foundation = (foundation_MDCCheckboxFoundation);
// CONCATENATED MODULE: ../node_modules/@material/checkbox/index.js
var checkbox__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var checkbox__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function checkbox__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function checkbox__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function checkbox__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/* eslint-disable no-unused-vars */

/* eslint-enable no-unused-vars */




/**
 * @extends MDCComponent<!MDCCheckboxFoundation>
 * @implements {MDCSelectionControl}
 */

var checkbox_MDCCheckbox = function (_MDCComponent) {
  checkbox__inherits(MDCCheckbox, _MDCComponent);

  MDCCheckbox.attachTo = function attachTo(root) {
    return new MDCCheckbox(root);
  };

  /**
   * Returns the state of the native control element, or null if the native control element is not present.
   * @return {?MDCSelectionControlState}
   * @private
   */


  checkbox__createClass(MDCCheckbox, [{
    key: 'nativeCb_',
    get: function get() {
      var NATIVE_CONTROL_SELECTOR = checkbox_foundation.strings.NATIVE_CONTROL_SELECTOR;

      var cbEl = /** @type {?MDCSelectionControlState} */this.root_.querySelector(NATIVE_CONTROL_SELECTOR);
      return cbEl;
    }
  }]);

  function MDCCheckbox() {
    checkbox__classCallCheck(this, MDCCheckbox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!MDCRipple} */
    var _this = checkbox__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.ripple_ = _this.initRipple_();
    return _this;
  }

  /**
   * @return {!MDCRipple}
   * @private
   */


  MDCCheckbox.prototype.initRipple_ = function initRipple_() {
    var _this2 = this;

    var MATCHES = getMatchesProperty(HTMLElement.prototype);
    var adapter = checkbox__extends(ripple_MDCRipple.createAdapter(this), {
      isUnbounded: function isUnbounded() {
        return true;
      },
      isSurfaceActive: function isSurfaceActive() {
        return _this2.nativeCb_[MATCHES](':active');
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return _this2.nativeCb_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return _this2.nativeCb_.removeEventListener(type, handler);
      },
      computeBoundingRect: function computeBoundingRect() {
        var _root_$getBoundingCli = _this2.root_.getBoundingClientRect(),
            left = _root_$getBoundingCli.left,
            top = _root_$getBoundingCli.top;

        var DIM = 40;
        return {
          top: top,
          left: left,
          right: left + DIM,
          bottom: top + DIM,
          width: DIM,
          height: DIM
        };
      }
    });
    var foundation = new ripple_foundation(adapter);
    return new ripple_MDCRipple(this.root_, foundation);
  };

  /** @return {!MDCCheckboxFoundation} */


  MDCCheckbox.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this3 = this;

    return new checkbox_foundation({
      addClass: function addClass(className) {
        return _this3.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this3.root_.classList.remove(className);
      },
      registerAnimationEndHandler: function registerAnimationEndHandler(handler) {
        return _this3.root_.addEventListener(getCorrectEventName(window, 'animationend'), handler);
      },
      deregisterAnimationEndHandler: function deregisterAnimationEndHandler(handler) {
        return _this3.root_.removeEventListener(getCorrectEventName(window, 'animationend'), handler);
      },
      registerChangeHandler: function registerChangeHandler(handler) {
        return _this3.nativeCb_.addEventListener('change', handler);
      },
      deregisterChangeHandler: function deregisterChangeHandler(handler) {
        return _this3.nativeCb_.removeEventListener('change', handler);
      },
      getNativeControl: function getNativeControl() {
        return _this3.nativeCb_;
      },
      forceLayout: function forceLayout() {
        return _this3.root_.offsetWidth;
      },
      isAttachedToDOM: function isAttachedToDOM() {
        return Boolean(_this3.root_.parentNode);
      }
    });
  };

  /** @return {!MDCRipple} */


  MDCCheckbox.prototype.destroy = function destroy() {
    this.ripple_.destroy();
    _MDCComponent.prototype.destroy.call(this);
  };

  checkbox__createClass(MDCCheckbox, [{
    key: 'ripple',
    get: function get() {
      return this.ripple_;
    }

    /** @return {boolean} */

  }, {
    key: 'checked',
    get: function get() {
      return this.foundation_.isChecked();
    }

    /** @param {boolean} checked */
    ,
    set: function set(checked) {
      this.foundation_.setChecked(checked);
    }

    /** @return {boolean} */

  }, {
    key: 'indeterminate',
    get: function get() {
      return this.foundation_.isIndeterminate();
    }

    /** @param {boolean} indeterminate */
    ,
    set: function set(indeterminate) {
      this.foundation_.setIndeterminate(indeterminate);
    }

    /** @return {boolean} */

  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    }

    /** @param {boolean} disabled */
    ,
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }

    /** @return {?string} */

  }, {
    key: 'value',
    get: function get() {
      return this.foundation_.getValue();
    }

    /** @param {?string} value */
    ,
    set: function set(value) {
      this.foundation_.setValue(value);
    }
  }]);

  return MDCCheckbox;
}(base_component);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Checkbox/index.js
function Checkbox__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Checkbox__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Checkbox__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Checkbox__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function Checkbox__objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}





/*
 * Default props for check box
 */
var defaultProps = {
  checked: false,
  indeterminate: false
};

/**
 */

var Checkbox_Checkbox = function (_MaterialComponent) {
  Checkbox__inherits(Checkbox, _MaterialComponent);

  function Checkbox() {
    Checkbox__classCallCheck(this, Checkbox);

    var _this = Checkbox__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "checkbox";
    _this._mdcProps = ["disabled"];
    return _this;
  }

  Checkbox.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new checkbox_MDCCheckbox(this.control);
    toggleCheckbox(defaultProps, this.props, this.MDComponent);
  };

  Checkbox.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Checkbox.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    toggleCheckbox(this.props, nextProps, this.MDComponent);
  };

  Checkbox.prototype.materialDom = function materialDom(allprops) {
    var _this2 = this;

    var className = allprops.className,
        props = Checkbox__objectWithoutProperties(allprops, ["className"]);

    return Object(preact_min["h"])("div", {
      className: "mdc-checkbox " + className,
      ref: function ref(control) {
        _this2.control = control;
      }
    }, Object(preact_min["h"])("input", Checkbox__extends({
      type: "checkbox",
      className: "mdc-checkbox__native-control"
    }, props)), Object(preact_min["h"])("div", { className: "mdc-checkbox__background" }, Object(preact_min["h"])("svg", {
      version: "1.1",
      className: "mdc-checkbox__checkmark",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24"
    }, Object(preact_min["h"])("path", {
      className: "mdc-checkbox__checkmark__path",
      fill: "none",
      stroke: "white",
      d: "M1.73,12.91 8.1,19.28 22.79,4.59"
    })), Object(preact_min["h"])("div", { className: "mdc-checkbox__mixedmark" })));
  };

  return Checkbox;
}(MaterialComponent_MaterialComponent);

/*
 * Function to add declarative opening/closing to drawer
 */



function toggleCheckbox(oldprops, newprops, cbox) {
  if ("checked" in oldprops && "checked" in newprops && oldprops.checked !== newprops.checked) {
    cbox.checked = newprops.checked;
  }

  if ("indeterminate" in oldprops && "indeterminate" in newprops && oldprops.indeterminate !== newprops.indeterminate) {
    cbox.indeterminate = newprops.indeterminate;
  }
}
// EXTERNAL MODULE: ./routes/checkbox/style.scss
var checkbox_style = __webpack_require__("fG5c");
var checkbox_style_default = /*#__PURE__*/__webpack_require__.n(checkbox_style);

// EXTERNAL MODULE: ./routes/checkbox/sample.txt
var checkbox_sample = __webpack_require__("nVyQ");
var checkbox_sample_default = /*#__PURE__*/__webpack_require__.n(checkbox_sample);

// CONCATENATED MODULE: ./routes/checkbox/index.js


function routes_checkbox__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_checkbox__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_checkbox__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components




// Components



// Styles


// Samples


// Class

var checkbox__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var checkbox__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    checkbox_sample_default.a
  )
);

var checkbox__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var checkbox__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-checkbox"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-checkbox" },
    " ",
    "here"
  ),
  "."
);

var checkbox__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var checkbox__ref6 = Object(preact_min["h"])(
  "label",
  { "for": "basic-checkbox", id: "basic-checkbox-label" },
  "This is my checkbox"
);

var checkbox__ref7 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Checked "
);

var checkbox__ref8 = Object(preact_min["h"])(
  "label",
  { "for": "basic-checkbox2", id: "basic-checkbox2-label" },
  "This is checked checkbox"
);

var checkbox_CheckboxPage = function (_Component) {
  routes_checkbox__inherits(CheckboxPage, _Component);

  function CheckboxPage() {
    routes_checkbox__classCallCheck(this, CheckboxPage);

    var _this = routes_checkbox__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Checkbox",
      props: [{
        name: "disabled",
        description: "This makes the checkbox disabled"
      }, {
        name: "checked",
        description: "This makes the checkbox checked"
      }, {
        name: "indeterminate",
        description: "This makes the checkbox indeterminate"
      }]
    }];
    return _this;
  }

  CheckboxPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      { className: "page-checkbox" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      checkbox__ref,
      checkbox__ref2,
      checkbox__ref3,
      checkbox__ref4,
      checkbox__ref5,
      Object(preact_min["h"])(
        Formfield,
        null,
        Object(preact_min["h"])(Checkbox_Checkbox, {
          id: "basic-checkbox",
          ref: function ref(cb) {
            _this2.cb = cb;
          }
        }),
        checkbox__ref6
      ),
      Object(preact_min["h"])(
        preact_material_components_Button,
        {
          raised: true,
          onClick: function onClick() {
            _this2.cb.MDComponent.indeterminate = true;
          }
        },
        "Make indeterminate"
      ),
      checkbox__ref7,
      Object(preact_min["h"])(
        Formfield,
        null,
        Object(preact_min["h"])(Checkbox_Checkbox, {
          id: "basic-checkbox2",
          checked: true,
          ref: function ref(cb) {
            _this2.cb = cb;
          }
        }),
        checkbox__ref8
      )
    );
  };

  return CheckboxPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/dialog/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var dialog_constants_cssClasses = {
  ROOT: 'mdc-dialog',
  OPEN: 'mdc-dialog--open',
  ANIMATING: 'mdc-dialog--animating',
  BACKDROP: 'mdc-dialog__backdrop',
  SCROLL_LOCK: 'mdc-dialog-scroll-lock',
  ACCEPT_BTN: 'mdc-dialog__footer__button--accept',
  CANCEL_BTN: 'mdc-dialog__footer__button--cancel'
};

var dialog_constants_strings = {
  OPEN_DIALOG_SELECTOR: '.mdc-dialog--open',
  DIALOG_SURFACE_SELECTOR: '.mdc-dialog__surface',
  ACCEPT_SELECTOR: '.mdc-dialog__footer__button--accept',
  ACCEPT_EVENT: 'MDCDialog:accept',
  CANCEL_EVENT: 'MDCDialog:cancel'
};
// CONCATENATED MODULE: ../node_modules/@material/dialog/foundation.js
var dialog_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var dialog_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function dialog_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dialog_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function dialog_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var foundation_MDCDialogFoundation = function (_MDCFoundation) {
  dialog_foundation__inherits(MDCDialogFoundation, _MDCFoundation);

  dialog_foundation__createClass(MDCDialogFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return dialog_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return dialog_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        addBodyClass: function addBodyClass() /* className: string */{},
        removeBodyClass: function removeBodyClass() /* className: string */{},
        eventTargetHasClass: function eventTargetHasClass() {
          return (/* target: EventTarget, className: string */ /* boolean */false
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evt: string, handler: EventListener */{},
        registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler() /* evt: string, handler: EventListener */{},
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler() /* handler: EventListener */{},
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler() /* handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{},
        notifyAccept: function notifyAccept() {},
        notifyCancel: function notifyCancel() {},
        trapFocusOnSurface: function trapFocusOnSurface() {},
        untrapFocusOnSurface: function untrapFocusOnSurface() {},
        isDialog: function isDialog() {
          return (/* el: Element */ /* boolean */false
          );
        },
        layoutFooterRipples: function layoutFooterRipples() {}
      };
    }
  }]);

  function MDCDialogFoundation(adapter) {
    dialog_foundation__classCallCheck(this, MDCDialogFoundation);

    var _this = dialog_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, dialog_foundation__extends(MDCDialogFoundation.defaultAdapter, adapter)));

    _this.isOpen_ = false;
    _this.componentClickHandler_ = function (evt) {
      if (_this.adapter_.eventTargetHasClass(evt.target, dialog_constants_cssClasses.BACKDROP)) {
        _this.cancel(true);
      }
    };
    _this.dialogClickHandler_ = function (evt) {
      return _this.handleDialogClick_(evt);
    };
    _this.documentKeydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {
        _this.cancel(true);
      }
    };
    _this.transitionEndHandler_ = function (evt) {
      return _this.handleTransitionEnd_(evt);
    };
    return _this;
  }

  MDCDialogFoundation.prototype.destroy = function destroy() {
    // Ensure that dialog is cleaned up when destroyed
    if (this.isOpen_) {
      this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
      this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
      this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
      this.adapter_.untrapFocusOnSurface();
      this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
      this.enableScroll_();
    }
  };

  MDCDialogFoundation.prototype.open = function open() {
    this.isOpen_ = true;
    this.disableScroll_();
    this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.registerSurfaceInteractionHandler('click', this.dialogClickHandler_);
    this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.OPEN);
  };

  MDCDialogFoundation.prototype.close = function close() {
    this.isOpen_ = false;
    this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
    this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
    this.adapter_.untrapFocusOnSurface();
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
  };

  MDCDialogFoundation.prototype.isOpen = function isOpen() {
    return this.isOpen_;
  };

  MDCDialogFoundation.prototype.accept = function accept(shouldNotify) {
    if (shouldNotify) {
      this.adapter_.notifyAccept();
    }

    this.close();
  };

  MDCDialogFoundation.prototype.cancel = function cancel(shouldNotify) {
    if (shouldNotify) {
      this.adapter_.notifyCancel();
    }

    this.close();
  };

  MDCDialogFoundation.prototype.handleDialogClick_ = function handleDialogClick_(evt) {
    var target = evt.target;

    if (this.adapter_.eventTargetHasClass(target, dialog_constants_cssClasses.ACCEPT_BTN)) {
      this.accept(true);
    } else if (this.adapter_.eventTargetHasClass(target, dialog_constants_cssClasses.CANCEL_BTN)) {
      this.cancel(true);
    }
  };

  MDCDialogFoundation.prototype.handleTransitionEnd_ = function handleTransitionEnd_(evt) {
    if (this.adapter_.isDialog(evt.target)) {
      this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
      if (this.isOpen_) {
        this.adapter_.trapFocusOnSurface();
        this.adapter_.layoutFooterRipples();
      } else {
        this.enableScroll_();
      };
    };
  };

  MDCDialogFoundation.prototype.disableScroll_ = function disableScroll_() {
    this.adapter_.addBodyClass(dialog_constants_cssClasses.SCROLL_LOCK);
  };

  MDCDialogFoundation.prototype.enableScroll_ = function enableScroll_() {
    this.adapter_.removeBodyClass(dialog_constants_cssClasses.SCROLL_LOCK);
  };

  return MDCDialogFoundation;
}(base_foundation);


// EXTERNAL MODULE: ../node_modules/focus-trap/index.js
var focus_trap = __webpack_require__("ySUw");
var focus_trap_default = /*#__PURE__*/__webpack_require__.n(focus_trap);

// CONCATENATED MODULE: ../node_modules/@material/dialog/util.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



function createFocusTrapInstance(surfaceEl, acceptButtonEl) {
  var focusTrapFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : focus_trap_default.a;

  return focusTrapFactory(surfaceEl, {
    initialFocus: acceptButtonEl,
    clickOutsideDeactivates: true
  });
}
// CONCATENATED MODULE: ../node_modules/@material/dialog/index.js
var dialog__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function dialog__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dialog__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function dialog__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */










var dialog_MDCDialog = function (_MDCComponent) {
  dialog__inherits(MDCDialog, _MDCComponent);

  function MDCDialog() {
    dialog__classCallCheck(this, MDCDialog);

    return dialog__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCDialog.attachTo = function attachTo(root) {
    return new MDCDialog(root);
  };

  MDCDialog.prototype.initialize = function initialize() {
    this.focusTrap_ = createFocusTrapInstance(this.dialogSurface_, this.acceptButton_);
    this.footerBtnRipples_ = [];

    var footerBtns = this.root_.querySelectorAll('.mdc-dialog__footer__button');
    for (var i = 0, footerBtn; footerBtn = footerBtns[i]; i++) {
      this.footerBtnRipples_.push(new ripple_MDCRipple(footerBtn));
    }
  };

  MDCDialog.prototype.destroy = function destroy() {
    this.footerBtnRipples_.forEach(function (ripple) {
      return ripple.destroy();
    });
    _MDCComponent.prototype.destroy.call(this);
  };

  MDCDialog.prototype.show = function show() {
    this.foundation_.open();
  };

  MDCDialog.prototype.close = function close() {
    this.foundation_.close();
  };

  MDCDialog.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCDialogFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      addBodyClass: function addBodyClass(className) {
        return document.body.classList.add(className);
      },
      removeBodyClass: function removeBodyClass(className) {
        return document.body.classList.remove(className);
      },
      eventTargetHasClass: function eventTargetHasClass(target, className) {
        return target.classList.contains(className);
      },
      registerInteractionHandler: function registerInteractionHandler(evt, handler) {
        return _this2.root_.addEventListener(evt, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
        return _this2.root_.removeEventListener(evt, handler);
      },
      registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler(evt, handler) {
        return _this2.dialogSurface_.addEventListener(evt, handler);
      },
      deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler(evt, handler) {
        return _this2.dialogSurface_.removeEventListener(evt, handler);
      },
      registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
        return document.addEventListener('keydown', handler);
      },
      deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
        return document.removeEventListener('keydown', handler);
      },
      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
        return _this2.dialogSurface_.addEventListener('transitionend', handler);
      },
      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
        return _this2.dialogSurface_.removeEventListener('transitionend', handler);
      },
      notifyAccept: function notifyAccept() {
        return _this2.emit(foundation_MDCDialogFoundation.strings.ACCEPT_EVENT);
      },
      notifyCancel: function notifyCancel() {
        return _this2.emit(foundation_MDCDialogFoundation.strings.CANCEL_EVENT);
      },
      trapFocusOnSurface: function trapFocusOnSurface() {
        return _this2.focusTrap_.activate();
      },
      untrapFocusOnSurface: function untrapFocusOnSurface() {
        return _this2.focusTrap_.deactivate();
      },
      isDialog: function isDialog(el) {
        return el === _this2.dialogSurface_;
      },
      layoutFooterRipples: function layoutFooterRipples() {
        return _this2.footerBtnRipples_.forEach(function (ripple) {
          return ripple.layout();
        });
      }
    });
  };

  dialog__createClass(MDCDialog, [{
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    }
  }, {
    key: 'acceptButton_',
    get: function get() {
      return this.root_.querySelector(foundation_MDCDialogFoundation.strings.ACCEPT_SELECTOR);
    }
  }, {
    key: 'dialogSurface_',
    get: function get() {
      return this.root_.querySelector(foundation_MDCDialogFoundation.strings.DIALOG_SURFACE_SELECTOR);
    }
  }]);

  return MDCDialog;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Dialog/index.js
function Dialog__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Dialog__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Dialog__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dialog__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





/**
 */

var Dialog_Dialog = function (_MaterialComponent) {
  Dialog__inherits(Dialog, _MaterialComponent);

  function Dialog() {
    Dialog__classCallCheck(this, Dialog);

    var _this = Dialog__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "dialog";
    _this._onAccept = _this._onAccept.bind(_this);
    _this._onCancel = _this._onCancel.bind(_this);
    return _this;
  }

  Dialog.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new dialog_MDCDialog(this.control);
    this.MDComponent.listen("MDCDialog:accept", this._onAccept);
    this.MDComponent.listen("MDCDialog:cancel", this._onCancel);
  };

  Dialog.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCDialog:accept", this._onAccept);
    this.MDComponent.unlisten("MDCDialog:cancel", this._onCancel);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Dialog.prototype._onAccept = function _onAccept(e) {
    if (this.props.onAccept) {
      this.props.onAccept(e);
    }
  };

  Dialog.prototype._onCancel = function _onCancel(e) {
    if (this.props.onCancel) {
      this.props.onCancel(e);
    }
  };

  Dialog.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("aside", Dialog__extends({
      role: "alertdialog",
      ref: function ref(control) {
        _this2.control = control;
      }
    }, props), Object(preact_min["h"])("div", { className: "mdc-dialog__surface" }, props.children), Object(preact_min["h"])("div", { className: "mdc-dialog__backdrop" }));
  };

  return Dialog;
}(MaterialComponent_MaterialComponent);

var Dialog_DialogHeader = function (_MaterialComponent2) {
  Dialog__inherits(DialogHeader, _MaterialComponent2);

  function DialogHeader() {
    Dialog__classCallCheck(this, DialogHeader);

    var _this3 = Dialog__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "dialog__header";
    return _this3;
  }

  DialogHeader.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("header", props, Object(preact_min["h"])("h2", { className: "mdc-dialog__header__title" }, props.children));
  };

  return DialogHeader;
}(MaterialComponent_MaterialComponent);

/**
 * @prop scrollable = false
 */


var Dialog_DialogBody = function (_MaterialComponent3) {
  Dialog__inherits(DialogBody, _MaterialComponent3);

  function DialogBody() {
    Dialog__classCallCheck(this, DialogBody);

    var _this4 = Dialog__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this4.componentName = "dialog__body";
    _this4._mdcProps = ["scrollable"];
    return _this4;
  }

  DialogBody.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("section", props, props.children);
  };

  return DialogBody;
}(MaterialComponent_MaterialComponent);

var Dialog_DialogFooter = function (_MaterialComponent4) {
  Dialog__inherits(DialogFooter, _MaterialComponent4);

  function DialogFooter() {
    Dialog__classCallCheck(this, DialogFooter);

    var _this5 = Dialog__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this5.componentName = "dialog__footer";
    return _this5;
  }

  DialogFooter.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("footer", props, props.children);
  };

  return DialogFooter;
}(MaterialComponent_MaterialComponent);

/**
 * @prop cancel = false
 * @prop accept = false
 */


var Dialog_DialogFooterButton = function (_Button) {
  Dialog__inherits(DialogFooterButton, _Button);

  function DialogFooterButton() {
    Dialog__classCallCheck(this, DialogFooterButton);

    var _this6 = Dialog__possibleConstructorReturn(this, _Button.call(this));

    _this6.componentName = "dialog__footer__button";
    _this6._mdcProps = ["cancel", "accept"];
    return _this6;
  }

  DialogFooterButton.prototype.materialDom = function materialDom(props) {
    var _this7 = this;

    return Object(preact_min["h"])("button", Dialog__extends({}, props, {
      className: "mdc-button",
      ref: function ref(control) {
        _this7.control = control;
      }
    }), props.children);
  };

  return DialogFooterButton;
}(preact_material_components_Button);

Dialog_Dialog.Header = Dialog_DialogHeader;
Dialog_Dialog.Body = Dialog_DialogBody;
Dialog_Dialog.Footer = Dialog_DialogFooter;
Dialog_Dialog.FooterButton = Dialog_DialogFooterButton;

/* harmony default export */ var preact_material_components_Dialog = (Dialog_Dialog);
// CONCATENATED MODULE: ../node_modules/preact-material-components/List/index.js
function List__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function List__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function List__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var List__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};




/**
 * @prop dense = false
 * @prop two-line = false
 * @prop interactive = false
 */

var List_List = function (_MaterialComponent) {
  List__inherits(List, _MaterialComponent);

  function List() {
    List__classCallCheck(this, List);

    var _this = List__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "list";
    _this._mdcProps = ["dense", "two-line"];
    return _this;
  }

  List.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    if (props.interactive) {
      return Object(preact_min["h"])("nav", List__extends({ ref: function ref(control) {
          return _this2.control = control;
        } }, props), props.children);
    }

    return Object(preact_min["h"])("ul", List__extends({}, props, { ref: function ref(control) {
        return _this2.control = control;
      } }), props.children);
  };

  return List;
}(MaterialComponent_MaterialComponent);

var List_ListItem = function (_MaterialComponent2) {
  List__inherits(ListItem, _MaterialComponent2);

  function ListItem() {
    List__classCallCheck(this, ListItem);

    var _this3 = List__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "list-item";
    return _this3;
  }

  ListItem.prototype.materialDom = function materialDom(props) {
    var _this4 = this;

    return Object(preact_min["h"])("li", List__extends({ role: "option" }, props, { ref: function ref(control) {
        return _this4.control = control;
      } }), props.children);
  };

  return ListItem;
}(MaterialComponent_MaterialComponent);

var List_LinkItem = function (_MaterialComponent3) {
  List__inherits(LinkItem, _MaterialComponent3);

  function LinkItem() {
    List__classCallCheck(this, LinkItem);

    var _this5 = List__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this5.componentName = "list-item";
    return _this5;
  }

  LinkItem.prototype.componentDidMount = function componentDidMount() {
    _MaterialComponent3.prototype.attachRipple.call(this);
  };

  LinkItem.prototype.materialDom = function materialDom(props) {
    var _this6 = this;

    return Object(preact_min["h"])("a", List__extends({ role: "option" }, props, { ref: function ref(control) {
        return _this6.control = control;
      } }), props.children);
  };

  return LinkItem;
}(MaterialComponent_MaterialComponent);

/**
 * @prop start-detail = true
 * @prop end-detail = false
 */


var List_ListItemIcon = function (_MaterialComponent4) {
  List__inherits(ListItemIcon, _MaterialComponent4);

  function ListItemIcon() {
    List__classCallCheck(this, ListItemIcon);

    var _this7 = List__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this7.componentName = "mdc-list-item__icon";
    return _this7;
  }

  ListItemIcon.prototype.getProxyClassName = function getProxyClassName(props) {
    var classNames = [];

    // default behavior
    props["start-detail"] = props["start-detail"] || true;

    // setting class names mutually exclusive
    if (props["end-detail"]) {
      classNames.push("mdc-list-item__end-detail");
    } else if (props["start-detail"]) {
      classNames.push("mdc-list-item__start-detail");
    }
    return classNames.join(" ");
  };

  ListItemIcon.prototype.materialDom = function materialDom(props) {
    var _this8 = this;

    var className = "material-icons " + this.getProxyClassName(props);
    return Object(preact_min["h"])("i", List__extends({
      className: className,
      "aria-hidden": "true"
    }, props, {
      ref: function ref(control) {
        return _this8.control = control;
      }
    }), props.children);
  };

  return ListItemIcon;
}(MaterialComponent_MaterialComponent);

/**
 * @prop start-detail = true
 * @prop end-detail = false
 */


var List_ListItemAvatar = function (_ListItemIcon) {
  List__inherits(ListItemAvatar, _ListItemIcon);

  function ListItemAvatar() {
    List__classCallCheck(this, ListItemAvatar);

    var _this9 = List__possibleConstructorReturn(this, _ListItemIcon.call(this));

    _this9.componentName = "mdc-list-item__avatar";
    return _this9;
  }

  ListItemAvatar.prototype.materialDom = function materialDom(props) {
    var _this10 = this;

    return Object(preact_min["h"])("img", List__extends({}, props, {
      className: _ListItemIcon.prototype.getProxyClassName.call(this, props)
    }, props, {
      ref: function ref(control) {
        return _this10.control = control;
      },
      width: props.width || "56",
      height: props.height || "56",
      alt: props.alt || ""
    }));
  };

  return ListItemAvatar;
}(List_ListItemIcon);

var List_ListDivider = function (_MaterialComponent5) {
  List__inherits(ListDivider, _MaterialComponent5);

  function ListDivider() {
    List__classCallCheck(this, ListDivider);

    var _this11 = List__possibleConstructorReturn(this, _MaterialComponent5.call(this));

    _this11.componentName = "list-divider";
    _this11._mdcProps = ["inset"];
    return _this11;
  }

  ListDivider.prototype.materialDom = function materialDom(props) {
    var _this12 = this;

    return Object(preact_min["h"])("li", List__extends({
      role: "separator"
    }, props, {
      ref: function ref(control) {
        return _this12.control = control;
      }
    }));
  };

  return ListDivider;
}(MaterialComponent_MaterialComponent);

var List_ListTextContainer = function (_MaterialComponent6) {
  List__inherits(ListTextContainer, _MaterialComponent6);

  function ListTextContainer() {
    List__classCallCheck(this, ListTextContainer);

    var _this13 = List__possibleConstructorReturn(this, _MaterialComponent6.call(this));

    _this13.componentName = "list-item__text";
    return _this13;
  }

  ListTextContainer.prototype.materialDom = function materialDom(props) {
    var _this14 = this;

    return Object(preact_min["h"])("span", List__extends({}, props, { ref: function ref(control) {
        return _this14.control = control;
      } }), props.children);
  };

  return ListTextContainer;
}(MaterialComponent_MaterialComponent);

var ListPrimaryText = function (_ListTextContainer) {
  List__inherits(ListPrimaryText, _ListTextContainer);

  function ListPrimaryText() {
    List__classCallCheck(this, ListPrimaryText);

    var _this15 = List__possibleConstructorReturn(this, _ListTextContainer.call(this));

    _this15.componentName = "list-item__text__primary";
    return _this15;
  }

  return ListPrimaryText;
}(List_ListTextContainer);

var ListSecondaryText = function (_ListTextContainer2) {
  List__inherits(ListSecondaryText, _ListTextContainer2);

  function ListSecondaryText() {
    List__classCallCheck(this, ListSecondaryText);

    var _this16 = List__possibleConstructorReturn(this, _ListTextContainer2.call(this));

    _this16.componentName = "list-item__text__secondary";
    return _this16;
  }

  return ListSecondaryText;
}(List_ListTextContainer);

List_List.Item = List_ListItem;
List_List.LinkItem = List_LinkItem;
List_List.ItemIcon = List_ListItemIcon;
List_List.ItemAvatar = List_ListItemAvatar;
List_List.Divider = List_ListDivider;
List_List.TextContainer = List_ListTextContainer;
List_List.PrimaryText = ListPrimaryText;
List_List.SecondaryText = ListSecondaryText;

/* harmony default export */ var preact_material_components_List = (List_List);
// CONCATENATED MODULE: ./components/events-table/index.js


function events_table__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function events_table__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function events_table__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Class

var events_table__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Custom events"
);

var events_table_EventsTable = function (_Component) {
  events_table__inherits(EventsTable, _Component);

  function EventsTable() {
    events_table__classCallCheck(this, EventsTable);

    return events_table__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  EventsTable.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      events_table__ref,
      Object(preact_min["h"])(
        "ul",
        null,
        this.props.data.map(function (event) {
          return Object(preact_min["h"])(
            "li",
            null,
            Object(preact_min["h"])(
              "div",
              { className: "mdc-typography--headline" },
              event.name
            ),
            Object(preact_min["h"])(
              "div",
              { className: "mdc-typography--body2" },
              event.description
            )
          );
        })
      )
    );
  };

  return EventsTable;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/dialog/style.scss
var dialog_style = __webpack_require__("MviZ");
var dialog_style_default = /*#__PURE__*/__webpack_require__.n(dialog_style);

// EXTERNAL MODULE: ./routes/dialog/sample.txt
var dialog_sample = __webpack_require__("r/eL");
var dialog_sample_default = /*#__PURE__*/__webpack_require__.n(dialog_sample);

// CONCATENATED MODULE: ./routes/dialog/index.js


function routes_dialog__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_dialog__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_dialog__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components




// Components




// Styles


// Samples


// Class

var dialog__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var dialog__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    dialog_sample_default.a
  )
);

var dialog__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var dialog__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-dialog"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-dialog" },
    " ",
    "here"
  ),
  "."
);

var dialog__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var dialog__ref6 = Object(preact_min["h"])(
  preact_material_components_Dialog.Header,
  null,
  "Use Google's location service?"
);

var dialog__ref7 = Object(preact_min["h"])(
  preact_material_components_Dialog.Body,
  null,
  "Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."
);

var dialog__ref8 = Object(preact_min["h"])(
  preact_material_components_Dialog.Footer,
  null,
  Object(preact_min["h"])(
    preact_material_components_Dialog.FooterButton,
    { cancel: true },
    "Decline"
  ),
  Object(preact_min["h"])(
    preact_material_components_Dialog.FooterButton,
    { accept: true },
    "Accept"
  )
);

var dialog__ref9 = Object(preact_min["h"])(
  preact_material_components_Dialog.Header,
  null,
  "Scroll for me ;)"
);

var dialog__ref10 = Object(preact_min["h"])(
  preact_material_components_Dialog.Body,
  { scrollable: true },
  Object(preact_min["h"])(
    preact_material_components_List,
    null,
    Object(preact_min["h"])(
      preact_material_components_List.Item,
      null,
      "Item 1"
    ),
    Object(preact_min["h"])(
      preact_material_components_List.Item,
      null,
      "Item 2"
    ),
    Object(preact_min["h"])(
      preact_material_components_List.Item,
      null,
      "Item 3"
    ),
    Object(preact_min["h"])(
      preact_material_components_List.Item,
      null,
      "Item 4"
    ),
    Object(preact_min["h"])(
      preact_material_components_List.Item,
      null,
      "Item 5"
    )
  )
);

var dialog__ref11 = Object(preact_min["h"])(
  preact_material_components_Dialog.Footer,
  null,
  Object(preact_min["h"])(
    preact_material_components_Dialog.FooterButton,
    { cancel: true },
    "Decline"
  ),
  Object(preact_min["h"])(
    preact_material_components_Dialog.FooterButton,
    { accept: true },
    "Accept"
  )
);

var dialog_DialogPage = function (_Component) {
  routes_dialog__inherits(DialogPage, _Component);

  function DialogPage() {
    routes_dialog__classCallCheck(this, DialogPage);

    var _this = routes_dialog__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Dialog",
      props: []
    }, {
      component: "Dialog.Header",
      props: []
    }, {
      component: "Dialog.Body",
      props: [{
        name: "scrollable",
        description: "Adds vertical scroll for content."
      }]
    }, {
      component: "Dialog.Footer",
      props: []
    }, {
      component: "Dialog.FooterButton",
      props: [{
        name: "accept",
        description: "Makes the button, default button."
      }, {
        name: "cancel",
        description: "Makes the button, cancel button."
      }]
    }];
    _this.eventsTable = [{
      name: "onAccept",
      description: "Fired when the dialog's accept button is clicked."
    }, {
      name: "onCancel",
      description: "Fired when the dialog's cancel button is clicked."
    }];
    return _this;
  }

  DialogPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      { className: "page-dialog" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      Object(preact_min["h"])(events_table_EventsTable, { data: this.eventsTable }),
      dialog__ref,
      dialog__ref2,
      dialog__ref3,
      dialog__ref4,
      dialog__ref5,
      Object(preact_min["h"])(
        preact_material_components_Button,
        {
          primary: true,
          raised: true,
          onClick: function onClick() {
            _this2.normalDlg.MDComponent.show();
          }
        },
        "Show Dialog"
      ),
      Object(preact_min["h"])(
        preact_material_components_Button,
        {
          primary: true,
          raised: true,
          onClick: function onClick() {
            _this2.scrollingDlg.MDComponent.show();
          }
        },
        "Show Scrollable Dialog"
      ),
      Object(preact_min["h"])(
        preact_material_components_Dialog,
        {
          ref: function ref(normalDlg) {
            _this2.normalDlg = normalDlg;
          }
        },
        dialog__ref6,
        dialog__ref7,
        dialog__ref8
      ),
      Object(preact_min["h"])(
        preact_material_components_Dialog,
        {
          ref: function ref(scrollingDlg) {
            _this2.scrollingDlg = scrollingDlg;
          }
        },
        dialog__ref9,
        dialog__ref10,
        dialog__ref11
      )
    );
  };

  return DialogPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/drawer/slidable/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var constants_FOCUSABLE_ELEMENTS = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), ' + 'button:not([disabled]), iframe, object, embed, [tabindex], [contenteditable]';
// CONCATENATED MODULE: ../node_modules/@material/drawer/slidable/foundation.js
var slidable_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var slidable_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function slidable_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function slidable_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function slidable_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var MDCSlidableDrawerFoundation = function (_MDCFoundation) {
  slidable_foundation__inherits(MDCSlidableDrawerFoundation, _MDCFoundation);

  slidable_foundation__createClass(MDCSlidableDrawerFoundation, null, [{
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        hasClass: function hasClass() /* className: string */{},
        hasNecessaryDom: function hasNecessaryDom() {
          return (/* boolean */false
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evt: string, handler: EventListener */{},
        registerDrawerInteractionHandler: function registerDrawerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterDrawerInteractionHandler: function deregisterDrawerInteractionHandler() /* evt: string, handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{},
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler() /* handler: EventListener */{},
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler() /* handler: EventListener */{},
        setTranslateX: function setTranslateX() /* value: number | null */{},
        getFocusableElements: function getFocusableElements() /* NodeList */{},
        saveElementTabState: function saveElementTabState() /* el: Element */{},
        restoreElementTabState: function restoreElementTabState() /* el: Element */{},
        makeElementUntabbable: function makeElementUntabbable() /* el: Element */{},
        notifyOpen: function notifyOpen() {},
        notifyClose: function notifyClose() {},
        isRtl: function isRtl() {
          return (/* boolean */false
          );
        },
        getDrawerWidth: function getDrawerWidth() {
          return (/* number */0
          );
        }
      };
    }
  }]);

  function MDCSlidableDrawerFoundation(adapter, rootCssClass, animatingCssClass, openCssClass) {
    slidable_foundation__classCallCheck(this, MDCSlidableDrawerFoundation);

    var _this = slidable_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, slidable_foundation__extends(MDCSlidableDrawerFoundation.defaultAdapter, adapter)));

    _this.rootCssClass_ = rootCssClass;
    _this.animatingCssClass_ = animatingCssClass;
    _this.openCssClass_ = openCssClass;

    _this.transitionEndHandler_ = function (evt) {
      return _this.handleTransitionEnd_(evt);
    };

    _this.inert_ = false;

    _this.drawerClickHandler_ = function (evt) {
      return evt.stopPropagation();
    };
    _this.componentTouchStartHandler_ = function (evt) {
      return _this.handleTouchStart_(evt);
    };
    _this.componentTouchMoveHandler_ = function (evt) {
      return _this.handleTouchMove_(evt);
    };
    _this.componentTouchEndHandler_ = function (evt) {
      return _this.handleTouchEnd_(evt);
    };
    _this.documentKeydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {
        _this.close();
      }
    };
    return _this;
  }

  MDCSlidableDrawerFoundation.prototype.init = function init() {
    var ROOT = this.rootCssClass_;
    var OPEN = this.openCssClass_;

    if (!this.adapter_.hasClass(ROOT)) {
      throw new Error(ROOT + ' class required in root element.');
    }

    if (!this.adapter_.hasNecessaryDom()) {
      throw new Error('Required DOM nodes missing in ' + ROOT + ' component.');
    }

    if (this.adapter_.hasClass(OPEN)) {
      this.isOpen_ = true;
    } else {
      this.detabinate_();
      this.isOpen_ = false;
    }

    this.adapter_.registerDrawerInteractionHandler('click', this.drawerClickHandler_);
    this.adapter_.registerDrawerInteractionHandler('touchstart', this.componentTouchStartHandler_);
    this.adapter_.registerInteractionHandler('touchmove', this.componentTouchMoveHandler_);
    this.adapter_.registerInteractionHandler('touchend', this.componentTouchEndHandler_);
  };

  MDCSlidableDrawerFoundation.prototype.destroy = function destroy() {
    this.adapter_.deregisterDrawerInteractionHandler('click', this.drawerClickHandler_);
    this.adapter_.deregisterDrawerInteractionHandler('touchstart', this.componentTouchStartHandler_);
    this.adapter_.deregisterInteractionHandler('touchmove', this.componentTouchMoveHandler_);
    this.adapter_.deregisterInteractionHandler('touchend', this.componentTouchEndHandler_);
    // Deregister the document keydown handler just in case the component is destroyed while the menu is open.
    this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
  };

  MDCSlidableDrawerFoundation.prototype.open = function open() {
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
    this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.addClass(this.animatingCssClass_);
    this.adapter_.addClass(this.openCssClass_);
    this.retabinate_();
    // Debounce multiple calls
    if (!this.isOpen_) {
      this.adapter_.notifyOpen();
    }
    this.isOpen_ = true;
  };

  MDCSlidableDrawerFoundation.prototype.close = function close() {
    this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
    this.adapter_.addClass(this.animatingCssClass_);
    this.adapter_.removeClass(this.openCssClass_);
    this.detabinate_();
    // Debounce multiple calls
    if (this.isOpen_) {
      this.adapter_.notifyClose();
    }
    this.isOpen_ = false;
  };

  MDCSlidableDrawerFoundation.prototype.isOpen = function isOpen() {
    return this.isOpen_;
  };

  /**
   *  Render all children of the drawer inert when it's closed.
   */


  MDCSlidableDrawerFoundation.prototype.detabinate_ = function detabinate_() {
    if (this.inert_) {
      return;
    }

    var elements = this.adapter_.getFocusableElements();
    if (elements) {
      for (var i = 0; i < elements.length; i++) {
        this.adapter_.saveElementTabState(elements[i]);
        this.adapter_.makeElementUntabbable(elements[i]);
      }
    }

    this.inert_ = true;
  };

  /**
   *  Make all children of the drawer tabbable again when it's open.
   */


  MDCSlidableDrawerFoundation.prototype.retabinate_ = function retabinate_() {
    if (!this.inert_) {
      return;
    }

    var elements = this.adapter_.getFocusableElements();
    if (elements) {
      for (var i = 0; i < elements.length; i++) {
        this.adapter_.restoreElementTabState(elements[i]);
      }
    }

    this.inert_ = false;
  };

  MDCSlidableDrawerFoundation.prototype.handleTouchStart_ = function handleTouchStart_(evt) {
    if (!this.adapter_.hasClass(this.openCssClass_)) {
      return;
    }
    if (evt.pointerType && evt.pointerType !== 'touch') {
      return;
    }

    this.direction_ = this.adapter_.isRtl() ? -1 : 1;
    this.drawerWidth_ = this.adapter_.getDrawerWidth();
    this.startX_ = evt.touches ? evt.touches[0].pageX : evt.pageX;
    this.currentX_ = this.startX_;

    this.updateRaf_ = requestAnimationFrame(this.updateDrawer_.bind(this));
  };

  MDCSlidableDrawerFoundation.prototype.handleTouchMove_ = function handleTouchMove_(evt) {
    if (evt.pointerType && evt.pointerType !== 'touch') {
      return;
    }

    this.currentX_ = evt.touches ? evt.touches[0].pageX : evt.pageX;
  };

  MDCSlidableDrawerFoundation.prototype.handleTouchEnd_ = function handleTouchEnd_(evt) {
    if (evt.pointerType && evt.pointerType !== 'touch') {
      return;
    }

    this.prepareForTouchEnd_();

    // Did the user close the drawer by more than 50%?
    if (Math.abs(this.newPosition_ / this.drawerWidth_) >= 0.5) {
      this.close();
    } else {
      // Triggering an open here means we'll get a nice animation back to the fully open state.
      this.open();
    }
  };

  MDCSlidableDrawerFoundation.prototype.prepareForTouchEnd_ = function prepareForTouchEnd_() {
    cancelAnimationFrame(this.updateRaf_);
    this.adapter_.setTranslateX(null);
  };

  MDCSlidableDrawerFoundation.prototype.updateDrawer_ = function updateDrawer_() {
    this.updateRaf_ = requestAnimationFrame(this.updateDrawer_.bind(this));
    this.adapter_.setTranslateX(this.newPosition_);
  };

  MDCSlidableDrawerFoundation.prototype.isRootTransitioningEventTarget_ = function isRootTransitioningEventTarget_() {
    // Classes extending MDCSlidableDrawerFoundation should implement this method to return true or false
    // if the event target is the root event target currently transitioning.
    return false;
  };

  MDCSlidableDrawerFoundation.prototype.handleTransitionEnd_ = function handleTransitionEnd_(evt) {
    if (this.isRootTransitioningEventTarget_(evt.target)) {
      this.adapter_.removeClass(this.animatingCssClass_);
      this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
    }
  };

  slidable_foundation__createClass(MDCSlidableDrawerFoundation, [{
    key: 'newPosition_',
    get: function get() {
      var newPos = null;

      if (this.direction_ === 1) {
        newPos = Math.min(0, this.currentX_ - this.startX_);
      } else {
        newPos = Math.max(0, this.currentX_ - this.startX_);
      }

      return newPos;
    }
  }]);

  return MDCSlidableDrawerFoundation;
}(base_foundation);
// CONCATENATED MODULE: ../node_modules/@material/drawer/slidable/index.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// CONCATENATED MODULE: ../node_modules/@material/drawer/temporary/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var temporary_constants_cssClasses = {
  ROOT: 'mdc-temporary-drawer',
  OPEN: 'mdc-temporary-drawer--open',
  ANIMATING: 'mdc-temporary-drawer--animating',
  SCROLL_LOCK: 'mdc-drawer-scroll-lock'
};

var temporary_constants_strings = {
  DRAWER_SELECTOR: '.mdc-temporary-drawer__drawer',
  OPACITY_VAR_NAME: '--mdc-temporary-drawer-opacity',
  FOCUSABLE_ELEMENTS: constants_FOCUSABLE_ELEMENTS,
  OPEN_EVENT: 'MDCTemporaryDrawer:open',
  CLOSE_EVENT: 'MDCTemporaryDrawer:close'
};
// CONCATENATED MODULE: ../node_modules/@material/drawer/temporary/foundation.js
var temporary_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var temporary_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function temporary_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function temporary_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function temporary_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var foundation_MDCTemporaryDrawerFoundation = function (_MDCSlidableDrawerFou) {
  temporary_foundation__inherits(MDCTemporaryDrawerFoundation, _MDCSlidableDrawerFou);

  temporary_foundation__createClass(MDCTemporaryDrawerFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return temporary_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return temporary_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return temporary_foundation__extends(MDCSlidableDrawerFoundation.defaultAdapter, {
        addBodyClass: function addBodyClass() /* className: string */{},
        removeBodyClass: function removeBodyClass() /* className: string */{},
        isDrawer: function isDrawer() {
          return false;
        },
        updateCssVariable: function updateCssVariable() /* value: string */{}
      });
    }
  }]);

  function MDCTemporaryDrawerFoundation(adapter) {
    temporary_foundation__classCallCheck(this, MDCTemporaryDrawerFoundation);

    var _this = temporary_foundation__possibleConstructorReturn(this, _MDCSlidableDrawerFou.call(this, temporary_foundation__extends(MDCTemporaryDrawerFoundation.defaultAdapter, adapter), MDCTemporaryDrawerFoundation.cssClasses.ROOT, MDCTemporaryDrawerFoundation.cssClasses.ANIMATING, MDCTemporaryDrawerFoundation.cssClasses.OPEN));

    _this.componentClickHandler_ = function () {
      return _this.close();
    };
    return _this;
  }

  MDCTemporaryDrawerFoundation.prototype.init = function init() {
    _MDCSlidableDrawerFou.prototype.init.call(this);

    // Make browser aware of custom property being used in this element.
    // Workaround for certain types of hard-to-reproduce heisenbugs.
    this.adapter_.updateCssVariable(0);
    this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);
  };

  MDCTemporaryDrawerFoundation.prototype.destroy = function destroy() {
    _MDCSlidableDrawerFou.prototype.destroy.call(this);

    this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
    this.enableScroll_();
  };

  MDCTemporaryDrawerFoundation.prototype.open = function open() {
    this.disableScroll_();
    // Make sure custom property values are cleared before starting.
    this.adapter_.updateCssVariable('');

    _MDCSlidableDrawerFou.prototype.open.call(this);
  };

  MDCTemporaryDrawerFoundation.prototype.close = function close() {
    // Make sure custom property values are cleared before making any changes.
    this.adapter_.updateCssVariable('');

    _MDCSlidableDrawerFou.prototype.close.call(this);
  };

  MDCTemporaryDrawerFoundation.prototype.prepareForTouchEnd_ = function prepareForTouchEnd_() {
    _MDCSlidableDrawerFou.prototype.prepareForTouchEnd_.call(this);

    this.adapter_.updateCssVariable('');
  };

  MDCTemporaryDrawerFoundation.prototype.updateDrawer_ = function updateDrawer_() {
    _MDCSlidableDrawerFou.prototype.updateDrawer_.call(this);

    var newOpacity = Math.max(0, 1 + this.direction_ * (this.newPosition_ / this.drawerWidth_));
    this.adapter_.updateCssVariable(newOpacity);
  };

  MDCTemporaryDrawerFoundation.prototype.isRootTransitioningEventTarget_ = function isRootTransitioningEventTarget_(el) {
    return this.adapter_.isDrawer(el);
  };

  MDCTemporaryDrawerFoundation.prototype.handleTransitionEnd_ = function handleTransitionEnd_(evt) {
    _MDCSlidableDrawerFou.prototype.handleTransitionEnd_.call(this, evt);
    if (!this.isOpen_) {
      this.enableScroll_();
    }
  };

  MDCTemporaryDrawerFoundation.prototype.disableScroll_ = function disableScroll_() {
    this.adapter_.addBodyClass(temporary_constants_cssClasses.SCROLL_LOCK);
  };

  MDCTemporaryDrawerFoundation.prototype.enableScroll_ = function enableScroll_() {
    this.adapter_.removeBodyClass(temporary_constants_cssClasses.SCROLL_LOCK);
  };

  return MDCTemporaryDrawerFoundation;
}(MDCSlidableDrawerFoundation);


// CONCATENATED MODULE: ../node_modules/@material/drawer/util.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TAB_DATA = 'data-mdc-tabindex';
var TAB_DATA_HANDLED = 'data-mdc-tabindex-handled';

var storedTransformPropertyName_ = void 0;
var drawer_util_supportsPassive_ = void 0;

// Remap touch events to pointer events, if the browser doesn't support touch events.
function remapEvent(eventName) {
  var globalObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;

  if (!('ontouchstart' in globalObj.document)) {
    switch (eventName) {
      case 'touchstart':
        return 'pointerdown';
      case 'touchmove':
        return 'pointermove';
      case 'touchend':
        return 'pointerup';
      default:
        return eventName;
    }
  }

  return eventName;
}

// Choose the correct transform property to use on the current browser.
function getTransformPropertyName() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (storedTransformPropertyName_ === undefined || forceRefresh) {
    var el = globalObj.document.createElement('div');
    var transformPropertyName = 'transform' in el.style ? 'transform' : '-webkit-transform';
    storedTransformPropertyName_ = transformPropertyName;
  }

  return storedTransformPropertyName_;
}

// Determine whether the current browser supports CSS properties.
function supportsCssCustomProperties() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;

  if ('CSS' in globalObj) {
    return globalObj.CSS.supports('(--color: red)');
  }
  return false;
}

// Determine whether the current browser supports passive event listeners, and if so, use them.
function drawer_util_applyPassive() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (drawer_util_supportsPassive_ === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    drawer_util_supportsPassive_ = isSupported;
  }

  return drawer_util_supportsPassive_ ? { passive: true } : false;
}

// Save the tab state for an element.
function util_saveElementTabState(el) {
  if (el.hasAttribute('tabindex')) {
    el.setAttribute(TAB_DATA, el.getAttribute('tabindex'));
  }
  el.setAttribute(TAB_DATA_HANDLED, true);
}

// Restore the tab state for an element, if it was saved.
function util_restoreElementTabState(el) {
  // Only modify elements we've already handled, in case anything was dynamically added since we saved state.
  if (el.hasAttribute(TAB_DATA_HANDLED)) {
    if (el.hasAttribute(TAB_DATA)) {
      el.setAttribute('tabindex', el.getAttribute(TAB_DATA));
      el.removeAttribute(TAB_DATA);
    } else {
      el.removeAttribute('tabindex');
    }
    el.removeAttribute(TAB_DATA_HANDLED);
  }
}
// CONCATENATED MODULE: ../node_modules/@material/drawer/temporary/index.js
var temporary__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function temporary__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function temporary__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function temporary__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var temporary_MDCTemporaryDrawer = function (_MDCComponent) {
  temporary__inherits(MDCTemporaryDrawer, _MDCComponent);

  function MDCTemporaryDrawer() {
    temporary__classCallCheck(this, MDCTemporaryDrawer);

    return temporary__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCTemporaryDrawer.attachTo = function attachTo(root) {
    return new MDCTemporaryDrawer(root);
  };

  MDCTemporaryDrawer.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    var _MDCTemporaryDrawerFo = foundation_MDCTemporaryDrawerFoundation.strings,
        FOCUSABLE_ELEMENTS = _MDCTemporaryDrawerFo.FOCUSABLE_ELEMENTS,
        OPACITY_VAR_NAME = _MDCTemporaryDrawerFo.OPACITY_VAR_NAME;


    return new foundation_MDCTemporaryDrawerFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      addBodyClass: function addBodyClass(className) {
        return document.body.classList.add(className);
      },
      removeBodyClass: function removeBodyClass(className) {
        return document.body.classList.remove(className);
      },
      hasNecessaryDom: function hasNecessaryDom() {
        return Boolean(_this2.drawer);
      },
      registerInteractionHandler: function registerInteractionHandler(evt, handler) {
        return _this2.root_.addEventListener(remapEvent(evt), handler, drawer_util_applyPassive());
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
        return _this2.root_.removeEventListener(remapEvent(evt), handler, drawer_util_applyPassive());
      },
      registerDrawerInteractionHandler: function registerDrawerInteractionHandler(evt, handler) {
        return _this2.drawer.addEventListener(remapEvent(evt), handler);
      },
      deregisterDrawerInteractionHandler: function deregisterDrawerInteractionHandler(evt, handler) {
        return _this2.drawer.removeEventListener(remapEvent(evt), handler);
      },
      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
        return _this2.drawer.addEventListener('transitionend', handler);
      },
      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
        return _this2.drawer.removeEventListener('transitionend', handler);
      },
      registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
        return document.addEventListener('keydown', handler);
      },
      deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
        return document.removeEventListener('keydown', handler);
      },
      getDrawerWidth: function getDrawerWidth() {
        return _this2.drawer.offsetWidth;
      },
      setTranslateX: function setTranslateX(value) {
        return _this2.drawer.style.setProperty(getTransformPropertyName(), value === null ? null : 'translateX(' + value + 'px)');
      },
      updateCssVariable: function updateCssVariable(value) {
        if (supportsCssCustomProperties()) {
          _this2.root_.style.setProperty(OPACITY_VAR_NAME, value);
        }
      },
      getFocusableElements: function getFocusableElements() {
        return _this2.drawer.querySelectorAll(FOCUSABLE_ELEMENTS);
      },
      saveElementTabState: function saveElementTabState(el) {
        return util_saveElementTabState(el);
      },
      restoreElementTabState: function restoreElementTabState(el) {
        return util_restoreElementTabState(el);
      },
      makeElementUntabbable: function makeElementUntabbable(el) {
        return el.setAttribute('tabindex', -1);
      },
      notifyOpen: function notifyOpen() {
        return _this2.emit(foundation_MDCTemporaryDrawerFoundation.strings.OPEN_EVENT);
      },
      notifyClose: function notifyClose() {
        return _this2.emit(foundation_MDCTemporaryDrawerFoundation.strings.CLOSE_EVENT);
      },
      isRtl: function isRtl() {
        return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
      },
      isDrawer: function isDrawer(el) {
        return el === _this2.drawer;
      }
    });
  };

  temporary__createClass(MDCTemporaryDrawer, [{
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    },
    set: function set(value) {
      if (value) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }

    /* Return the drawer element inside the component. */

  }, {
    key: 'drawer',
    get: function get() {
      return this.root_.querySelector(foundation_MDCTemporaryDrawerFoundation.strings.DRAWER_SELECTOR);
    }
  }]);

  return MDCTemporaryDrawer;
}(base_component);
// CONCATENATED MODULE: ../node_modules/@material/drawer/persistent/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var persistent_constants_cssClasses = {
  ROOT: 'mdc-persistent-drawer',
  OPEN: 'mdc-persistent-drawer--open',
  ANIMATING: 'mdc-persistent-drawer--animating'
};

var persistent_constants_strings = {
  DRAWER_SELECTOR: '.mdc-persistent-drawer__drawer',
  FOCUSABLE_ELEMENTS: constants_FOCUSABLE_ELEMENTS,
  OPEN_EVENT: 'MDCPersistentDrawer:open',
  CLOSE_EVENT: 'MDCPersistentDrawer:close'
};
// CONCATENATED MODULE: ../node_modules/@material/drawer/persistent/foundation.js
var persistent_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var persistent_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function persistent_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function persistent_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function persistent_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var foundation_MDCPersistentDrawerFoundation = function (_MDCSlidableDrawerFou) {
  persistent_foundation__inherits(MDCPersistentDrawerFoundation, _MDCSlidableDrawerFou);

  persistent_foundation__createClass(MDCPersistentDrawerFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return persistent_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return persistent_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return persistent_foundation__extends(MDCSlidableDrawerFoundation.defaultAdapter, {
        isDrawer: function isDrawer() {
          return false;
        }
      });
    }
  }]);

  function MDCPersistentDrawerFoundation(adapter) {
    persistent_foundation__classCallCheck(this, MDCPersistentDrawerFoundation);

    return persistent_foundation__possibleConstructorReturn(this, _MDCSlidableDrawerFou.call(this, persistent_foundation__extends(MDCPersistentDrawerFoundation.defaultAdapter, adapter), MDCPersistentDrawerFoundation.cssClasses.ROOT, MDCPersistentDrawerFoundation.cssClasses.ANIMATING, MDCPersistentDrawerFoundation.cssClasses.OPEN));
  }

  MDCPersistentDrawerFoundation.prototype.isRootTransitioningEventTarget_ = function isRootTransitioningEventTarget_(el) {
    return this.adapter_.isDrawer(el);
  };

  return MDCPersistentDrawerFoundation;
}(MDCSlidableDrawerFoundation);


// CONCATENATED MODULE: ../node_modules/@material/drawer/persistent/index.js
var persistent__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function persistent__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function persistent__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function persistent__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var persistent_MDCPersistentDrawer = function (_MDCComponent) {
  persistent__inherits(MDCPersistentDrawer, _MDCComponent);

  function MDCPersistentDrawer() {
    persistent__classCallCheck(this, MDCPersistentDrawer);

    return persistent__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCPersistentDrawer.attachTo = function attachTo(root) {
    return new MDCPersistentDrawer(root);
  };

  MDCPersistentDrawer.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    var FOCUSABLE_ELEMENTS = foundation_MDCPersistentDrawerFoundation.strings.FOCUSABLE_ELEMENTS;


    return new foundation_MDCPersistentDrawerFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      hasNecessaryDom: function hasNecessaryDom() {
        return Boolean(_this2.drawer);
      },
      registerInteractionHandler: function registerInteractionHandler(evt, handler) {
        return _this2.root_.addEventListener(remapEvent(evt), handler, drawer_util_applyPassive());
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
        return _this2.root_.removeEventListener(remapEvent(evt), handler, drawer_util_applyPassive());
      },
      registerDrawerInteractionHandler: function registerDrawerInteractionHandler(evt, handler) {
        return _this2.drawer.addEventListener(remapEvent(evt), handler);
      },
      deregisterDrawerInteractionHandler: function deregisterDrawerInteractionHandler(evt, handler) {
        return _this2.drawer.removeEventListener(remapEvent(evt), handler);
      },
      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
        return _this2.root_.addEventListener('transitionend', handler);
      },
      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
        return _this2.root_.removeEventListener('transitionend', handler);
      },
      registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
        return document.addEventListener('keydown', handler);
      },
      deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
        return document.removeEventListener('keydown', handler);
      },
      getDrawerWidth: function getDrawerWidth() {
        return _this2.drawer.offsetWidth;
      },
      setTranslateX: function setTranslateX(value) {
        return _this2.drawer.style.setProperty(getTransformPropertyName(), value === null ? null : 'translateX(' + value + 'px)');
      },
      getFocusableElements: function getFocusableElements() {
        return _this2.drawer.querySelectorAll(FOCUSABLE_ELEMENTS);
      },
      saveElementTabState: function saveElementTabState(el) {
        return util_saveElementTabState(el);
      },
      restoreElementTabState: function restoreElementTabState(el) {
        return util_restoreElementTabState(el);
      },
      makeElementUntabbable: function makeElementUntabbable(el) {
        return el.setAttribute('tabindex', -1);
      },
      notifyOpen: function notifyOpen() {
        return _this2.emit(foundation_MDCPersistentDrawerFoundation.strings.OPEN_EVENT);
      },
      notifyClose: function notifyClose() {
        return _this2.emit(foundation_MDCPersistentDrawerFoundation.strings.CLOSE_EVENT);
      },
      isRtl: function isRtl() {
        return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
      },
      isDrawer: function isDrawer(el) {
        return el === _this2.drawer;
      }
    });
  };

  persistent__createClass(MDCPersistentDrawer, [{
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    },
    set: function set(value) {
      if (value) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }

    // Return the drawer element inside the component.

  }, {
    key: 'drawer',
    get: function get() {
      return this.root_.querySelector(foundation_MDCPersistentDrawerFoundation.strings.DRAWER_SELECTOR);
    }
  }]);

  return MDCPersistentDrawer;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Drawer/index.js
function Drawer__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Drawer__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Drawer__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Drawer__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};







/*
 * Default props for drawers
 */
var Drawer_defaultProps = {
  open: false
};

var Drawer_TemporaryDrawer = function (_MaterialComponent) {
  Drawer__inherits(TemporaryDrawer, _MaterialComponent);

  function TemporaryDrawer() {
    Drawer__classCallCheck(this, TemporaryDrawer);

    var _this = Drawer__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "temporary-drawer";
    _this._open = _this._open.bind(_this);
    _this._close = _this._close.bind(_this);
    return _this;
  }

  TemporaryDrawer.prototype._open = function _open() {
    if (this.props.onOpen) {
      this.props.onOpen();
    }
  };

  TemporaryDrawer.prototype._close = function _close() {
    if (this.props.onClose) {
      this.props.onClose();
    }
  };

  TemporaryDrawer.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = temporary_MDCTemporaryDrawer.attachTo(this.control);
    this.MDComponent.listen("MDCTemporaryDrawer:open", this._open);
    this.MDComponent.listen("MDCTemporaryDrawer:close", this._close);
    toggleDrawer(Drawer_defaultProps, this.props, this.MDComponent);
  };

  TemporaryDrawer.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCTemporaryDrawer:close", this._close);
    this.MDComponent.unlisten("MDCTemporaryDrawer:open", this._open);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  TemporaryDrawer.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    toggleDrawer(this.props, nextProps, this.MDComponent);
  };

  TemporaryDrawer.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("aside", Drawer__extends({
      className: "mdc-typography",
      ref: function ref(control) {
        _this2.control = control;
      }
    }, props), Object(preact_min["h"])("nav", { className: "mdc-temporary-drawer__drawer" }, props.children));
  };

  return TemporaryDrawer;
}(MaterialComponent_MaterialComponent);

var Drawer_TemporaryDrawerHeader = function (_MaterialComponent2) {
  Drawer__inherits(TemporaryDrawerHeader, _MaterialComponent2);

  function TemporaryDrawerHeader() {
    Drawer__classCallCheck(this, TemporaryDrawerHeader);

    var _this3 = Drawer__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "temporary-drawer__header";
    return _this3;
  }

  TemporaryDrawerHeader.prototype.materialDom = function materialDom(props) {
    var _this4 = this;

    return Object(preact_min["h"])("header", Drawer__extends({
      ref: function ref(control) {
        _this4.control = control;
      }
    }, props), Object(preact_min["h"])("div", { className: "mdc-temporary-drawer__header-content" }, props.children));
  };

  return TemporaryDrawerHeader;
}(MaterialComponent_MaterialComponent);

var Drawer_TemporaryDrawerContent = function (_MaterialComponent3) {
  Drawer__inherits(TemporaryDrawerContent, _MaterialComponent3);

  function TemporaryDrawerContent() {
    Drawer__classCallCheck(this, TemporaryDrawerContent);

    var _this5 = Drawer__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this5.componentName = "temporary-drawer__content";
    return _this5;
  }

  TemporaryDrawerContent.prototype.materialDom = function materialDom(props) {
    var _this6 = this;

    return Object(preact_min["h"])("nav", Drawer__extends({
      className: "mdc-list",
      ref: function ref(control) {
        _this6.control = control;
      }
    }, props), props.children);
  };

  return TemporaryDrawerContent;
}(MaterialComponent_MaterialComponent);

/**
 * @prop spacer = false
 */


var Drawer_PermanentDrawer = function (_MaterialComponent4) {
  Drawer__inherits(PermanentDrawer, _MaterialComponent4);

  function PermanentDrawer() {
    Drawer__classCallCheck(this, PermanentDrawer);

    var _this7 = Drawer__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this7.componentName = "permanent-drawer";
    return _this7;
  }

  PermanentDrawer.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("nav", Drawer__extends({ className: "mdc-typography" }, props), props.spacer && Object(preact_min["h"])("div", { className: "mdc-permanent-drawer__toolbar-spacer" }), Object(preact_min["h"])("div", { className: "mdc-permanent-drawer__content" }, Object(preact_min["h"])("nav", { className: "mdc-list" }, props.children)));
  };

  return PermanentDrawer;
}(MaterialComponent_MaterialComponent);

var Drawer_PermanentDrawerHeader = function (_MaterialComponent5) {
  Drawer__inherits(PermanentDrawerHeader, _MaterialComponent5);

  function PermanentDrawerHeader() {
    Drawer__classCallCheck(this, PermanentDrawerHeader);

    var _this8 = Drawer__possibleConstructorReturn(this, _MaterialComponent5.call(this));

    _this8.componentName = "permanent-drawer__header";
    return _this8;
  }

  PermanentDrawerHeader.prototype.materialDom = function materialDom(props) {
    var _this9 = this;

    return Object(preact_min["h"])("header", Drawer__extends({
      ref: function ref(control) {
        _this9.control = control;
      }
    }, props), Object(preact_min["h"])("div", { className: "mdc-permanent-drawer__header-content" }, props.children));
  };

  return PermanentDrawerHeader;
}(MaterialComponent_MaterialComponent);

var PermanentDrawerContent = function (_TemporaryDrawerConte) {
  Drawer__inherits(PermanentDrawerContent, _TemporaryDrawerConte);

  function PermanentDrawerContent() {
    Drawer__classCallCheck(this, PermanentDrawerContent);

    var _this10 = Drawer__possibleConstructorReturn(this, _TemporaryDrawerConte.call(this));

    _this10.componentName = "permanent-drawer__content";
    return _this10;
  }

  return PermanentDrawerContent;
}(Drawer_TemporaryDrawerContent);

var Drawer_PersistentDrawer = function (_MaterialComponent6) {
  Drawer__inherits(PersistentDrawer, _MaterialComponent6);

  function PersistentDrawer() {
    Drawer__classCallCheck(this, PersistentDrawer);

    var _this11 = Drawer__possibleConstructorReturn(this, _MaterialComponent6.call(this));

    _this11.componentName = "persistent-drawer";
    _this11._open = _this11._open.bind(_this11);
    _this11._close = _this11._close.bind(_this11);
    return _this11;
  }

  PersistentDrawer.prototype._open = function _open() {
    if (this.props.onOpen) {
      this.props.onOpen();
    }
  };

  PersistentDrawer.prototype._close = function _close() {
    if (this.props.onClose) {
      this.props.onClose();
    }
  };

  PersistentDrawer.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = persistent_MDCPersistentDrawer.attachTo(this.control);
    this.MDComponent.listen("MDCPersistentDrawer:open", this._open);
    this.MDComponent.listen("MDCPersistentDrawer:close", this._close);
    toggleDrawer(Drawer_defaultProps, this.props, this.MDComponent);
  };

  PersistentDrawer.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCPersistentDrawer:close", this._close);
    this.MDComponent.unlisten("MDCPersistentDrawer:open", this._open);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  PersistentDrawer.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    toggleDrawer(this.props, nextProps, this.MDComponent);
  };

  PersistentDrawer.prototype.materialDom = function materialDom(props) {
    var _this12 = this;

    return Object(preact_min["h"])("aside", Drawer__extends({
      className: "mdc-typography",
      ref: function ref(control) {
        _this12.control = control;
      }
    }, props), Object(preact_min["h"])("nav", { className: "mdc-persistent-drawer__drawer" }));
  };

  return PersistentDrawer;
}(MaterialComponent_MaterialComponent);

var Drawer_PersistentDrawerHeader = function (_MaterialComponent7) {
  Drawer__inherits(PersistentDrawerHeader, _MaterialComponent7);

  function PersistentDrawerHeader() {
    Drawer__classCallCheck(this, PersistentDrawerHeader);

    var _this13 = Drawer__possibleConstructorReturn(this, _MaterialComponent7.call(this));

    _this13.componentName = "persistent-drawer__header";
    return _this13;
  }

  PersistentDrawerHeader.prototype.materialDom = function materialDom(props) {
    var _this14 = this;

    return Object(preact_min["h"])("header", Drawer__extends({
      ref: function ref(control) {
        _this14.control = control;
      }
    }, props), Object(preact_min["h"])("div", { className: "mdc-persistent-drawer__header-content" }, props.children));
  };

  return PersistentDrawerHeader;
}(MaterialComponent_MaterialComponent);

var PersistentDrawerContent = function (_TemporaryDrawerConte2) {
  Drawer__inherits(PersistentDrawerContent, _TemporaryDrawerConte2);

  function PersistentDrawerContent() {
    Drawer__classCallCheck(this, PersistentDrawerContent);

    var _this15 = Drawer__possibleConstructorReturn(this, _TemporaryDrawerConte2.call(this));

    _this15.componentName = "persistent-drawer__content";
    return _this15;
  }

  return PersistentDrawerContent;
}(Drawer_TemporaryDrawerContent);

/**
 * @prop selected = false
 */


var DrawerItem = function (_List$LinkItem) {
  Drawer__inherits(DrawerItem, _List$LinkItem);

  function DrawerItem() {
    Drawer__classCallCheck(this, DrawerItem);

    return Drawer__possibleConstructorReturn(this, _List$LinkItem.call(this));
  }

  DrawerItem.prototype.materialDom = function materialDom(props) {
    var returnedNode = _List$LinkItem.prototype.materialDom.call(this, props);
    /* Logic to add selected class */
    if (props.selected) {
      returnedNode.attributes["className"] = "mdc-temporary-drawer--selected mdc-permanent-drawer--selected";
    }
    return returnedNode;
  };

  return DrawerItem;
}(preact_material_components_List.LinkItem);

/*
 * Function to add declarative opening/closing to drawer
 */


function toggleDrawer(oldprops, newprops, drawer) {
  if ("open" in oldprops && "open" in newprops && oldprops.open !== newprops.open) {
    drawer.open = newprops.open;
  }
}

var Drawer = {};

Drawer.DrawerItem = DrawerItem;
Drawer.TemporaryDrawer = Drawer_TemporaryDrawer;
Drawer.TemporaryDrawerHeader = Drawer_TemporaryDrawerHeader;
Drawer.TemporaryDrawerContent = Drawer_TemporaryDrawerContent;
Drawer.PermanentDrawer = Drawer_PermanentDrawer;
Drawer.PermanentDrawerHeader = Drawer_PermanentDrawerHeader;
Drawer.PermanentDrawerContent = PermanentDrawerContent;
Drawer.PersistentDrawer = Drawer_PersistentDrawer;
Drawer.PersistentDrawerHeader = Drawer_PersistentDrawerHeader;
Drawer.PersistentDrawerContent = PersistentDrawerContent;

/* harmony default export */ var preact_material_components_Drawer = (Drawer);
// EXTERNAL MODULE: ./routes/drawer/style.scss
var drawer_style = __webpack_require__("riNH");
var drawer_style_default = /*#__PURE__*/__webpack_require__.n(drawer_style);

// EXTERNAL MODULE: ./routes/drawer/sample.txt
var drawer_sample = __webpack_require__("WeSf");
var drawer_sample_default = /*#__PURE__*/__webpack_require__.n(drawer_sample);

// CONCATENATED MODULE: ./routes/drawer/index.js


function drawer__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function drawer__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function drawer__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components






// Components




// Styles


// Samples


// Class

var drawer__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var drawer__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    drawer_sample_default.a
  )
);

var drawer__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var drawer__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-drawer"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-drawer" },
    " ",
    "here"
  ),
  "."
);

var drawer__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var drawer__ref6 = Object(preact_min["h"])(
  preact_material_components_Drawer.TemporaryDrawerHeader,
  { className: "mdc-theme--primary-bg" },
  "Components"
);

var drawer__ref7 = Object(preact_min["h"])(
  preact_material_components_Drawer.TemporaryDrawerContent,
  null,
  Object(preact_min["h"])(
    preact_material_components_List,
    null,
    Object(preact_min["h"])(
      preact_material_components_List.LinkItem,
      null,
      Object(preact_min["h"])(
        preact_material_components_List.ItemIcon,
        null,
        "home"
      ),
      "Home"
    )
  )
);

var drawer_DrawerPage = function (_Component) {
  drawer__inherits(DrawerPage, _Component);

  function DrawerPage() {
    drawer__classCallCheck(this, DrawerPage);

    var _this = drawer__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Drawer.TemporaryDrawer",
      props: []
    }, {
      component: "Drawer.TemporaryDrawerHeader",
      props: []
    }, {
      component: "Drawer.TemporaryDrawerContent",
      props: []
    }, {
      component: "Drawer.DrawerItem",
      props: [{
        name: "selected",
        description: "Tells if the drawer item is selected."
      }]
    }, {
      component: "Drawer.PermanentDrawer",
      props: [{
        name: "spacer",
        description: "Teels if the tollbar height equivalent spacer is required."
      }]
    }];
    _this.eventsTable = [{
      name: "onOpen",
      description: "Fired when the drawer is opened."
    }, {
      name: "onClose",
      description: "Fired when the drawer is closed."
    }];
    _this.state = {
      drawerOpened: false
    };
    return _this;
  }

  DrawerPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      Object(preact_min["h"])(events_table_EventsTable, { data: this.eventsTable }),
      drawer__ref,
      drawer__ref2,
      drawer__ref3,
      drawer__ref4,
      drawer__ref5,
      Object(preact_min["h"])(
        preact_material_components_Button,
        {
          primary: true,
          raised: true,
          onClick: function onClick() {
            _this2.setState({
              drawerOpened: !_this2.state.drawerOpened
            });
          }
        },
        "Toggle Drawer"
      ),
      Object(preact_min["h"])(
        "div",
        { className: "demo-drawer" },
        Object(preact_min["h"])(
          preact_material_components_Drawer.TemporaryDrawer,
          {
            open: this.state.drawerOpened,
            onClose: function onClose() {
              _this2.setState({
                drawerOpened: false
              });
            }
          },
          drawer__ref6,
          drawer__ref7
        )
      )
    );
  };

  return DrawerPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Elevation/index.js
function Elevation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Elevation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Elevation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Elevation__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};




/**
 * @prop mini = false
 * @prop plain = false
 */

var Elevation_Elevation = function (_MaterialComponent) {
  Elevation__inherits(Elevation, _MaterialComponent);

  function Elevation() {
    Elevation__classCallCheck(this, Elevation);

    var _this = Elevation__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "elevation";
    _this._mdcProps = [];
    for (var elevationIndex = 0; elevationIndex < 25; elevationIndex++) {
      _this._mdcProps.push("z" + elevationIndex);
    }
    return _this;
  }

  Elevation.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    var className = "";
    if (props.z) {
      className = "mdc-elevation--z" + props.z;
    }
    return Object(preact_min["h"])("p", Elevation__extends({
      className: className
    }, props, {
      ref: function ref(control) {
        return _this2.control = control;
      }
    }), props.children);
  };

  return Elevation;
}(MaterialComponent_MaterialComponent);


// EXTERNAL MODULE: ./routes/elevation/style.scss
var elevation_style = __webpack_require__("56Xb");
var elevation_style_default = /*#__PURE__*/__webpack_require__.n(elevation_style);

// EXTERNAL MODULE: ./routes/elevation/sample.txt
var elevation_sample = __webpack_require__("Bfdu");
var elevation_sample_default = /*#__PURE__*/__webpack_require__.n(elevation_sample);

// CONCATENATED MODULE: ./routes/elevation/index.js


function elevation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function elevation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function elevation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Samples


// Class

var elevation__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var elevation__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    elevation_sample_default.a
  )
);

var elevation__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var elevation__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-elevation"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-elevation" },
    " ",
    "here"
  ),
  "."
);

var elevation__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var elevation__ref6 = Object(preact_min["h"])(
  Elevation_Elevation,
  { z: 0 },
  "Z0"
);

var elevation__ref7 = Object(preact_min["h"])(
  Elevation_Elevation,
  { z: 1 },
  "Z1"
);

var elevation__ref8 = Object(preact_min["h"])(
  Elevation_Elevation,
  { z: 2 },
  "Z2"
);

var elevation__ref9 = Object(preact_min["h"])(
  Elevation_Elevation,
  { z: 3 },
  "Z3"
);

var elevation__ref10 = Object(preact_min["h"])(
  Elevation_Elevation,
  { z: 4 },
  "Z4"
);

var elevation_ElevationPage = function (_Component) {
  elevation__inherits(ElevationPage, _Component);

  function ElevationPage() {
    elevation__classCallCheck(this, ElevationPage);

    var _this = elevation__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Elevation",
      props: [{
        name: "z",
        value: "1 to 25",
        description: "Add z=(1 to 25) to get different elevations."
      }]
    }];
    return _this;
  }

  ElevationPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-elevation" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      elevation__ref,
      elevation__ref2,
      elevation__ref3,
      elevation__ref4,
      elevation__ref5,
      elevation__ref6,
      elevation__ref7,
      elevation__ref8,
      elevation__ref9,
      elevation__ref10
    );
  };

  return ElevationPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Fab/index.js
function Fab__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Fab__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Fab__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Fab__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





/**
 * @prop mini = false
 * @prop exited = false
 */

var Fab_Fab = function (_MaterialComponent) {
  Fab__inherits(Fab, _MaterialComponent);

  function Fab() {
    Fab__classCallCheck(this, Fab);

    var _this = Fab__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "fab";
    _this._mdcProps = ["mini", "exited"];
    return _this;
  }

  Fab.prototype.componentDidMount = function componentDidMount() {
    _MaterialComponent.prototype.attachRipple.call(this);
  };

  Fab.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("button", Fab__extends({}, props, { ref: function ref(control) {
        return _this2.control = control;
      } }), props.children);
  };

  return Fab;
}(MaterialComponent_MaterialComponent);

var FabIcon = function (_Icon) {
  Fab__inherits(FabIcon, _Icon);

  function FabIcon() {
    Fab__classCallCheck(this, FabIcon);

    var _this3 = Fab__possibleConstructorReturn(this, _Icon.call(this));

    _this3.componentName = "fab__icon";
    return _this3;
  }

  return FabIcon;
}(Icon_Icon);

Fab_Fab.Icon = FabIcon;
/* harmony default export */ var preact_material_components_Fab = (Fab_Fab);
// EXTERNAL MODULE: ./routes/fab/style.scss
var fab_style = __webpack_require__("6Np5");
var fab_style_default = /*#__PURE__*/__webpack_require__.n(fab_style);

// EXTERNAL MODULE: ./routes/fab/sample.txt
var fab_sample = __webpack_require__("bKgJ");
var fab_sample_default = /*#__PURE__*/__webpack_require__.n(fab_sample);

// CONCATENATED MODULE: ./routes/fab/index.js


function fab__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function fab__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function fab__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Samples


// Class

var fab__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var fab__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    fab_sample_default.a
  )
);

var fab__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var fab__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-fab"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-fab" },
    " ",
    "here"
  ),
  "."
);

var fab__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var fab__ref6 = Object(preact_min["h"])(
  preact_material_components_Fab,
  null,
  Object(preact_min["h"])(
    preact_material_components_Fab.Icon,
    null,
    "favorite_border"
  )
);

var fab__ref7 = Object(preact_min["h"])(
  preact_material_components_Fab,
  { ripple: true },
  Object(preact_min["h"])(
    preact_material_components_Fab.Icon,
    null,
    "favorite_border"
  )
);

var fab__ref8 = Object(preact_min["h"])(
  preact_material_components_Fab,
  { mini: true },
  Object(preact_min["h"])(
    preact_material_components_Fab.Icon,
    null,
    "favorite_border"
  )
);

var fab__ref9 = Object(preact_min["h"])(
  preact_material_components_Fab.Icon,
  null,
  "directions_run"
);

var fab_FabPage = function (_Component) {
  fab__inherits(FabPage, _Component);

  function FabPage() {
    fab__classCallCheck(this, FabPage);

    var _this = fab__possibleConstructorReturn(this, _Component.call(this));

    _this.state = {
      fabShowing: true
    };
    _this.propsTable = [{
      component: "Fab",
      props: [{
        name: "ripple",
        description: "Adds riple effect to the fab."
      }, {
        name: "exited",
        description: "Adds exited animated effect to fab."
      }, {
        name: "mini",
        description: "Shrinks the size of the fab."
      }]
    }];
    return _this;
  }

  FabPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      { className: "page-fab" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      fab__ref,
      fab__ref2,
      fab__ref3,
      fab__ref4,
      fab__ref5,
      fab__ref6,
      Object(preact_min["h"])(
        "div",
        null,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "<Fab><Fab.Icon>favorite_border</Fab.Icon></Fab>"
          )
        )
      ),
      fab__ref7,
      Object(preact_min["h"])(
        "div",
        null,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "<Fab ripple={true}><Fab.Icon>favorite_border</Fab.Icon></Fab>"
          )
        )
      ),
      fab__ref8,
      Object(preact_min["h"])(
        "div",
        null,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "<Fab mini={true}><Fab.Icon>favorite_border</Fab.Icon></Fab>"
          )
        )
      ),
      Object(preact_min["h"])(
        preact_material_components_Fab,
        {
          exited: !this.state.fabShowing,
          onClick: function onClick() {
            _this2.setState({
              fabShowing: false
            });
          }
        },
        fab__ref9
      ),
      Object(preact_min["h"])(
        "div",
        null,
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-html" },
            "<Fab exited><Fab.Icon>directions_run</Fab.Icon></Fab>"
          )
        )
      )
    );
  };

  return FabPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/radio/adapter.js
function radio_adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */


/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Radio. Provides an interface for managing
 * - classes
 * - dom
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */

var MDCRadioAdapter = function () {
  function MDCRadioAdapter() {
    radio_adapter__classCallCheck(this, MDCRadioAdapter);
  }

  /** @param {string} className */
  MDCRadioAdapter.prototype.addClass = function addClass(className) {};

  /** @param {string} className */


  MDCRadioAdapter.prototype.removeClass = function removeClass(className) {};

  /** @return {!MDCSelectionControlState} */


  MDCRadioAdapter.prototype.getNativeControl = function getNativeControl() {};

  return MDCRadioAdapter;
}();

/* harmony default export */ var radio_adapter = (MDCRadioAdapter);
// CONCATENATED MODULE: ../node_modules/@material/radio/constants.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
var radio_constants_strings = {
  NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control'
};

/** @enum {string} */
var radio_constants_cssClasses = {
  ROOT: 'mdc-radio',
  DISABLED: 'mdc-radio--disabled'
};


// CONCATENATED MODULE: ../node_modules/@material/radio/foundation.js
var radio_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function radio_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function radio_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function radio_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* eslint-disable no-unused-vars */


/* eslint-enable no-unused-vars */


/**
 * @extends {MDCFoundation<!MDCRadioAdapter>}
 */

var foundation_MDCRadioFoundation = function (_MDCFoundation) {
  radio_foundation__inherits(MDCRadioFoundation, _MDCFoundation);

  function MDCRadioFoundation() {
    radio_foundation__classCallCheck(this, MDCRadioFoundation);

    return radio_foundation__possibleConstructorReturn(this, _MDCFoundation.apply(this, arguments));
  }

  /** @return {boolean} */
  MDCRadioFoundation.prototype.isChecked = function isChecked() {
    return this.getNativeControl_().checked;
  };

  /** @param {boolean} checked */


  MDCRadioFoundation.prototype.setChecked = function setChecked(checked) {
    this.getNativeControl_().checked = checked;
  };

  /** @return {boolean} */


  MDCRadioFoundation.prototype.isDisabled = function isDisabled() {
    return this.getNativeControl_().disabled;
  };

  /** @param {boolean} disabled */


  MDCRadioFoundation.prototype.setDisabled = function setDisabled(disabled) {
    var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;

    this.getNativeControl_().disabled = disabled;
    if (disabled) {
      this.adapter_.addClass(DISABLED);
    } else {
      this.adapter_.removeClass(DISABLED);
    }
  };

  /** @return {?string} */


  MDCRadioFoundation.prototype.getValue = function getValue() {
    return this.getNativeControl_().value;
  };

  /** @param {?string} value */


  MDCRadioFoundation.prototype.setValue = function setValue(value) {
    this.getNativeControl_().value = value;
  };

  /**
   * @return {!MDCSelectionControlState}
   * @private
   */


  MDCRadioFoundation.prototype.getNativeControl_ = function getNativeControl_() {
    return this.adapter_.getNativeControl() || {
      checked: false,
      disabled: false,
      value: null
    };
  };

  radio_foundation__createClass(MDCRadioFoundation, null, [{
    key: 'cssClasses',

    /** @return enum {cssClasses} */
    get: function get() {
      return radio_constants_cssClasses;
    }

    /** @return enum {strings} */

  }, {
    key: 'strings',
    get: function get() {
      return radio_constants_strings;
    }

    /** @return {!MDCRadioAdapter} */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCRadioAdapter} */{
          addClass: function addClass() /* className: string */{},
          removeClass: function removeClass() /* className: string */{},
          getNativeControl: function getNativeControl() /* !MDCSelectionControlState */{}
        }
      );
    }
  }]);

  return MDCRadioFoundation;
}(base_foundation);

/* harmony default export */ var radio_foundation = (foundation_MDCRadioFoundation);
// CONCATENATED MODULE: ../node_modules/@material/radio/index.js
var radio__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var radio__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function radio__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function radio__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function radio__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* eslint-disable no-unused-vars */

/* eslint-enable no-unused-vars */



/**
 * @extends MDCComponent<!MDCRadioFoundation>
 * @implements {MDCSelectionControl}
 */

var radio_MDCRadio = function (_MDCComponent) {
  radio__inherits(MDCRadio, _MDCComponent);

  MDCRadio.attachTo = function attachTo(root) {
    return new MDCRadio(root);
  };

  /** @return {boolean} */


  radio__createClass(MDCRadio, [{
    key: 'checked',
    get: function get() {
      return this.foundation_.isChecked();
    }

    /** @param {boolean} checked */
    ,
    set: function set(checked) {
      this.foundation_.setChecked(checked);
    }

    /** @return {boolean} */

  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    }

    /** @param {boolean} disabled */
    ,
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }

    /** @return {?string} */

  }, {
    key: 'value',
    get: function get() {
      return this.foundation_.getValue();
    }

    /** @param {?string} value */
    ,
    set: function set(value) {
      this.foundation_.setValue(value);
    }

    /** @return {!MDCRipple} */

  }, {
    key: 'ripple',
    get: function get() {
      return this.ripple_;
    }
  }]);

  function MDCRadio() {
    radio__classCallCheck(this, MDCRadio);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!MDCRipple} */
    var _this = radio__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.ripple_ = _this.initRipple_();
    return _this;
  }

  /**
   * @return {!MDCRipple}
   * @private
   */


  MDCRadio.prototype.initRipple_ = function initRipple_() {
    var _this2 = this;

    var adapter = radio__extends(ripple_MDCRipple.createAdapter(this), {
      isUnbounded: function isUnbounded() {
        return true;
      },
      // Radio buttons technically go "active" whenever there is *any* keyboard interaction. This is not the
      // UI we desire.
      isSurfaceActive: function isSurfaceActive() {
        return false;
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return _this2.nativeControl_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return _this2.nativeControl_.removeEventListener(type, handler);
      },
      computeBoundingRect: function computeBoundingRect() {
        var _root_$getBoundingCli = _this2.root_.getBoundingClientRect(),
            left = _root_$getBoundingCli.left,
            top = _root_$getBoundingCli.top;

        var DIM = 40;
        return {
          top: top,
          left: left,
          right: left + DIM,
          bottom: top + DIM,
          width: DIM,
          height: DIM
        };
      }
    });
    var foundation = new ripple_foundation(adapter);
    return new ripple_MDCRipple(this.root_, foundation);
  };

  /**
   * Returns the state of the native control element, or null if the native control element is not present.
   * @return {?MDCSelectionControlState}
   * @private
   */


  MDCRadio.prototype.destroy = function destroy() {
    this.ripple_.destroy();
    _MDCComponent.prototype.destroy.call(this);
  };

  /** @return {!MDCRadioFoundation} */


  MDCRadio.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this3 = this;

    return new radio_foundation({
      addClass: function addClass(className) {
        return _this3.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this3.root_.classList.remove(className);
      },
      getNativeControl: function getNativeControl() {
        return _this3.root_.querySelector(radio_foundation.strings.NATIVE_CONTROL_SELECTOR);
      }
    });
  };

  radio__createClass(MDCRadio, [{
    key: 'nativeControl_',
    get: function get() {
      var NATIVE_CONTROL_SELECTOR = radio_foundation.strings.NATIVE_CONTROL_SELECTOR;

      var el = /** @type {?MDCSelectionControlState} */this.root_.querySelector(NATIVE_CONTROL_SELECTOR);
      return el;
    }
  }]);

  return MDCRadio;
}(base_component);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Radio/index.js
function Radio__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Radio__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Radio__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Radio__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function Radio__objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}





/*
 * Default props for check box
 */
var Radio_defaultProps = {
  checked: false
};

/**
 * @prop mini = false
 * @prop plain = false
 */

var Radio_Radio = function (_MaterialComponent) {
  Radio__inherits(Radio, _MaterialComponent);

  function Radio() {
    Radio__classCallCheck(this, Radio);

    var _this = Radio__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "radio";
    return _this;
  }

  Radio.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = radio_MDCRadio.attachTo(this.control);
    toggleRadio(Radio_defaultProps, this.props, this.MDComponent);
  };

  Radio.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Radio.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    toggleRadio(this.props, nextProps, this.MDComponent);
  };

  Radio.prototype.materialDom = function materialDom(allprops) {
    var _this2 = this;

    var className = allprops.className,
        props = Radio__objectWithoutProperties(allprops, ["className"]);

    return Object(preact_min["h"])("div", {
      className: className,
      ref: function ref(control) {
        _this2.control = control;
      }
    }, Object(preact_min["h"])("input", Radio__extends({ className: "mdc-radio__native-control", type: "radio" }, props)), Object(preact_min["h"])("div", { className: "mdc-radio__background" }, Object(preact_min["h"])("div", { className: "mdc-radio__outer-circle" }), Object(preact_min["h"])("div", { className: "mdc-radio__inner-circle" })));
  };

  return Radio;
}(MaterialComponent_MaterialComponent);

/*
 * Function to add declarative checked to radio
 */



function toggleRadio(oldprops, newprops, radio) {
  if ("checked" in oldprops && "checked" in newprops && oldprops.checked !== newprops.checked) {
    radio.checked = newprops.checked;
  }
}
// EXTERNAL MODULE: ./routes/form-field/sample.txt
var form_field_sample = __webpack_require__("6X9X");
var form_field_sample_default = /*#__PURE__*/__webpack_require__.n(form_field_sample);

// CONCATENATED MODULE: ./routes/form-field/index.js


function form_field__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function form_field__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function form_field__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components



// Components



// Samples


// Class

var form_field__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code"
);

var form_field__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    form_field_sample_default.a
  )
);

var form_field__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var form_field__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-form-field"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-form-field" },
    " ",
    "here"
  ),
  "."
);

var form_field__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo"
);

var form_field__ref6 = Object(preact_min["h"])(
  Formfield,
  null,
  Object(preact_min["h"])(Radio_Radio, { id: "r1", name: "opts" }),
  Object(preact_min["h"])(
    "label",
    { "for": "r1" },
    "Radio 1"
  )
);

var form_field_FormFieldPage = function (_Component) {
  form_field__inherits(FormFieldPage, _Component);

  function FormFieldPage() {
    form_field__classCallCheck(this, FormFieldPage);

    var _this = form_field__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Formfield",
      props: []
    }];
    return _this;
  }

  FormFieldPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      form_field__ref,
      form_field__ref2,
      form_field__ref3,
      form_field__ref4,
      form_field__ref5,
      form_field__ref6
    );
  };

  return FormFieldPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/preact-material-components/GridList/index.js
var GridList__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function GridList__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function GridList__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function GridList__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GridList__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





var notEmptyString = function notEmptyString(val) {
  return val !== "";
};

/**
 * @prop tile-gutter-1 {boolean} - use 1px gutter (default is 4px)
 * @prop header-caption {boolean} - position <GridList.SecondaryTile> at top
 * @prop twoline-caption {boolean} - add spacing to <GridList.SecondaryTile> for <GridList.SupportTextTile>
 * @prop with-icon-align {"start"|"end"} - position <GridList.IconTile> at beginning or end of <GridList.SecondaryTile>
 * @prop aspect-ratio {"1x1"|"16x9"|"2x3"|"3x2"|"4x3"|"3x4"} - aspect ratio for <GridList.PrimaryTile>
 */

var GridList_GridList = function (_MaterialComponent) {
  GridList__inherits(GridList, _MaterialComponent);

  GridList.prototype.isValidValue = function isValidValue(validationValues, testValue) {
    return validationValues && validationValues.findIndex(function (val) {
      return val === testValue;
    }) >= 0;
  };

  GridList__createClass(GridList, [{
    key: "validationValuesByKey",
    get: function get() {
      return {
        "with-icon-align": ["start", "end"],
        "tile-aspect": ["1x1", "16x9", "2x3", "3x2", "4x3", "3x4"]
      };
    }
  }]);

  function GridList() {
    GridList__classCallCheck(this, GridList);

    var _this = GridList__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "grid-list";
    _this._mdcProps = ["header-caption", "twoline-caption", "tile-gutter-1"];
    return _this;
  }

  GridList.prototype.mapClassName = function mapClassName(propKey, props) {
    var propValue = props[propKey];
    var validationValues = this.validationValuesByKey[propKey];

    return this.isValidValue(validationValues, propValue) ? "mdc-" + this.componentName + "--" + propKey + "-" + propValue : "";
  };

  GridList.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    var className = Object.keys(this.validationValuesByKey).map(function (key) {
      return _this2.mapClassName(key, props);
    }).filter(notEmptyString).join(" ");

    return Object(preact_min["h"])("div", GridList__extends({}, props, { className: className }), props.children);
  };

  return GridList;
}(MaterialComponent_MaterialComponent);

var GridList_GridListTiles = function (_MaterialComponent2) {
  GridList__inherits(GridListTiles, _MaterialComponent2);

  function GridListTiles() {
    GridList__classCallCheck(this, GridListTiles);

    var _this3 = GridList__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "grid-list__tiles";
    return _this3;
  }

  GridListTiles.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("ul", props, props.children);
  };

  return GridListTiles;
}(MaterialComponent_MaterialComponent);

var GridList_GridListTile = function (_MaterialComponent3) {
  GridList__inherits(GridListTile, _MaterialComponent3);

  function GridListTile() {
    GridList__classCallCheck(this, GridListTile);

    var _this4 = GridList__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this4.componentName = "grid-tile";
    return _this4;
  }

  GridListTile.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("li", props, props.children);
  };

  return GridListTile;
}(MaterialComponent_MaterialComponent);

var GridList_GridListPrimaryTile = function (_MaterialComponent4) {
  GridList__inherits(GridListPrimaryTile, _MaterialComponent4);

  function GridListPrimaryTile() {
    GridList__classCallCheck(this, GridListPrimaryTile);

    var _this5 = GridList__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this5.componentName = "grid-tile__primary";
    return _this5;
  }

  GridListPrimaryTile.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("div", props, props.children);
  };

  return GridListPrimaryTile;
}(MaterialComponent_MaterialComponent);

var GridList_GridListPrimaryContentTile = function (_MaterialComponent5) {
  GridList__inherits(GridListPrimaryContentTile, _MaterialComponent5);

  function GridListPrimaryContentTile() {
    GridList__classCallCheck(this, GridListPrimaryContentTile);

    var _this6 = GridList__possibleConstructorReturn(this, _MaterialComponent5.call(this));

    _this6.componentName = "grid-tile__primary-content";
    return _this6;
  }

  GridListPrimaryContentTile.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("img", props);
  };

  return GridListPrimaryContentTile;
}(MaterialComponent_MaterialComponent);

var GridList_GridListSecondaryTile = function (_MaterialComponent6) {
  GridList__inherits(GridListSecondaryTile, _MaterialComponent6);

  function GridListSecondaryTile() {
    GridList__classCallCheck(this, GridListSecondaryTile);

    var _this7 = GridList__possibleConstructorReturn(this, _MaterialComponent6.call(this));

    _this7.componentName = "grid-tile__secondary";
    return _this7;
  }

  GridListSecondaryTile.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("span", props, props.children);
  };

  return GridListSecondaryTile;
}(MaterialComponent_MaterialComponent);

var GridList_GridListTitleTile = function (_MaterialComponent7) {
  GridList__inherits(GridListTitleTile, _MaterialComponent7);

  function GridListTitleTile() {
    GridList__classCallCheck(this, GridListTitleTile);

    var _this8 = GridList__possibleConstructorReturn(this, _MaterialComponent7.call(this));

    _this8.componentName = "grid-tile__title";
    return _this8;
  }

  GridListTitleTile.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("span", props, props.children);
  };

  return GridListTitleTile;
}(MaterialComponent_MaterialComponent);

var GridList_GridListSupportTextTile = function (_MaterialComponent8) {
  GridList__inherits(GridListSupportTextTile, _MaterialComponent8);

  function GridListSupportTextTile() {
    GridList__classCallCheck(this, GridListSupportTextTile);

    var _this9 = GridList__possibleConstructorReturn(this, _MaterialComponent8.call(this));

    _this9.componentName = "grid-tile__support-text";
    return _this9;
  }

  GridListSupportTextTile.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("span", props, props.children);
  };

  return GridListSupportTextTile;
}(MaterialComponent_MaterialComponent);

var GridListIconTile = function (_Icon) {
  GridList__inherits(GridListIconTile, _Icon);

  function GridListIconTile() {
    GridList__classCallCheck(this, GridListIconTile);

    var _this10 = GridList__possibleConstructorReturn(this, _Icon.call(this));

    _this10.componentName = "grid-tile__icon";
    return _this10;
  }

  return GridListIconTile;
}(Icon_Icon);

GridList_GridList.Tiles = GridList_GridListTiles;
GridList_GridList.Tile = GridList_GridListTile;
GridList_GridList.PrimaryTile = GridList_GridListPrimaryTile;
GridList_GridList.PrimaryContentTile = GridList_GridListPrimaryContentTile;
GridList_GridList.SecondaryTile = GridList_GridListSecondaryTile;
GridList_GridList.TitleTile = GridList_GridListTitleTile;
GridList_GridList.SupportTextTile = GridList_GridListSupportTextTile;
GridList_GridList.IconTile = GridListIconTile;

/* harmony default export */ var preact_material_components_GridList = (GridList_GridList);
// EXTERNAL MODULE: ./routes/grid-list/sample.txt
var grid_list_sample = __webpack_require__("1hb7");
var grid_list_sample_default = /*#__PURE__*/__webpack_require__.n(grid_list_sample);

// CONCATENATED MODULE: ./routes/grid-list/index.js


function grid_list__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function grid_list__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function grid_list__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Samples


// Class

var grid_list__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code"
);

var grid_list__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    grid_list_sample_default.a
  )
);

var grid_list__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var grid_list__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-grid-list"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-grid-list" },
    " ",
    "here"
  ),
  "."
);

var grid_list__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo"
);

var grid_list__ref6 = Object(preact_min["h"])(
  preact_material_components_GridList.PrimaryTile,
  null,
  Object(preact_min["h"])(preact_material_components_GridList.PrimaryContentTile, { src: "../../../images/GridListTileSample.png" })
);

var grid_list__ref7 = Object(preact_min["h"])(
  preact_material_components_GridList.TitleTile,
  null,
  "Tile One"
);

var grid_list__ref8 = Object(preact_min["h"])(
  preact_material_components_GridList.SupportTextTile,
  null,
  "subheading one"
);

var grid_list__ref9 = Object(preact_min["h"])(
  preact_material_components_GridList.PrimaryTile,
  null,
  Object(preact_min["h"])(preact_material_components_GridList.PrimaryContentTile, { src: "../../../images/GridListTileSample.png" })
);

var grid_list__ref10 = Object(preact_min["h"])(
  preact_material_components_GridList.TitleTile,
  null,
  "Tile Two"
);

var grid_list__ref11 = Object(preact_min["h"])(
  preact_material_components_GridList.SupportTextTile,
  null,
  "subheading two"
);

var grid_list_GridListPage = function (_Component) {
  grid_list__inherits(GridListPage, _Component);

  function GridListPage() {
    grid_list__classCallCheck(this, GridListPage);

    var _this = grid_list__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "GridList",
      props: [{
        name: "tile-gutter-1",
        description: "use 1px gutter (default is 4px)"
      }, {
        name: "header-caption",
        description: "position <GridList.SecondaryTile> at top"
      }, {
        name: "twoline-caption",
        description: "add spacing to <GridList.SecondaryTile> for <GridList.SupportTextTile>"
      }, {
        name: "with-icon-align",
        value: "start, end",
        description: "position <GridList.IconTile> at beginning or end of <GridList.SecondaryTile>"
      }, {
        name: "aspect-ratio",
        value: "1x1, 16x9, 2x3, 3x2, 4x3, 3x4",
        description: "aspect ratio for <GridList.PrimaryTile>"
      }]
    }];
    return _this;
  }

  GridListPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      grid_list__ref,
      grid_list__ref2,
      grid_list__ref3,
      grid_list__ref4,
      grid_list__ref5,
      Object(preact_min["h"])(
        preact_material_components_GridList,
        {
          "header-caption": true,
          "with-icon-align": "end",
          "twoline-caption": true,
          "tile-gutter-1": true,
          "tile-aspect-ratio": "16x9"
        },
        Object(preact_min["h"])(
          preact_material_components_GridList.Tiles,
          null,
          Object(preact_min["h"])(
            preact_material_components_GridList.Tile,
            null,
            grid_list__ref6,
            Object(preact_min["h"])(
              preact_material_components_GridList.SecondaryTile,
              null,
              Object(preact_min["h"])(
                preact_material_components_GridList.IconTile,
                { onClick: function onClick() {
                    return console.log("Edit Tile");
                  } },
                "edit"
              ),
              grid_list__ref7,
              grid_list__ref8
            )
          ),
          Object(preact_min["h"])(
            preact_material_components_GridList.Tile,
            null,
            grid_list__ref9,
            Object(preact_min["h"])(
              preact_material_components_GridList.SecondaryTile,
              null,
              Object(preact_min["h"])(
                preact_material_components_GridList.IconTile,
                { onClick: function onClick() {
                    return console.log("Edit Tile");
                  } },
                "edit"
              ),
              grid_list__ref10,
              grid_list__ref11
            )
          )
        )
      )
    );
  };

  return GridListPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/home/invidual-component-sample.txt
var invidual_component_sample = __webpack_require__("g/3n");
var invidual_component_sample_default = /*#__PURE__*/__webpack_require__.n(invidual_component_sample);

// EXTERNAL MODULE: ./routes/home/js-sample.txt
var js_sample = __webpack_require__("8Edg");
var js_sample_default = /*#__PURE__*/__webpack_require__.n(js_sample);

// EXTERNAL MODULE: ./routes/home/css-sample.txt
var css_sample = __webpack_require__("FEFE");
var css_sample_default = /*#__PURE__*/__webpack_require__.n(css_sample);

// CONCATENATED MODULE: ./routes/home/index.js


function home__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function home__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function home__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components



// Components



// Samples




// Class

var home__ref = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    "div",
    { className: "mdc-typography--body" },
    Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(
        "a",
        { href: "https://github.com/prateekbh/preact-material-components" },
        Object(preact_min["h"])(
          "span",
          { className: "grey" },
          "preact-material-components"
        )
      ),
      " ",
      "is a thin opinionless wrapper around",
      " ",
      Object(preact_min["h"])(
        "a",
        { href: "https://github.com/material-components/material-components-web" },
        "material-components-web"
      ),
      ". Use these components to add material components to your web app, without worrying about the extra code of components which you are not using."
    ),
    Object(preact_min["h"])(
      "div",
      { className: "mdc-typography--display1" },
      "How to use"
    ),
    Object(preact_min["h"])(
      "div",
      null,
      "All the components of",
      " ",
      Object(preact_min["h"])(
        "span",
        { className: "grey" },
        "preact-material-components"
      ),
      " are built to work independently. So there are couple of ways to use them."
    ),
    Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(
        code_block,
        null,
        Object(preact_min["h"])(
          "code",
          { "class": "lang-js" },
          "npm i -D preact-material-components"
        )
      )
    ),
    Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(
        "div",
        { className: "mdc-typography--title" },
        "Using the JS of the component"
      ),
      Object(preact_min["h"])(
        "div",
        null,
        "If you are using an ES6 codebase, consider using the components individually, as none of the tree shaking currently removes unused classes.",
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-js" },
            js_sample_default.a
          )
        ),
        "Although you can import all the components together, you should not. Importing this way will bring unnecessary code of other components into your final bundle. This might hit your metrics like time to interactivity, load times, etc. DO NOT BLOAT YOUR BUNDLE.",
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-js" },
            invidual_component_sample_default.a
          )
        )
      )
    ),
    Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(
        "div",
        { className: "mdc-typography--title" },
        "Using the CSS of the component"
      ),
      Object(preact_min["h"])(
        "div",
        null,
        "If you are using only a couple of components from the entire package, try importing individual CSS, for the same reason: TO AVOID BLOATING YOUR CSS BUNDLE.",
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-js" },
            css_sample_default.a
          )
        ),
        "However this approach might work against you if you use a lot of components. In that case, prefer adding the entire stylesheet at once, as it is more optimized for such cases.",
        Object(preact_min["h"])(
          code_block,
          null,
          Object(preact_min["h"])(
            "code",
            { "class": "lang-js" },
            "import 'preact-material-components/style.css';"
          )
        )
      )
    )
  )
);

var home_FormFieldPage = function (_Component) {
  home__inherits(FormFieldPage, _Component);

  function FormFieldPage() {
    home__classCallCheck(this, FormFieldPage);

    var _this = home__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Formfield",
      props: []
    }];
    return _this;
  }

  FormFieldPage.prototype.render = function render() {
    return home__ref;
  };

  return FormFieldPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/icon/linktag.txt
var linktag = __webpack_require__("V4tZ");
var linktag_default = /*#__PURE__*/__webpack_require__.n(linktag);

// EXTERNAL MODULE: ./routes/icon/sample.txt
var icon_sample = __webpack_require__("pu9d");
var icon_sample_default = /*#__PURE__*/__webpack_require__.n(icon_sample);

// CONCATENATED MODULE: ./routes/icon/index.js


function icon__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function icon__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function icon__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Samples



// Class

var icon__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var icon__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    icon_sample_default.a
  )
);

var icon__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var icon__ref4 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    Icon_Icon,
    null,
    "menu"
  )
);

var icon__ref5 = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    Icon_Icon,
    null,
    "favorite_border"
  )
);

var icon__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Note "
);

var icon__ref7 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--caption" },
  Object(preact_min["h"])(
    "div",
    null,
    "In order to use these you will need to import respective font icons",
    " "
  ),
  Object(preact_min["h"])(
    "div",
    null,
    Object(preact_min["h"])(
      code_block,
      null,
      Object(preact_min["h"])(
        "code",
        { "class": "lang-html" },
        linktag_default.a
      )
    )
  )
);

var icon_IconPage = function (_Component) {
  icon__inherits(IconPage, _Component);

  function IconPage() {
    icon__classCallCheck(this, IconPage);

    var _this = icon__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Icon",
      props: []
    }];
    return _this;
  }

  IconPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      icon__ref,
      icon__ref2,
      icon__ref3,
      icon__ref4,
      icon__ref5,
      icon__ref6,
      icon__ref7
    );
  };

  return IconPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/icon-toggle/adapter.js
function icon_toggle_adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Icon Toggle. Provides an interface for managing
 * - classes
 * - dom
 * - inner text
 * - event handlers
 * - event dispatch
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */

var MDCIconToggleAdapter = function () {
  function MDCIconToggleAdapter() {
    icon_toggle_adapter__classCallCheck(this, MDCIconToggleAdapter);
  }

  /** @param {string} className */
  MDCIconToggleAdapter.prototype.addClass = function addClass(className) {};

  /** @param {string} className */


  MDCIconToggleAdapter.prototype.removeClass = function removeClass(className) {};

  /**
   * @param {string} type
   * @param {!EventListener} handler
   */


  MDCIconToggleAdapter.prototype.registerInteractionHandler = function registerInteractionHandler(type, handler) {};

  /**
   * @param {string} type
   * @param {!EventListener} handler
   */


  MDCIconToggleAdapter.prototype.deregisterInteractionHandler = function deregisterInteractionHandler(type, handler) {};

  /** @param {string} text */


  MDCIconToggleAdapter.prototype.setText = function setText(text) {};

  /** @return {number} */


  MDCIconToggleAdapter.prototype.getTabIndex = function getTabIndex() {};

  /** @param {number} tabIndex */


  MDCIconToggleAdapter.prototype.setTabIndex = function setTabIndex(tabIndex) {};

  /**
   * @param {string} name
   * @return {string}
   */


  MDCIconToggleAdapter.prototype.getAttr = function getAttr(name) {};

  /**
   * @param {string} name
   * @param {string} value
   */


  MDCIconToggleAdapter.prototype.setAttr = function setAttr(name, value) {};

  /** @param {string} name */


  MDCIconToggleAdapter.prototype.rmAttr = function rmAttr(name) {};

  /** @param {!IconToggleEvent} evtData */


  MDCIconToggleAdapter.prototype.notifyChange = function notifyChange(evtData) {};

  return MDCIconToggleAdapter;
}();

/**
 * @typedef {!{
 *   isOn: boolean,
 * }}
 */


var IconToggleEvent = void 0;


// CONCATENATED MODULE: ../node_modules/@material/icon-toggle/constants.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
var icon_toggle_constants_cssClasses = {
  ROOT: 'mdc-icon-toggle',
  DISABLED: 'mdc-icon-toggle--disabled'
};

/** @enum {string} */
var icon_toggle_constants_strings = {
  DATA_TOGGLE_ON: 'data-toggle-on',
  DATA_TOGGLE_OFF: 'data-toggle-off',
  ARIA_PRESSED: 'aria-pressed',
  ARIA_DISABLED: 'aria-disabled',
  ARIA_LABEL: 'aria-label',
  CHANGE_EVENT: 'MDCIconToggle:change'
};


// CONCATENATED MODULE: ../node_modules/@material/icon-toggle/foundation.js
var icon_toggle_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var icon_toggle_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function icon_toggle_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function icon_toggle_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function icon_toggle_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* eslint-disable no-unused-vars */



/**
 * @extends {MDCFoundation<!MDCIconToggleAdapter>}
 */

var foundation_MDCIconToggleFoundation = function (_MDCFoundation) {
  icon_toggle_foundation__inherits(MDCIconToggleFoundation, _MDCFoundation);

  icon_toggle_foundation__createClass(MDCIconToggleFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return icon_toggle_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return icon_toggle_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerInteractionHandler: function registerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* type: string, handler: EventListener */{},
        setText: function setText() /* text: string */{},
        getTabIndex: function getTabIndex() {
          return (/* number */0
          );
        },
        setTabIndex: function setTabIndex() /* tabIndex: number */{},
        getAttr: function getAttr() {
          return (/* name: string */ /* string */''
          );
        },
        setAttr: function setAttr() /* name: string, value: string */{},
        rmAttr: function rmAttr() /* name: string */{},
        notifyChange: function notifyChange() /* evtData: IconToggleEvent */{}
      };
    }
  }]);

  function MDCIconToggleFoundation(adapter) {
    icon_toggle_foundation__classCallCheck(this, MDCIconToggleFoundation);

    /** @private {boolean} */
    var _this = icon_toggle_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, icon_toggle_foundation__extends(MDCIconToggleFoundation.defaultAdapter, adapter)));

    _this.on_ = false;

    /** @private {boolean} */
    _this.disabled_ = false;

    /** @private {number} */
    _this.savedTabIndex_ = -1;

    /** @private {?IconToggleState} */
    _this.toggleOnData_ = null;

    /** @private {?IconToggleState} */
    _this.toggleOffData_ = null;

    _this.clickHandler_ = /** @private {!EventListener} */function () {
      return _this.toggleFromEvt_();
    };

    /** @private {boolean} */
    _this.isHandlingKeydown_ = false;

    _this.keydownHandler_ = /** @private {!EventListener} */function ( /** @type {!KeyboardKey} */evt) {
      if (isSpace(evt)) {
        _this.isHandlingKeydown_ = true;
        return evt.preventDefault();
      }
    };

    _this.keyupHandler_ = /** @private {!EventListener} */function ( /** @type {!KeyboardKey} */evt) {
      if (isSpace(evt)) {
        _this.isHandlingKeydown_ = false;
        _this.toggleFromEvt_();
      }
    };
    return _this;
  }

  MDCIconToggleFoundation.prototype.init = function init() {
    this.refreshToggleData();
    this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);
  };

  MDCIconToggleFoundation.prototype.refreshToggleData = function refreshToggleData() {
    var _MDCIconToggleFoundat = MDCIconToggleFoundation.strings,
        DATA_TOGGLE_ON = _MDCIconToggleFoundat.DATA_TOGGLE_ON,
        DATA_TOGGLE_OFF = _MDCIconToggleFoundat.DATA_TOGGLE_OFF;

    this.toggleOnData_ = this.parseJsonDataAttr_(DATA_TOGGLE_ON);
    this.toggleOffData_ = this.parseJsonDataAttr_(DATA_TOGGLE_OFF);
  };

  MDCIconToggleFoundation.prototype.destroy = function destroy() {
    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);
  };

  /** @private */


  MDCIconToggleFoundation.prototype.toggleFromEvt_ = function toggleFromEvt_() {
    this.toggle();
    var isOn = this.on_;

    this.adapter_.notifyChange( /** @type {!IconToggleEvent} */{ isOn: isOn });
  };

  /** @return {boolean} */


  MDCIconToggleFoundation.prototype.isOn = function isOn() {
    return this.on_;
  };

  /** @param {boolean=} isOn */


  MDCIconToggleFoundation.prototype.toggle = function toggle() {
    var isOn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.on_;

    this.on_ = isOn;

    var _MDCIconToggleFoundat2 = MDCIconToggleFoundation.strings,
        ARIA_LABEL = _MDCIconToggleFoundat2.ARIA_LABEL,
        ARIA_PRESSED = _MDCIconToggleFoundat2.ARIA_PRESSED;


    if (this.on_) {
      this.adapter_.setAttr(ARIA_PRESSED, 'true');
    } else {
      this.adapter_.setAttr(ARIA_PRESSED, 'false');
    }

    var _ref = this.on_ ? this.toggleOffData_ : this.toggleOnData_,
        classToRemove = _ref.cssClass;

    if (classToRemove) {
      this.adapter_.removeClass(classToRemove);
    }

    var _ref2 = this.on_ ? this.toggleOnData_ : this.toggleOffData_,
        content = _ref2.content,
        label = _ref2.label,
        cssClass = _ref2.cssClass;

    if (cssClass) {
      this.adapter_.addClass(cssClass);
    }
    if (content) {
      this.adapter_.setText(content);
    }
    if (label) {
      this.adapter_.setAttr(ARIA_LABEL, label);
    }
  };

  /**
   * @param {string} dataAttr
   * @return {!IconToggleState}
   */


  MDCIconToggleFoundation.prototype.parseJsonDataAttr_ = function parseJsonDataAttr_(dataAttr) {
    var val = this.adapter_.getAttr(dataAttr);
    if (!val) {
      return {};
    }
    return (/** @type {!IconToggleState} */JSON.parse(val)
    );
  };

  /** @return {boolean} */


  MDCIconToggleFoundation.prototype.isDisabled = function isDisabled() {
    return this.disabled_;
  };

  /** @param {boolean} isDisabled */


  MDCIconToggleFoundation.prototype.setDisabled = function setDisabled(isDisabled) {
    this.disabled_ = isDisabled;

    var DISABLED = MDCIconToggleFoundation.cssClasses.DISABLED;
    var ARIA_DISABLED = MDCIconToggleFoundation.strings.ARIA_DISABLED;


    if (this.disabled_) {
      this.savedTabIndex_ = this.adapter_.getTabIndex();
      this.adapter_.setTabIndex(-1);
      this.adapter_.setAttr(ARIA_DISABLED, 'true');
      this.adapter_.addClass(DISABLED);
    } else {
      this.adapter_.setTabIndex(this.savedTabIndex_);
      this.adapter_.rmAttr(ARIA_DISABLED);
      this.adapter_.removeClass(DISABLED);
    }
  };

  /** @return {boolean} */


  MDCIconToggleFoundation.prototype.isKeyboardActivated = function isKeyboardActivated() {
    return this.isHandlingKeydown_;
  };

  return MDCIconToggleFoundation;
}(base_foundation);

/**
 * @typedef {!{
 *   key: string,
 *   keyCode: number
 * }}
 */


var KeyboardKey = void 0;

/**
 * @param {!KeyboardKey} keyboardKey
 * @return {boolean}
 */
function isSpace(keyboardKey) {
  return keyboardKey.key === 'Space' || keyboardKey.keyCode === 32;
}

/** @record */

var IconToggleState = function IconToggleState() {
  icon_toggle_foundation__classCallCheck(this, IconToggleState);
};

/**
 * The aria-label value of the icon toggle, or undefined if there is no aria-label.
 * @export {string|undefined}
 */


IconToggleState.prototype.label;

/**
 * The text for the icon toggle, or undefined if there is no text.
 * @export {string|undefined}
 */
IconToggleState.prototype.content;

/**
 * The CSS class to add to the icon toggle, or undefined if there is no CSS class.
 * @export {string|undefined}
 */
IconToggleState.prototype.cssClass;

/* harmony default export */ var icon_toggle_foundation = (foundation_MDCIconToggleFoundation);
// CONCATENATED MODULE: ../node_modules/@material/icon-toggle/index.js
var icon_toggle__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var icon_toggle__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function icon_toggle__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function icon_toggle__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function icon_toggle__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @extends {MDCComponent<!MDCIconToggleFoundation>}
 */

var icon_toggle_MDCIconToggle = function (_MDCComponent) {
  icon_toggle__inherits(MDCIconToggle, _MDCComponent);

  MDCIconToggle.attachTo = function attachTo(root) {
    return new MDCIconToggle(root);
  };

  function MDCIconToggle() {
    icon_toggle__classCallCheck(this, MDCIconToggle);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!MDCRipple} */
    var _this = icon_toggle__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.ripple_ = _this.initRipple_();
    return _this;
  }

  /** @return {!Element} */


  /**
   * @return {!MDCRipple}
   * @private
   */
  MDCIconToggle.prototype.initRipple_ = function initRipple_() {
    var _this2 = this;

    var adapter = icon_toggle__extends(ripple_MDCRipple.createAdapter(this), {
      isUnbounded: function isUnbounded() {
        return true;
      },
      isSurfaceActive: function isSurfaceActive() {
        return _this2.foundation_.isKeyboardActivated();
      },
      computeBoundingRect: function computeBoundingRect() {
        var dim = 48;

        var _root_$getBoundingCli = _this2.root_.getBoundingClientRect(),
            left = _root_$getBoundingCli.left,
            top = _root_$getBoundingCli.top;

        return {
          left: left,
          top: top,
          width: dim,
          height: dim,
          right: left + dim,
          bottom: left + dim
        };
      }
    });
    var foundation = new ripple_foundation(adapter);
    return new ripple_MDCRipple(this.root_, foundation);
  };

  MDCIconToggle.prototype.destroy = function destroy() {
    this.ripple_.destroy();
    _MDCComponent.prototype.destroy.call(this);
  };

  /** @return {!MDCIconToggleFoundation} */


  MDCIconToggle.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this3 = this;

    return new icon_toggle_foundation({
      addClass: function addClass(className) {
        return _this3.iconEl_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this3.iconEl_.classList.remove(className);
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return _this3.root_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return _this3.root_.removeEventListener(type, handler);
      },
      setText: function setText(text) {
        return _this3.iconEl_.textContent = text;
      },
      getTabIndex: function getTabIndex() {
        return (/* number */_this3.root_.tabIndex
        );
      },
      setTabIndex: function setTabIndex(tabIndex) {
        return _this3.root_.tabIndex = tabIndex;
      },
      getAttr: function getAttr(name, value) {
        return _this3.root_.getAttribute(name, value);
      },
      setAttr: function setAttr(name, value) {
        return _this3.root_.setAttribute(name, value);
      },
      rmAttr: function rmAttr(name) {
        return _this3.root_.removeAttribute(name);
      },
      notifyChange: function notifyChange(evtData) {
        return _this3.emit(icon_toggle_foundation.strings.CHANGE_EVENT, evtData);
      }
    });
  };

  MDCIconToggle.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    this.on = this.root_.getAttribute(icon_toggle_foundation.strings.ARIA_PRESSED) === 'true';
    this.disabled = this.root_.getAttribute(icon_toggle_foundation.strings.ARIA_DISABLED) === 'true';
  };

  /** @return {boolean} */


  MDCIconToggle.prototype.refreshToggleData = function refreshToggleData() {
    this.foundation_.refreshToggleData();
  };

  icon_toggle__createClass(MDCIconToggle, [{
    key: 'iconEl_',
    get: function get() {
      var sel = this.root_.dataset['iconInnerSelector'];

      return sel ?
      /** @type {!Element} */this.root_.querySelector(sel) : this.root_;
    }
  }, {
    key: 'on',
    get: function get() {
      return this.foundation_.isOn();
    }

    /** @param {boolean} isOn */
    ,
    set: function set(isOn) {
      this.foundation_.toggle(isOn);
    }

    /** @return {boolean} */

  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    }

    /** @param {boolean} isDisabled */
    ,
    set: function set(isDisabled) {
      this.foundation_.setDisabled(isDisabled);
    }
  }]);

  return MDCIconToggle;
}(base_component);


// CONCATENATED MODULE: ../node_modules/preact-material-components/IconToggle/index.js
function IconToggle__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function IconToggle__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function IconToggle__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IconToggle__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





/**
 * @prop disabled = false
 */

var IconToggle_IconToggle = function (_MaterialComponent) {
  IconToggle__inherits(IconToggle, _MaterialComponent);

  function IconToggle() {
    IconToggle__classCallCheck(this, IconToggle);

    var _this = IconToggle__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "icon-toggle";
    _this._onChange = _this._onChange.bind(_this);
    return _this;
  }

  IconToggle.prototype._onChange = function _onChange(e) {
    if (this.props.onChange) {
      this.props.onChange(e);
    }
  };

  IconToggle.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new icon_toggle_MDCIconToggle(this.control);
    this.MDComponent.listen("MDCIconToggle:change", this._onChange);
  };

  IconToggle.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCIconToggle:change", this._onChange);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  IconToggle.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    if (props["data-toggle-on"]) props["data-toggle-on"] = JSON.stringify(props["data-toggle-on"]);
    if (props["data-toggle-off"]) props["data-toggle-off"] = JSON.stringify(props["data-toggle-off"]);
    return Object(preact_min["h"])("i", IconToggle__extends({}, props, {
      className: "material-icons " + props.className || "",
      ref: function ref(control) {
        _this2.control = control;
      }
    }), props.children);
  };

  return IconToggle;
}(MaterialComponent_MaterialComponent);


// EXTERNAL MODULE: ./routes/icon-toggle/sample.txt
var icon_toggle_sample = __webpack_require__("oqLc");
var icon_toggle_sample_default = /*#__PURE__*/__webpack_require__.n(icon_toggle_sample);

// CONCATENATED MODULE: ./routes/icon-toggle/index.js


function routes_icon_toggle__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_icon_toggle__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_icon_toggle__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Samples


// Class

var icon_toggle__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var icon_toggle__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    icon_toggle_sample_default.a
  )
);

var icon_toggle__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var icon_toggle__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-icon-toggle"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-icon-toggle" },
    " ",
    "here"
  ),
  "."
);

var icon_toggle__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var icon_toggle_IconTogglePage = function (_Component) {
  routes_icon_toggle__inherits(IconTogglePage, _Component);

  function IconTogglePage() {
    routes_icon_toggle__classCallCheck(this, IconTogglePage);

    var _this = routes_icon_toggle__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "IconToggle",
      props: [{
        name: "disabled",
        description: "Is the icon disabled"
      }, {
        name: "data-toggle-on",
        description: "JSON object for toggle on icon"
      }, {
        name: "data-toggle-off",
        description: "JSON object for toggle off icon"
      }]
    }];
    return _this;
  }

  IconTogglePage.prototype.render = function render() {
    var toggleOnIcon = {
      content: "favorite",
      label: "Remove From Favorites"
    };
    var toggleOffIcon = {
      content: "favorite_border",
      label: "Add to Favorites"
    };
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      icon_toggle__ref,
      icon_toggle__ref2,
      icon_toggle__ref3,
      icon_toggle__ref4,
      icon_toggle__ref5,
      Object(preact_min["h"])(
        IconToggle_IconToggle,
        {
          role: "button",
          tabindex: "0",
          "aria-pressed": "false",
          "aria-label": "Add to favorites",
          "data-toggle-on": toggleOnIcon,
          "data-toggle-off": toggleOffIcon
        },
        "favorite_border"
      )
    );
  };

  return IconTogglePage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/layout-grid/style.scss
var layout_grid_style = __webpack_require__("4YXN");
var layout_grid_style_default = /*#__PURE__*/__webpack_require__.n(layout_grid_style);

// EXTERNAL MODULE: ./routes/layout-grid/sample.txt
var layout_grid_sample = __webpack_require__("Mip5");
var layout_grid_sample_default = /*#__PURE__*/__webpack_require__.n(layout_grid_sample);

// CONCATENATED MODULE: ./routes/layout-grid/index.js


function layout_grid__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function layout_grid__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function layout_grid__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Samples


// Class

var layout_grid__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code"
);

var layout_grid__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    layout_grid_sample_default.a
  )
);

var layout_grid__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var layout_grid__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-layout-grid"
  ),
  ". You can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-layout-grid" },
    " ",
    "here"
  ),
  "."
);

var layout_grid__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo"
);

var layout_grid__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "Grid of 1 column wide items"
);

var layout_grid__ref7 = Object(preact_min["h"])(
  preact_material_components_LayoutGrid,
  null,
  Object(preact_min["h"])(
    preact_material_components_LayoutGrid.Inner,
    null,
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "1" },
      "1"
    )
  )
);

var layout_grid__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "Grid of 4 column wide items"
);

var layout_grid__ref9 = Object(preact_min["h"])(
  preact_material_components_LayoutGrid,
  null,
  Object(preact_min["h"])(
    preact_material_components_LayoutGrid.Inner,
    null,
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "4" },
      "4"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "4" },
      "4"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "4" },
      "4"
    )
  )
);

var layout_grid__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "Grid of differently sized items"
);

var layout_grid__ref11 = Object(preact_min["h"])(
  preact_material_components_LayoutGrid,
  null,
  Object(preact_min["h"])(
    preact_material_components_LayoutGrid.Inner,
    null,
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "6" },
      "6"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "4" },
      "4"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "2" },
      "2"
    )
  )
);

var layout_grid__ref12 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "Grid of items with tweaks at different screen sizes"
);

var layout_grid__ref13 = Object(preact_min["h"])(
  preact_material_components_LayoutGrid,
  null,
  Object(preact_min["h"])(
    preact_material_components_LayoutGrid.Inner,
    null,
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "6", tabletCols: "8" },
      "6 (8 tablet)"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "4", tabletCols: "6" },
      "4 (6 tablet)"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "2", phoneCols: "4" },
      "2 (4 phone)"
    )
  )
);

var layout_grid__ref14 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "Grid with different alignments"
);

var layout_grid__ref15 = Object(preact_min["h"])(
  preact_material_components_LayoutGrid,
  null,
  Object(preact_min["h"])(
    preact_material_components_LayoutGrid.Inner,
    null,
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3" },
      "default"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", align: "bottom" },
      "bottom"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", align: "top" },
      "top"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", align: "middle" },
      "middle"
    )
  )
);

var layout_grid__ref16 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "Grid with reordered items"
);

var layout_grid__ref17 = Object(preact_min["h"])(
  preact_material_components_LayoutGrid,
  null,
  Object(preact_min["h"])(
    preact_material_components_LayoutGrid.Inner,
    null,
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", order: "3" },
      "First cell"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", order: "1" },
      "Second cell"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", order: "4" },
      "Third cell"
    ),
    Object(preact_min["h"])(
      preact_material_components_LayoutGrid.Cell,
      { cols: "3", order: "2" },
      "Fourth cell"
    )
  )
);

var layout_grid_LayoutGridPage = function (_Component) {
  layout_grid__inherits(LayoutGridPage, _Component);

  function LayoutGridPage() {
    layout_grid__classCallCheck(this, LayoutGridPage);

    var _this = layout_grid__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "LayoutGrid",
      props: []
    }, {
      component: "LayoutGrid.Inner",
      props: []
    }, {
      component: "LayoutGrid.Cell",
      props: [{
        name: "cols",
        description: "Column width of cell (general).",
        value: "[1..12]"
      }, {
        name: "desktopCols",
        description: "Column width of cell (desktop breakpoint).",
        value: "[1..12]"
      }, {
        name: "tabletCols",
        description: "Column width of cell (tablet breakpoint).",
        value: "[1..12]"
      }, {
        name: "phoneCols",
        description: "Column width of cell (phone breakpoint).",
        value: "[1..12]"
      }, {
        name: "order",
        description: "Allows reordering of items in grid.",
        value: "[1..12]"
      }, {
        name: "align",
        description: "Vertical alignment of cell within row.",
        value: "[top|middle|bottom]"
      }]
    }];
    return _this;
  }

  LayoutGridPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-layout-grid" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      layout_grid__ref,
      layout_grid__ref2,
      layout_grid__ref3,
      layout_grid__ref4,
      layout_grid__ref5,
      layout_grid__ref6,
      layout_grid__ref7,
      layout_grid__ref8,
      layout_grid__ref9,
      layout_grid__ref10,
      layout_grid__ref11,
      layout_grid__ref12,
      layout_grid__ref13,
      layout_grid__ref14,
      layout_grid__ref15,
      layout_grid__ref16,
      layout_grid__ref17
    );
  };

  return LayoutGridPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/linear-progress/constants.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var linear_progress_constants_cssClasses = {
  CLOSED_CLASS: 'mdc-linear-progress--closed',
  INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',
  REVERSED_CLASS: 'mdc-linear-progress--reversed'
};

var linear_progress_constants_strings = {
  PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar',
  BUFFER_SELECTOR: '.mdc-linear-progress__buffer'
};
// CONCATENATED MODULE: ../node_modules/@material/linear-progress/foundation.js
var linear_progress_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var linear_progress_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function linear_progress_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function linear_progress_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function linear_progress_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var foundation_MDCLinearProgressFoundation = function (_MDCFoundation) {
  linear_progress_foundation__inherits(MDCLinearProgressFoundation, _MDCFoundation);

  linear_progress_foundation__createClass(MDCLinearProgressFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return linear_progress_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return linear_progress_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        getPrimaryBar: function getPrimaryBar() /* el: Element */{},
        getBuffer: function getBuffer() /* el: Element */{},
        hasClass: function hasClass() {
          return (/* className: string */false
          );
        },
        removeClass: function removeClass() /* className: string */{},
        setStyle: function setStyle() /* el: Element, styleProperty: string, value: number */{}
      };
    }
  }]);

  function MDCLinearProgressFoundation(adapter) {
    linear_progress_foundation__classCallCheck(this, MDCLinearProgressFoundation);

    return linear_progress_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, linear_progress_foundation__extends(MDCLinearProgressFoundation.defaultAdapter, adapter)));
  }

  MDCLinearProgressFoundation.prototype.init = function init() {
    this.determinate_ = !this.adapter_.hasClass(linear_progress_constants_cssClasses.INDETERMINATE_CLASS);
    this.reverse_ = this.adapter_.hasClass(linear_progress_constants_cssClasses.REVERSED_CLASS);
  };

  MDCLinearProgressFoundation.prototype.setDeterminate = function setDeterminate(isDeterminate) {
    this.determinate_ = isDeterminate;
    if (this.determinate_) {
      this.adapter_.removeClass(linear_progress_constants_cssClasses.INDETERMINATE_CLASS);
    } else {
      this.adapter_.addClass(linear_progress_constants_cssClasses.INDETERMINATE_CLASS);
      this.setScale_(this.adapter_.getPrimaryBar(), 1);
      this.setScale_(this.adapter_.getBuffer(), 1);
    }
  };

  MDCLinearProgressFoundation.prototype.setProgress = function setProgress(value) {
    if (this.determinate_) {
      this.setScale_(this.adapter_.getPrimaryBar(), value);
    }
  };

  MDCLinearProgressFoundation.prototype.setBuffer = function setBuffer(value) {
    if (this.determinate_) {
      this.setScale_(this.adapter_.getBuffer(), value);
    }
  };

  MDCLinearProgressFoundation.prototype.setReverse = function setReverse(isReversed) {
    this.reverse_ = isReversed;
    if (this.reverse_) {
      this.adapter_.addClass(linear_progress_constants_cssClasses.REVERSED_CLASS);
    } else {
      this.adapter_.removeClass(linear_progress_constants_cssClasses.REVERSED_CLASS);
    }
  };

  MDCLinearProgressFoundation.prototype.open = function open() {
    this.adapter_.removeClass(linear_progress_constants_cssClasses.CLOSED_CLASS);
  };

  MDCLinearProgressFoundation.prototype.close = function close() {
    this.adapter_.addClass(linear_progress_constants_cssClasses.CLOSED_CLASS);
  };

  MDCLinearProgressFoundation.prototype.setScale_ = function setScale_(el, scaleValue) {
    var _this2 = this;

    var value = 'scaleX(' + scaleValue + ')';
    transformStyleProperties.forEach(function (transformStyleProperty) {
      _this2.adapter_.setStyle(el, transformStyleProperty, value);
    });
  };

  return MDCLinearProgressFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/linear-progress/index.js
var linear_progress__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function linear_progress__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function linear_progress__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function linear_progress__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var linear_progress_MDCLinearProgress = function (_MDCComponent) {
  linear_progress__inherits(MDCLinearProgress, _MDCComponent);

  function MDCLinearProgress() {
    linear_progress__classCallCheck(this, MDCLinearProgress);

    return linear_progress__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCLinearProgress.attachTo = function attachTo(root) {
    return new MDCLinearProgress(root);
  };

  MDCLinearProgress.prototype.open = function open() {
    this.foundation_.open();
  };

  MDCLinearProgress.prototype.close = function close() {
    this.foundation_.close();
  };

  MDCLinearProgress.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCLinearProgressFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      getPrimaryBar: function getPrimaryBar() {
        return _this2.root_.querySelector(foundation_MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
      },
      getBuffer: function getBuffer() {
        return _this2.root_.querySelector(foundation_MDCLinearProgressFoundation.strings.BUFFER_SELECTOR);
      },
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      setStyle: function setStyle(el, styleProperty, value) {
        return el.style[styleProperty] = value;
      }
    });
  };

  linear_progress__createClass(MDCLinearProgress, [{
    key: 'determinate',
    set: function set(value) {
      this.foundation_.setDeterminate(value);
    }
  }, {
    key: 'progress',
    set: function set(value) {
      this.foundation_.setProgress(value);
    }
  }, {
    key: 'buffer',
    set: function set(value) {
      this.foundation_.setBuffer(value);
    }
  }, {
    key: 'reverse',
    set: function set(value) {
      this.foundation_.setReverse(value);
    }
  }]);

  return MDCLinearProgress;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/LinearProgress/index.js
function LinearProgress__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function LinearProgress__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function LinearProgress__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LinearProgress__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





/**
 * @prop indeterminate = false
 * @prop reversed = false
 * @prop accent = false
 */

var LinearProgress_LinearProgress = function (_MaterialComponent) {
  LinearProgress__inherits(LinearProgress, _MaterialComponent);

  function LinearProgress() {
    LinearProgress__classCallCheck(this, LinearProgress);

    var _this = LinearProgress__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "linear-progress";
    _this._mdcProps = ["indeterminate", "reversed", "accent"];
    return _this;
  }

  LinearProgress.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new linear_progress_MDCLinearProgress(this.control);
    updateProgress(this.props, this.MDComponent);
  };

  LinearProgress.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  LinearProgress.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    updateProgress(nextProps, this.MDComponent);
  };

  LinearProgress.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("div", LinearProgress__extends({
      role: "progressbar"
    }, props, {
      ref: function ref(control) {
        return _this2.control = control;
      }
    }), Object(preact_min["h"])("div", { className: "mdc-linear-progress__buffering-dots" }), Object(preact_min["h"])("div", { className: "mdc-linear-progress__buffer" }), Object(preact_min["h"])("div", { className: "mdc-linear-progress__bar mdc-linear-progress__primary-bar" }, Object(preact_min["h"])("span", { className: "mdc-linear-progress__bar-inner" })), Object(preact_min["h"])("div", { className: "mdc-linear-progress__bar mdc-linear-progress__secondary-bar" }, Object(preact_min["h"])("span", { className: "mdc-linear-progress__bar-inner" })));
  };

  return LinearProgress;
}(MaterialComponent_MaterialComponent);




function updateProgress(props, progressBar) {
  if (!props.indeterminate && props.progress) {
    progressBar.progress = props.progress;
  }
}
// EXTERNAL MODULE: ./routes/linear-progress/sample.txt
var linear_progress_sample = __webpack_require__("WtcB");
var linear_progress_sample_default = /*#__PURE__*/__webpack_require__.n(linear_progress_sample);

// CONCATENATED MODULE: ./routes/linear-progress/index.js


function routes_linear_progress__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_linear_progress__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_linear_progress__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Samples


// Class

var linear_progress__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var linear_progress__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    linear_progress_sample_default.a
  )
);

var linear_progress__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var linear_progress__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-linear-progress"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-linear-progress" },
    " ",
    "here"
  ),
  "."
);

var linear_progress__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var linear_progress__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Indeterminate "
);

var linear_progress__ref7 = Object(preact_min["h"])(LinearProgress_LinearProgress, { indeterminate: true });

var linear_progress__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Reversed "
);

var linear_progress__ref9 = Object(preact_min["h"])(LinearProgress_LinearProgress, { reversed: true, indeterminate: true });

var linear_progress__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Accent "
);

var linear_progress__ref11 = Object(preact_min["h"])(LinearProgress_LinearProgress, { indeterminate: true, accent: true });

var linear_progress__ref12 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Progress "
);

var linear_progress__ref13 = Object(preact_min["h"])(LinearProgress_LinearProgress, { progress: 0.8, accent: true });

var linear_progress_LinearProgressPage = function (_Component) {
  routes_linear_progress__inherits(LinearProgressPage, _Component);

  function LinearProgressPage() {
    routes_linear_progress__classCallCheck(this, LinearProgressPage);

    var _this = routes_linear_progress__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "LinearProgress",
      props: [{
        name: "indeterminate",
        description: "Tells if the progress bar is running forever."
      }, {
        name: "reversed",
        description: "Tells if the progress bar direction is reversed."
      }, {
        name: "accent",
        description: "Makes the colour of the progress bar accented."
      }, {
        name: "progress",
        description: "Sets the current progress of the progress bar."
      }]
    }];
    return _this;
  }

  LinearProgressPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      linear_progress__ref,
      linear_progress__ref2,
      linear_progress__ref3,
      linear_progress__ref4,
      linear_progress__ref5,
      linear_progress__ref6,
      linear_progress__ref7,
      linear_progress__ref8,
      linear_progress__ref9,
      linear_progress__ref10,
      linear_progress__ref11,
      linear_progress__ref12,
      linear_progress__ref13
    );
  };

  return LinearProgressPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/list/style.scss
var list_style = __webpack_require__("Hb3h");
var list_style_default = /*#__PURE__*/__webpack_require__.n(list_style);

// EXTERNAL MODULE: ./routes/list/sample.txt
var list_sample = __webpack_require__("pdCL");
var list_sample_default = /*#__PURE__*/__webpack_require__.n(list_sample);

// CONCATENATED MODULE: ./routes/list/index.js


function list__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function list__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function list__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Samples


// Class

var list__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var list__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    list_sample_default.a
  )
);

var list__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var list__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-list"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-list" },
    " ",
    "here"
  ),
  "."
);

var list__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var list__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Normal "
);

var list__ref7 = Object(preact_min["h"])(
  preact_material_components_List,
  null,
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    "Item1"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    "Item2"
  ),
  Object(preact_min["h"])(preact_material_components_List.Divider, null),
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    "Item3"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    "Item4"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    "Item5"
  )
);

var list__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Action items "
);

var list__ref9 = Object(preact_min["h"])(
  preact_material_components_List,
  null,
  Object(preact_min["h"])(
    preact_material_components_List.LinkItem,
    { ripple: true, href: "#/component/list" },
    "Item1"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.LinkItem,
    { ripple: true, href: "#/component/list" },
    "Item2"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.LinkItem,
    { ripple: true, href: "#/component/list" },
    "Item3"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.LinkItem,
    { ripple: true, href: "#/component/list" },
    "Item4"
  ),
  Object(preact_min["h"])(
    preact_material_components_List.LinkItem,
    { ripple: true, href: "#/component/list" },
    "Item5"
  )
);

var list__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Two line "
);

var list__ref11 = Object(preact_min["h"])(
  preact_material_components_List,
  { "two-line": true },
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    Object(preact_min["h"])(
      preact_material_components_List.TextContainer,
      null,
      Object(preact_min["h"])(
        preact_material_components_List.PrimaryText,
        null,
        "Heading 1"
      ),
      Object(preact_min["h"])(
        preact_material_components_List.SecondaryText,
        null,
        "Lorem ipsum dolor sit amet."
      )
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    Object(preact_min["h"])(
      preact_material_components_List.TextContainer,
      null,
      Object(preact_min["h"])(
        preact_material_components_List.PrimaryText,
        null,
        "Heading 2"
      ),
      Object(preact_min["h"])(
        preact_material_components_List.SecondaryText,
        null,
        "Lorem ipsum dolor sit amet."
      )
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_List.Item,
    null,
    Object(preact_min["h"])(
      preact_material_components_List.TextContainer,
      null,
      Object(preact_min["h"])(
        preact_material_components_List.PrimaryText,
        null,
        "Heading 3"
      ),
      Object(preact_min["h"])(
        preact_material_components_List.SecondaryText,
        null,
        "Lorem ipsum dolor sit amet."
      )
    )
  )
);

var list_ListPage = function (_Component) {
  list__inherits(ListPage, _Component);

  function ListPage() {
    list__classCallCheck(this, ListPage);

    var _this = list__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "List",
      props: [{
        name: "dense",
        description: "Makes the list with lesser padding."
      }, {
        name: "two-line",
        description: "Makes container for two line list item."
      }]
    }, {
      component: "List.Item",
      props: []
    }, {
      component: "List.LinkItem",
      props: [{
        name: "align-start",
        description: "Makes the Icon align to start."
      }, {
        name: "align-end",
        description: "Makes the Icon align to end."
      }]
    }, {
      component: "List.ItemAvatar",
      props: [{
        name: "src",
        value: "path of avatar image",
        description: "path of avatar image"
      }]
    }, {
      component: "List.TextContainer",
      props: []
    }, {
      component: "List.PrimaryText",
      props: []
    }, {
      component: "List.SecondaryText",
      props: []
    }];
    return _this;
  }

  ListPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-list" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      list__ref,
      list__ref2,
      list__ref3,
      list__ref4,
      list__ref5,
      list__ref6,
      list__ref7,
      list__ref8,
      list__ref9,
      list__ref10,
      list__ref11
    );
  };

  return ListPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/menu/util.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @type {string|undefined} */
var util_storedTransformPropertyName_ = void 0;

/**
 * Returns the name of the correct transform property to use on the current browser.
 * @param {!Window} globalObj
 * @param {boolean=} forceRefresh
 * @return {string}
 */
function util_getTransformPropertyName(globalObj) {
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (util_storedTransformPropertyName_ === undefined || forceRefresh) {
    var el = globalObj.document.createElement('div');
    var transformPropertyName = 'transform' in el.style ? 'transform' : 'webkitTransform';
    util_storedTransformPropertyName_ = transformPropertyName;
  }

  return util_storedTransformPropertyName_;
}

/**
 * Clamps a value between the minimum and the maximum, returning the clamped value.
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
function clamp(value) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  return Math.min(max, Math.max(min, value));
}

/**
 * Returns the easing value to apply at time t, for a given cubic bezier curve.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Parameters are as follows:
 * - time: The current time in the animation, scaled between 0 and 1.
 * - x1: The x value of control point P1.
 * - y1: The y value of control point P1.
 * - x2: The x value of control point P2.
 * - y2: The y value of control point P2.
 * @param {number} time
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
function bezierProgress(time, x1, y1, x2, y2) {
  return getBezierCoordinate_(solvePositionFromXValue_(time, x1, x2), y1, y2);
}

/**
 * Compute a single coordinate at a position point between 0 and 1.
 * c1 and c2 are the matching coordinate on control points P1 and P2, respectively.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} t
 * @param {number} c1
 * @param {number} c2
 * @return {number}
 */
function getBezierCoordinate_(t, c1, c2) {
  // Special case start and end.
  if (t === 0 || t === 1) {
    return t;
  }

  // Step one - from 4 points to 3
  var ic0 = t * c1;
  var ic1 = c1 + t * (c2 - c1);
  var ic2 = c2 + t * (1 - c2);

  // Step two - from 3 points to 2
  ic0 += t * (ic1 - ic0);
  ic1 += t * (ic2 - ic1);

  // Final step - last point
  return ic0 + t * (ic1 - ic0);
}

/**
 * Project a point onto the Bezier curve, from a given X. Calculates the position t along the curve.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} xVal
 * @param {number} x1
 * @param {number} x2
 * @return {number}
 */
function solvePositionFromXValue_(xVal, x1, x2) {
  var EPSILON = 1e-6;
  var MAX_ITERATIONS = 8;

  if (xVal <= 0) {
    return 0;
  } else if (xVal >= 1) {
    return 1;
  }

  // Initial estimate of t using linear interpolation.
  var t = xVal;

  // Try gradient descent to solve for t. If it works, it is very fast.
  var tMin = 0;
  var tMax = 1;
  var value = 0;
  for (var i = 0; i < MAX_ITERATIONS; i++) {
    value = getBezierCoordinate_(t, x1, x2);
    var derivative = (getBezierCoordinate_(t + EPSILON, x1, x2) - value) / EPSILON;
    if (Math.abs(value - xVal) < EPSILON) {
      return t;
    } else if (Math.abs(derivative) < EPSILON) {
      break;
    } else {
      if (value < xVal) {
        tMin = t;
      } else {
        tMax = t;
      }
      t -= (value - xVal) / derivative;
    }
  }

  // If the gradient descent got stuck in a local minimum, e.g. because
  // the derivative was close to 0, use a Dichotomy refinement instead.
  // We limit the number of interations to 8.
  for (var _i = 0; Math.abs(value - xVal) > EPSILON && _i < MAX_ITERATIONS; _i++) {
    if (value < xVal) {
      tMin = t;
      t = (t + tMax) / 2;
    } else {
      tMax = t;
      t = (t + tMin) / 2;
    }
    value = getBezierCoordinate_(t, x1, x2);
  }
  return t;
}


// CONCATENATED MODULE: ../node_modules/@material/menu/simple/adapter.js
function simple_adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Simple Menu. Provides an interface for managing
 * - classes
 * - dom
 * - focus
 * - position
 * - dimensions
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */
var MDCSimpleMenuAdapter = function () {
  function MDCSimpleMenuAdapter() {
    simple_adapter__classCallCheck(this, MDCSimpleMenuAdapter);
  }

  /** @param {string} className */
  MDCSimpleMenuAdapter.prototype.addClass = function addClass(className) {};

  /** @param {string} className */


  MDCSimpleMenuAdapter.prototype.removeClass = function removeClass(className) {};

  /**
   * @param {string} className
   * @return {boolean}
   */


  MDCSimpleMenuAdapter.prototype.hasClass = function hasClass(className) {};

  /** @return {boolean} */


  MDCSimpleMenuAdapter.prototype.hasNecessaryDom = function hasNecessaryDom() {};

  /**
   * @param {EventTarget} target
   * @param {string} attributeName
   * @return {string}
   */


  MDCSimpleMenuAdapter.prototype.getAttributeForEventTarget = function getAttributeForEventTarget(target, attributeName) {};

  /** @return {{ width: number, height: number }} */


  MDCSimpleMenuAdapter.prototype.getInnerDimensions = function getInnerDimensions() {};

  /** @return {boolean} */


  MDCSimpleMenuAdapter.prototype.hasAnchor = function hasAnchor() {};

  /** @return {{width: number, height: number, top: number, right: number, bottom: number, left: number}} */


  MDCSimpleMenuAdapter.prototype.getAnchorDimensions = function getAnchorDimensions() {};

  /** @return {{ width: number, height: number }} */


  MDCSimpleMenuAdapter.prototype.getWindowDimensions = function getWindowDimensions() {};

  /**
   * @param {number} x
   * @param {number} y
   */


  MDCSimpleMenuAdapter.prototype.setScale = function setScale(x, y) {};

  /**
   * @param {number} x
   * @param {number} y
   */


  MDCSimpleMenuAdapter.prototype.setInnerScale = function setInnerScale(x, y) {};

  /** @return {number} */


  MDCSimpleMenuAdapter.prototype.getNumberOfItems = function getNumberOfItems() {};

  /**
   * @param {string} type
   * @param {function(!Event)} handler
   */


  MDCSimpleMenuAdapter.prototype.registerInteractionHandler = function registerInteractionHandler(type, handler) {};

  /**
   * @param {string} type
   * @param {function(!Event)} handler
   */


  MDCSimpleMenuAdapter.prototype.deregisterInteractionHandler = function deregisterInteractionHandler(type, handler) {};

  /** @param {function(!Event)} handler */


  MDCSimpleMenuAdapter.prototype.registerBodyClickHandler = function registerBodyClickHandler(handler) {};

  /** @param {function(!Event)} handler */


  MDCSimpleMenuAdapter.prototype.deregisterBodyClickHandler = function deregisterBodyClickHandler(handler) {};

  /**
   * @param {number} index
   * @return {{top: number, height: number}}
   */


  MDCSimpleMenuAdapter.prototype.getYParamsForItemAtIndex = function getYParamsForItemAtIndex(index) {};

  /**
   * @param {number} index
   * @param {string|null} value
   */


  MDCSimpleMenuAdapter.prototype.setTransitionDelayForItemAtIndex = function setTransitionDelayForItemAtIndex(index, value) {};

  /**
   * @param {EventTarget} target
   * @return {number}
   */


  MDCSimpleMenuAdapter.prototype.getIndexForEventTarget = function getIndexForEventTarget(target) {};

  /** @param {{index: number}} evtData */


  MDCSimpleMenuAdapter.prototype.notifySelected = function notifySelected(evtData) {};

  MDCSimpleMenuAdapter.prototype.notifyCancel = function notifyCancel() {};

  MDCSimpleMenuAdapter.prototype.saveFocus = function saveFocus() {};

  MDCSimpleMenuAdapter.prototype.restoreFocus = function restoreFocus() {};

  /** @return {boolean} */


  MDCSimpleMenuAdapter.prototype.isFocused = function isFocused() {};

  MDCSimpleMenuAdapter.prototype.focus = function focus() {};

  /** @return {number} */


  MDCSimpleMenuAdapter.prototype.getFocusedItemIndex = function getFocusedItemIndex() /* number */{};

  /** @param {number} index */


  MDCSimpleMenuAdapter.prototype.focusItemAtIndex = function focusItemAtIndex(index) {};

  /** @return {boolean} */


  MDCSimpleMenuAdapter.prototype.isRtl = function isRtl() {};

  /** @param {string} origin */


  MDCSimpleMenuAdapter.prototype.setTransformOrigin = function setTransformOrigin(origin) {};

  /** @param {{
  *   top: (string|undefined),
  *   right: (string|undefined),
  *   bottom: (string|undefined),
  *   left: (string|undefined)
  * }} position */


  MDCSimpleMenuAdapter.prototype.setPosition = function setPosition(position) {};

  /** @return {number} */


  MDCSimpleMenuAdapter.prototype.getAccurateTime = function getAccurateTime() {};

  return MDCSimpleMenuAdapter;
}();

/* harmony default export */ var simple_adapter = (MDCSimpleMenuAdapter);
// CONCATENATED MODULE: ../node_modules/@material/menu/simple/constants.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
var simple_constants_cssClasses = {
  ROOT: 'mdc-simple-menu',
  OPEN: 'mdc-simple-menu--open',
  ANIMATING: 'mdc-simple-menu--animating',
  TOP_RIGHT: 'mdc-simple-menu--open-from-top-right',
  BOTTOM_LEFT: 'mdc-simple-menu--open-from-bottom-left',
  BOTTOM_RIGHT: 'mdc-simple-menu--open-from-bottom-right'
};

/** @enum {string} */
var simple_constants_strings = {
  ITEMS_SELECTOR: '.mdc-simple-menu__items',
  SELECTED_EVENT: 'MDCSimpleMenu:selected',
  CANCEL_EVENT: 'MDCSimpleMenu:cancel',
  ARIA_DISABLED_ATTR: 'aria-disabled'
};

/** @enum {number} */
var simple_constants_numbers = {
  // Amount of time to wait before triggering a selected event on the menu. Note that this time
  // will most likely be bumped up once interactive lists are supported to allow for the ripple to
  // animate before closing the menu
  SELECTED_TRIGGER_DELAY: 50,
  // Total duration of the menu animation.
  TRANSITION_DURATION_MS: 300,
  // The menu starts its open animation with the X axis at this time value (0 - 1).
  TRANSITION_SCALE_ADJUSTMENT_X: 0.5,
  // The time value the menu waits until the animation starts on the Y axis (0 - 1).
  TRANSITION_SCALE_ADJUSTMENT_Y: 0.2,
  // The cubic bezier control points for the animation (cubic-bezier(0, 0, 0.2, 1)).
  TRANSITION_X1: 0,
  TRANSITION_Y1: 0,
  TRANSITION_X2: 0.2,
  TRANSITION_Y2: 1
};


// CONCATENATED MODULE: ../node_modules/@material/menu/simple/foundation.js
var simple_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var simple_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function simple_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function simple_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function simple_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @extends {MDCFoundation<!MDCSimpleMenuAdapter>}
 */

var foundation_MDCSimpleMenuFoundation = function (_MDCFoundation) {
  simple_foundation__inherits(MDCSimpleMenuFoundation, _MDCFoundation);

  simple_foundation__createClass(MDCSimpleMenuFoundation, null, [{
    key: 'cssClasses',

    /** @return enum{cssClasses} */
    get: function get() {
      return simple_constants_cssClasses;
    }

    /** @return enum{strings} */

  }, {
    key: 'strings',
    get: function get() {
      return simple_constants_strings;
    }

    /** @return enum{numbers} */

  }, {
    key: 'numbers',
    get: function get() {
      return simple_constants_numbers;
    }

    /**
     * {@see MDCSimpleMenuAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCSimpleMenuAdapter}
     */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCSimpleMenuAdapter} */{
          addClass: function addClass() {},
          removeClass: function removeClass() {},
          hasClass: function hasClass() {
            return false;
          },
          hasNecessaryDom: function hasNecessaryDom() {
            return false;
          },
          getAttributeForEventTarget: function getAttributeForEventTarget() {},
          getInnerDimensions: function getInnerDimensions() {
            return {};
          },
          hasAnchor: function hasAnchor() {
            return false;
          },
          getAnchorDimensions: function getAnchorDimensions() {
            return {};
          },
          getWindowDimensions: function getWindowDimensions() {
            return {};
          },
          setScale: function setScale() {},
          setInnerScale: function setInnerScale() {},
          getNumberOfItems: function getNumberOfItems() {
            return 0;
          },
          registerInteractionHandler: function registerInteractionHandler() {},
          deregisterInteractionHandler: function deregisterInteractionHandler() {},
          registerBodyClickHandler: function registerBodyClickHandler() {},
          deregisterBodyClickHandler: function deregisterBodyClickHandler() {},
          getYParamsForItemAtIndex: function getYParamsForItemAtIndex() {
            return {};
          },
          setTransitionDelayForItemAtIndex: function setTransitionDelayForItemAtIndex() {},
          getIndexForEventTarget: function getIndexForEventTarget() {
            return 0;
          },
          notifySelected: function notifySelected() {},
          notifyCancel: function notifyCancel() {},
          saveFocus: function saveFocus() {},
          restoreFocus: function restoreFocus() {},
          isFocused: function isFocused() {
            return false;
          },
          focus: function focus() {},
          getFocusedItemIndex: function getFocusedItemIndex() {
            return -1;
          },
          focusItemAtIndex: function focusItemAtIndex() {},
          isRtl: function isRtl() {
            return false;
          },
          setTransformOrigin: function setTransformOrigin() {},
          setPosition: function setPosition() {},
          getAccurateTime: function getAccurateTime() {
            return 0;
          }
        }
      );
    }

    /** @param {!MDCSimpleMenuAdapter} adapter */

  }]);

  function MDCSimpleMenuFoundation(adapter) {
    simple_foundation__classCallCheck(this, MDCSimpleMenuFoundation);

    /** @private {function(!Event)} */
    var _this = simple_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, simple_foundation__extends(MDCSimpleMenuFoundation.defaultAdapter, adapter)));

    _this.clickHandler_ = function (evt) {
      return _this.handlePossibleSelected_(evt);
    };
    /** @private {function(!Event)} */
    _this.keydownHandler_ = function (evt) {
      return _this.handleKeyboardDown_(evt);
    };
    /** @private {function(!Event)} */
    _this.keyupHandler_ = function (evt) {
      return _this.handleKeyboardUp_(evt);
    };
    /** @private {function(!Event)} */
    _this.documentClickHandler_ = function (evt) {
      _this.adapter_.notifyCancel();
      _this.close(evt);
    };
    /** @private {boolean} */
    _this.isOpen_ = false;
    /** @private {number} */
    _this.startScaleX_ = 0;
    /** @private {number} */
    _this.startScaleY_ = 0;
    /** @private {number} */
    _this.targetScale_ = 1;
    /** @private {number} */
    _this.scaleX_ = 0;
    /** @private {number} */
    _this.scaleY_ = 0;
    /** @private {boolean} */
    _this.running_ = false;
    /** @private {number} */
    _this.selectedTriggerTimerId_ = 0;
    /** @private {number} */
    _this.animationRequestId_ = 0;
    /** @private {!{ width: number, height: number }} */
    _this.dimensions_;
    /** @private {number} */
    _this.startTime_;
    /** @private {number} */
    _this.itemHeight_;
    return _this;
  }

  MDCSimpleMenuFoundation.prototype.init = function init() {
    var _MDCSimpleMenuFoundat = MDCSimpleMenuFoundation.cssClasses,
        ROOT = _MDCSimpleMenuFoundat.ROOT,
        OPEN = _MDCSimpleMenuFoundat.OPEN;


    if (!this.adapter_.hasClass(ROOT)) {
      throw new Error(ROOT + ' class required in root element.');
    }

    if (!this.adapter_.hasNecessaryDom()) {
      throw new Error('Required DOM nodes missing in ' + ROOT + ' component.');
    }

    if (this.adapter_.hasClass(OPEN)) {
      this.isOpen_ = true;
    }

    this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
  };

  MDCSimpleMenuFoundation.prototype.destroy = function destroy() {
    clearTimeout(this.selectedTriggerTimerId_);
    // Cancel any currently running animations.
    cancelAnimationFrame(this.animationRequestId_);
    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);
  };

  /**
   * Calculates transition delays for individual menu items, so that they fade in one at a time.
   * @private
   */


  MDCSimpleMenuFoundation.prototype.applyTransitionDelays_ = function applyTransitionDelays_() {
    var _MDCSimpleMenuFoundat2 = MDCSimpleMenuFoundation.cssClasses,
        BOTTOM_LEFT = _MDCSimpleMenuFoundat2.BOTTOM_LEFT,
        BOTTOM_RIGHT = _MDCSimpleMenuFoundat2.BOTTOM_RIGHT;

    var numItems = this.adapter_.getNumberOfItems();
    var height = this.dimensions_.height;

    var transitionDuration = MDCSimpleMenuFoundation.numbers.TRANSITION_DURATION_MS / 1000;
    var start = MDCSimpleMenuFoundation.numbers.TRANSITION_SCALE_ADJUSTMENT_Y;

    for (var index = 0; index < numItems; index++) {
      var _adapter_$getYParamsF = this.adapter_.getYParamsForItemAtIndex(index),
          itemTop = _adapter_$getYParamsF.top,
          itemHeight = _adapter_$getYParamsF.height;

      this.itemHeight_ = itemHeight;
      var itemDelayFraction = itemTop / height;
      if (this.adapter_.hasClass(BOTTOM_LEFT) || this.adapter_.hasClass(BOTTOM_RIGHT)) {
        itemDelayFraction = (height - itemTop - itemHeight) / height;
      }
      var itemDelay = (start + itemDelayFraction * (1 - start)) * transitionDuration;
      // Use toFixed() here to normalize CSS unit precision across browsers
      this.adapter_.setTransitionDelayForItemAtIndex(index, itemDelay.toFixed(3) + 's');
    }
  };

  /**
   * Removes transition delays from menu items.
   * @private
   */


  MDCSimpleMenuFoundation.prototype.removeTransitionDelays_ = function removeTransitionDelays_() {
    var numItems = this.adapter_.getNumberOfItems();
    for (var i = 0; i < numItems; i++) {
      this.adapter_.setTransitionDelayForItemAtIndex(i, null);
    }
  };

  /**
   * Animates menu opening or closing.
   * @private
   */


  MDCSimpleMenuFoundation.prototype.animationLoop_ = function animationLoop_() {
    var _this2 = this;

    var time = this.adapter_.getAccurateTime();
    var _MDCSimpleMenuFoundat3 = MDCSimpleMenuFoundation.numbers,
        TRANSITION_DURATION_MS = _MDCSimpleMenuFoundat3.TRANSITION_DURATION_MS,
        TRANSITION_X1 = _MDCSimpleMenuFoundat3.TRANSITION_X1,
        TRANSITION_Y1 = _MDCSimpleMenuFoundat3.TRANSITION_Y1,
        TRANSITION_X2 = _MDCSimpleMenuFoundat3.TRANSITION_X2,
        TRANSITION_Y2 = _MDCSimpleMenuFoundat3.TRANSITION_Y2,
        TRANSITION_SCALE_ADJUSTMENT_X = _MDCSimpleMenuFoundat3.TRANSITION_SCALE_ADJUSTMENT_X,
        TRANSITION_SCALE_ADJUSTMENT_Y = _MDCSimpleMenuFoundat3.TRANSITION_SCALE_ADJUSTMENT_Y;

    var currentTime = clamp((time - this.startTime_) / TRANSITION_DURATION_MS);

    // Animate X axis very slowly, so that only the Y axis animation is visible during fade-out.
    var currentTimeX = clamp((currentTime - TRANSITION_SCALE_ADJUSTMENT_X) / (1 - TRANSITION_SCALE_ADJUSTMENT_X));
    // No time-shifting on the Y axis when closing.
    var currentTimeY = currentTime;

    var startScaleY = this.startScaleY_;
    if (this.targetScale_ === 1) {
      // Start with the menu at the height of a single item.
      if (this.itemHeight_) {
        startScaleY = Math.max(this.itemHeight_ / this.dimensions_.height, startScaleY);
      }
      // X axis moves faster, so time-shift forward.
      currentTimeX = clamp(currentTime + TRANSITION_SCALE_ADJUSTMENT_X);
      // Y axis moves slower, so time-shift backwards and adjust speed by the difference.
      currentTimeY = clamp((currentTime - TRANSITION_SCALE_ADJUSTMENT_Y) / (1 - TRANSITION_SCALE_ADJUSTMENT_Y));
    }

    // Apply cubic bezier easing independently to each axis.
    var easeX = bezierProgress(currentTimeX, TRANSITION_X1, TRANSITION_Y1, TRANSITION_X2, TRANSITION_Y2);
    var easeY = bezierProgress(currentTimeY, TRANSITION_X1, TRANSITION_Y1, TRANSITION_X2, TRANSITION_Y2);

    // Calculate the scales to apply to the outer container and inner container.
    this.scaleX_ = this.startScaleX_ + (this.targetScale_ - this.startScaleX_) * easeX;
    var invScaleX = 1 / (this.scaleX_ === 0 ? 1 : this.scaleX_);
    this.scaleY_ = startScaleY + (this.targetScale_ - startScaleY) * easeY;
    var invScaleY = 1 / (this.scaleY_ === 0 ? 1 : this.scaleY_);

    // Apply scales.
    this.adapter_.setScale(this.scaleX_, this.scaleY_);
    this.adapter_.setInnerScale(invScaleX, invScaleY);

    // Stop animation when we've covered the entire 0 - 1 range of time.
    if (currentTime < 1) {
      this.animationRequestId_ = requestAnimationFrame(function () {
        return _this2.animationLoop_();
      });
    } else {
      this.animationRequestId_ = 0;
      this.running_ = false;
      this.adapter_.removeClass(MDCSimpleMenuFoundation.cssClasses.ANIMATING);
    }
  };

  /**
   * Starts the open or close animation.
   * @private
   */


  MDCSimpleMenuFoundation.prototype.animateMenu_ = function animateMenu_() {
    var _this3 = this;

    this.startTime_ = this.adapter_.getAccurateTime();
    this.startScaleX_ = this.scaleX_;
    this.startScaleY_ = this.scaleY_;

    this.targetScale_ = this.isOpen_ ? 1 : 0;

    if (!this.running_) {
      this.running_ = true;
      this.animationRequestId_ = requestAnimationFrame(function () {
        return _this3.animationLoop_();
      });
    }
  };

  /**
   * @param {?number} focusIndex
   * @private
   */


  MDCSimpleMenuFoundation.prototype.focusOnOpen_ = function focusOnOpen_(focusIndex) {
    if (focusIndex === null) {
      // First, try focusing the menu.
      this.adapter_.focus();
      // If that doesn't work, focus first item instead.
      if (!this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(0);
      }
    } else {
      this.adapter_.focusItemAtIndex(focusIndex);
    }
  };

  /**
   * Handle keys that we want to repeat on hold (tab and arrows).
   * @param {!Event} evt
   * @return {boolean}
   * @private
   */


  MDCSimpleMenuFoundation.prototype.handleKeyboardDown_ = function handleKeyboardDown_(evt) {
    // Do nothing if Alt, Ctrl or Meta are pressed.
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return true;
    }

    var keyCode = evt.keyCode,
        key = evt.key,
        shiftKey = evt.shiftKey;

    var isTab = key === 'Tab' || keyCode === 9;
    var isArrowUp = key === 'ArrowUp' || keyCode === 38;
    var isArrowDown = key === 'ArrowDown' || keyCode === 40;
    var isSpace = key === 'Space' || keyCode === 32;

    var focusedItemIndex = this.adapter_.getFocusedItemIndex();
    var lastItemIndex = this.adapter_.getNumberOfItems() - 1;

    if (shiftKey && isTab && focusedItemIndex === 0) {
      this.adapter_.focusItemAtIndex(lastItemIndex);
      evt.preventDefault();
      return false;
    }

    if (!shiftKey && isTab && focusedItemIndex === lastItemIndex) {
      this.adapter_.focusItemAtIndex(0);
      evt.preventDefault();
      return false;
    }

    // Ensure Arrow{Up,Down} and space do not cause inadvertent scrolling
    if (isArrowUp || isArrowDown || isSpace) {
      evt.preventDefault();
    }

    if (isArrowUp) {
      if (focusedItemIndex === 0 || this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(lastItemIndex);
      } else {
        this.adapter_.focusItemAtIndex(focusedItemIndex - 1);
      }
    } else if (isArrowDown) {
      if (focusedItemIndex === lastItemIndex || this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(0);
      } else {
        this.adapter_.focusItemAtIndex(focusedItemIndex + 1);
      }
    }

    return true;
  };

  /**
   * Handle keys that we don't want to repeat on hold (Enter, Space, Escape).
   * @param {!Event} evt
   * @return {boolean}
   * @private
   */


  MDCSimpleMenuFoundation.prototype.handleKeyboardUp_ = function handleKeyboardUp_(evt) {
    // Do nothing if Alt, Ctrl or Meta are pressed.
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return true;
    }

    var keyCode = evt.keyCode,
        key = evt.key;

    var isEnter = key === 'Enter' || keyCode === 13;
    var isSpace = key === 'Space' || keyCode === 32;
    var isEscape = key === 'Escape' || keyCode === 27;

    if (isEnter || isSpace) {
      this.handlePossibleSelected_(evt);
    }

    if (isEscape) {
      this.adapter_.notifyCancel();
      this.close();
    }

    return true;
  };

  /**
   * @param {!Event} evt
   * @private
   */


  MDCSimpleMenuFoundation.prototype.handlePossibleSelected_ = function handlePossibleSelected_(evt) {
    var _this4 = this;

    if (this.adapter_.getAttributeForEventTarget(evt.target, simple_constants_strings.ARIA_DISABLED_ATTR) === 'true') {
      return;
    }
    var targetIndex = this.adapter_.getIndexForEventTarget(evt.target);
    if (targetIndex < 0) {
      return;
    }
    // Debounce multiple selections
    if (this.selectedTriggerTimerId_) {
      return;
    }
    this.selectedTriggerTimerId_ = setTimeout(function () {
      _this4.selectedTriggerTimerId_ = 0;
      _this4.close();
      _this4.adapter_.notifySelected({ index: targetIndex });
    }, simple_constants_numbers.SELECTED_TRIGGER_DELAY);
  };

  /** @private */


  MDCSimpleMenuFoundation.prototype.autoPosition_ = function autoPosition_() {
    var _position;

    if (!this.adapter_.hasAnchor()) {
      return;
    }

    // Defaults: open from the top left.
    var vertical = 'top';
    var horizontal = 'left';

    var anchor = this.adapter_.getAnchorDimensions();
    var windowDimensions = this.adapter_.getWindowDimensions();

    var topOverflow = anchor.top + this.dimensions_.height - windowDimensions.height;
    var bottomOverflow = this.dimensions_.height - anchor.bottom;
    var extendsBeyondTopBounds = topOverflow > 0;

    if (extendsBeyondTopBounds) {
      if (bottomOverflow < topOverflow) {
        vertical = 'bottom';
      }
    }

    var leftOverflow = anchor.left + this.dimensions_.width - windowDimensions.width;
    var rightOverflow = this.dimensions_.width - anchor.right;
    var extendsBeyondLeftBounds = leftOverflow > 0;
    var extendsBeyondRightBounds = rightOverflow > 0;

    if (this.adapter_.isRtl()) {
      // In RTL, we prefer to open from the right.
      horizontal = 'right';
      if (extendsBeyondRightBounds && leftOverflow < rightOverflow) {
        horizontal = 'left';
      }
    } else if (extendsBeyondLeftBounds && rightOverflow < leftOverflow) {
      horizontal = 'right';
    }

    var position = (_position = {}, _position[horizontal] = '0', _position[vertical] = '0', _position);

    this.adapter_.setTransformOrigin(vertical + ' ' + horizontal);
    this.adapter_.setPosition(position);
  };

  /**
   * Open the menu.
   * @param {{focusIndex: ?number}=} options
   */


  MDCSimpleMenuFoundation.prototype.open = function open() {
    var _this5 = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$focusIndex = _ref.focusIndex,
        focusIndex = _ref$focusIndex === undefined ? null : _ref$focusIndex;

    this.adapter_.saveFocus();
    this.adapter_.addClass(MDCSimpleMenuFoundation.cssClasses.ANIMATING);
    this.animationRequestId_ = requestAnimationFrame(function () {
      _this5.dimensions_ = _this5.adapter_.getInnerDimensions();
      _this5.applyTransitionDelays_();
      _this5.autoPosition_();
      _this5.animateMenu_();
      _this5.adapter_.addClass(MDCSimpleMenuFoundation.cssClasses.OPEN);
      _this5.focusOnOpen_(focusIndex);
      _this5.adapter_.registerBodyClickHandler(_this5.documentClickHandler_);
    });
    this.isOpen_ = true;
  };

  /**
   * Closes the menu.
   * @param {Event=} evt
   */


  MDCSimpleMenuFoundation.prototype.close = function close() {
    var _this6 = this;

    var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var targetIsDisabled = evt ? this.adapter_.getAttributeForEventTarget(evt.target, simple_constants_strings.ARIA_DISABLED_ATTR) === 'true' : false;

    if (targetIsDisabled) {
      return;
    }

    this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);
    this.adapter_.addClass(MDCSimpleMenuFoundation.cssClasses.ANIMATING);
    requestAnimationFrame(function () {
      _this6.removeTransitionDelays_();
      _this6.animateMenu_();
      _this6.adapter_.removeClass(MDCSimpleMenuFoundation.cssClasses.OPEN);
    });
    this.isOpen_ = false;
    this.adapter_.restoreFocus();
  };

  /** @return {boolean} */


  MDCSimpleMenuFoundation.prototype.isOpen = function isOpen() {
    return this.isOpen_;
  };

  return MDCSimpleMenuFoundation;
}(base_foundation);

/* harmony default export */ var simple_foundation = (foundation_MDCSimpleMenuFoundation);
// CONCATENATED MODULE: ../node_modules/@material/menu/simple/index.js
var simple__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function simple__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function simple__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function simple__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @extends MDCComponent<!MDCSimpleMenuFoundation>
 */

var simple_MDCSimpleMenu = function (_MDCComponent) {
  simple__inherits(MDCSimpleMenu, _MDCComponent);

  /** @param {...?} args */
  function MDCSimpleMenu() {
    simple__classCallCheck(this, MDCSimpleMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!Element} */
    var _this = simple__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.previousFocus_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @return {!MDCSimpleMenu}
   */


  MDCSimpleMenu.attachTo = function attachTo(root) {
    return new MDCSimpleMenu(root);
  };

  /** @return {boolean} */


  /** @param {{focusIndex: ?number}=} options */
  MDCSimpleMenu.prototype.show = function show() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$focusIndex = _ref.focusIndex,
        focusIndex = _ref$focusIndex === undefined ? null : _ref$focusIndex;

    this.foundation_.open({ focusIndex: focusIndex });
  };

  MDCSimpleMenu.prototype.hide = function hide() {
    this.foundation_.close();
  };

  /**
   * Return the item container element inside the component.
   * @return {?Element}
   */


  /** @return {!MDCSimpleMenuFoundation} */
  MDCSimpleMenu.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new simple_foundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      hasNecessaryDom: function hasNecessaryDom() {
        return Boolean(_this2.itemsContainer_);
      },
      getAttributeForEventTarget: function getAttributeForEventTarget(target, attributeName) {
        return target.getAttribute(attributeName);
      },
      getInnerDimensions: function getInnerDimensions() {
        var itemsContainer = _this2.itemsContainer_;

        return { width: itemsContainer.offsetWidth, height: itemsContainer.offsetHeight };
      },
      hasAnchor: function hasAnchor() {
        return _this2.root_.parentElement && _this2.root_.parentElement.classList.contains('mdc-menu-anchor');
      },
      getAnchorDimensions: function getAnchorDimensions() {
        return _this2.root_.parentElement.getBoundingClientRect();
      },
      getWindowDimensions: function getWindowDimensions() {
        return { width: window.innerWidth, height: window.innerHeight };
      },
      setScale: function setScale(x, y) {
        _this2.root_.style[util_getTransformPropertyName(window)] = 'scale(' + x + ', ' + y + ')';
      },
      setInnerScale: function setInnerScale(x, y) {
        _this2.itemsContainer_.style[util_getTransformPropertyName(window)] = 'scale(' + x + ', ' + y + ')';
      },
      getNumberOfItems: function getNumberOfItems() {
        return _this2.items.length;
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return _this2.root_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return _this2.root_.removeEventListener(type, handler);
      },
      registerBodyClickHandler: function registerBodyClickHandler(handler) {
        return document.body.addEventListener('click', handler);
      },
      deregisterBodyClickHandler: function deregisterBodyClickHandler(handler) {
        return document.body.removeEventListener('click', handler);
      },
      getYParamsForItemAtIndex: function getYParamsForItemAtIndex(index) {
        var _items$index = _this2.items[index],
            top = _items$index.offsetTop,
            height = _items$index.offsetHeight;

        return { top: top, height: height };
      },
      setTransitionDelayForItemAtIndex: function setTransitionDelayForItemAtIndex(index, value) {
        return _this2.items[index].style.setProperty('transition-delay', value);
      },
      getIndexForEventTarget: function getIndexForEventTarget(target) {
        return _this2.items.indexOf(target);
      },
      notifySelected: function notifySelected(evtData) {
        return _this2.emit(simple_foundation.strings.SELECTED_EVENT, {
          index: evtData.index,
          item: _this2.items[evtData.index]
        });
      },
      notifyCancel: function notifyCancel() {
        return _this2.emit(simple_foundation.strings.CANCEL_EVENT, {});
      },
      saveFocus: function saveFocus() {
        _this2.previousFocus_ = document.activeElement;
      },
      restoreFocus: function restoreFocus() {
        if (_this2.previousFocus_) {
          _this2.previousFocus_.focus();
        }
      },
      isFocused: function isFocused() {
        return document.activeElement === _this2.root_;
      },
      focus: function focus() {
        return _this2.root_.focus();
      },
      getFocusedItemIndex: function getFocusedItemIndex() {
        return _this2.items.indexOf(document.activeElement);
      },
      focusItemAtIndex: function focusItemAtIndex(index) {
        return _this2.items[index].focus();
      },
      isRtl: function isRtl() {
        return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
      },
      setTransformOrigin: function setTransformOrigin(origin) {
        _this2.root_.style[util_getTransformPropertyName(window) + '-origin'] = origin;
      },
      setPosition: function setPosition(position) {
        _this2.root_.style.left = 'left' in position ? position.left : null;
        _this2.root_.style.right = 'right' in position ? position.right : null;
        _this2.root_.style.top = 'top' in position ? position.top : null;
        _this2.root_.style.bottom = 'bottom' in position ? position.bottom : null;
      },
      getAccurateTime: function getAccurateTime() {
        return window.performance.now();
      }
    });
  };

  simple__createClass(MDCSimpleMenu, [{
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    }

    /** @param {boolean} value */
    ,
    set: function set(value) {
      if (value) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }
  }, {
    key: 'itemsContainer_',
    get: function get() {
      return this.root_.querySelector(simple_foundation.strings.ITEMS_SELECTOR);
    }

    /**
     * Return the items within the menu. Note that this only contains the set of elements within
     * the items container that are proper list items, and not supplemental / presentational DOM
     * elements.
     * @return {!Array<!Element>}
     */

  }, {
    key: 'items',
    get: function get() {
      var itemsContainer = this.itemsContainer_;

      return [].slice.call(itemsContainer.querySelectorAll('.mdc-list-item[role]'));
    }
  }]);

  return MDCSimpleMenu;
}(base_component);


// CONCATENATED MODULE: ../node_modules/@material/menu/index.js
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




// CONCATENATED MODULE: ../node_modules/preact-material-components/Menu/index.js
function Menu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Menu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Menu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Menu__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};






/*
 * Default props for menu
 */
var Menu_defaultProps = {
  open: false
};

/**
 * @prop open = false
 */

var Menu_Menu = function (_MaterialComponent) {
  Menu__inherits(Menu, _MaterialComponent);

  function Menu() {
    Menu__classCallCheck(this, Menu);

    var _this = Menu__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "simple-menu";
    _this._mdcProps = ["open", "open-from-top-left", "open-from-top-right", "open-from-bottom-left", "open-from-bottom-right"];
    _this._select = _this._select.bind(_this);
    _this._cancel = _this._cancel.bind(_this);
    return _this;
  }

  Menu.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new simple_MDCSimpleMenu(this.control);
    this.MDComponent.listen("MDCSimpleMenu:selected", this._select);
    this.MDComponent.listen("MDCSimpleMenu:cancel", this._cancel);
    toggleMenu(Menu_defaultProps, this.props, this.MDComponent);
  };

  Menu.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCSimpleMenu:selected", this._select);
    this.MDComponent.unlisten("MDCSimpleMenu:cancel", this._cancel);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Menu.prototype._select = function _select() {
    if (this.props.onSelect) {
      this.props.onSelect();
    }
    this._menuClosed();
  };

  Menu.prototype._cancel = function _cancel() {
    if (this.props.onCancel) {
      this.props.onCancel();
    }
    this._menuClosed();
  };

  Menu.prototype._menuClosed = function _menuClosed() {
    if (this.props.onMenuClosed) {
      this.props.onMenuClosed();
    }
  };

  Menu.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    toggleMenu(this.props, nextProps, this.MDComponent);
  };

  Menu.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("div", Menu__extends({ tabindex: "-1" }, props, { ref: function ref(control) {
        return _this2.control = control;
      } }), Object(preact_min["h"])("ul", {
      "class": "mdc-simple-menu__items mdc-list",
      role: "menu",
      "aria-hidden": "true"
    }, props.children));
  };

  return Menu;
}(MaterialComponent_MaterialComponent);

var MenuAnchor = function (_MaterialComponent2) {
  Menu__inherits(MenuAnchor, _MaterialComponent2);

  function MenuAnchor() {
    Menu__classCallCheck(this, MenuAnchor);

    var _this3 = Menu__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "menu-anchor";
    return _this3;
  }

  return MenuAnchor;
}(MaterialComponent_MaterialComponent);

/*
 * Function to add declarative opening/closing to drawer
 */


function toggleMenu(oldprops, newprops, menu) {
  if ("open" in oldprops && "open" in newprops && oldprops.open !== newprops.open) {
    menu.open = newprops.open;
  }
}

Menu_Menu.Anchor = MenuAnchor;
Menu_Menu.Item = preact_material_components_List.Item;
/* harmony default export */ var preact_material_components_Menu = (Menu_Menu);
// EXTERNAL MODULE: ./routes/menu/sample.txt
var menu_sample = __webpack_require__("iDKb");
var menu_sample_default = /*#__PURE__*/__webpack_require__.n(menu_sample);

// CONCATENATED MODULE: ./routes/menu/index.js


function menu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function menu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function menu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components



// Components



// Samples


// Class

var menu__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var menu__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    menu_sample_default.a
  )
);

var menu__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var menu__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-menu"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-menu" },
    " ",
    "here"
  ),
  "."
);

var menu__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var menu__ref6 = Object(preact_min["h"])(
  preact_material_components_Menu.Item,
  null,
  "Hello1"
);

var menu__ref7 = Object(preact_min["h"])(
  preact_material_components_Menu.Item,
  null,
  "Hello2"
);

var menu__ref8 = Object(preact_min["h"])(
  preact_material_components_Menu.Item,
  null,
  "Hello3"
);

var menu__ref9 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Note "
);

var menu__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  Object(preact_min["h"])(
    "div",
    null,
    "If you are using this component individually, DO NOT FORGET to import",
    Object(preact_min["h"])(
      "i",
      null,
      " 'preact-material-components/List/style.css'"
    )
  )
);

var menu_MenuPage = function (_Component) {
  menu__inherits(MenuPage, _Component);

  function MenuPage() {
    menu__classCallCheck(this, MenuPage);

    var _this = menu__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Menu",
      props: [{
        name: "Open",
        description: "Auto opens the menu."
      }]
    }, {
      component: "Item",
      props: []
    }, {
      component: "MenuAnchor",
      props: []
    }];
    return _this;
  }

  MenuPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      { className: "page-menu" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      menu__ref,
      menu__ref2,
      menu__ref3,
      menu__ref4,
      menu__ref5,
      Object(preact_min["h"])(
        preact_material_components_Menu.Anchor,
        null,
        Object(preact_min["h"])(
          preact_material_components_Button,
          {
            onClick: function onClick(e) {
              _this2.menu.MDComponent.open = !_this2.menu.MDComponent.open;
            }
          },
          "Click for menu"
        ),
        Object(preact_min["h"])(
          preact_material_components_Menu,
          {
            ref: function ref(menu) {
              _this2.menu = menu;
            }
          },
          menu__ref6,
          menu__ref7,
          menu__ref8
        )
      ),
      menu__ref9,
      menu__ref10
    );
  };

  return MenuPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/radio/sample.txt
var radio_sample = __webpack_require__("CRqb");
var radio_sample_default = /*#__PURE__*/__webpack_require__.n(radio_sample);

// CONCATENATED MODULE: ./routes/radio/index.js


function routes_radio__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_radio__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_radio__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components



// Components



// Samples


// Class

var radio__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var radio__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    radio_sample_default.a
  )
);

var radio__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var radio__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-radio"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio" },
    " ",
    "here"
  ),
  "."
);

var radio__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var radio__ref6 = Object(preact_min["h"])(
  Formfield,
  null,
  Object(preact_min["h"])(Radio_Radio, { id: "r1", name: "opts" }),
  Object(preact_min["h"])(
    "label",
    { "for": "r1" },
    "Radio 1"
  )
);

var radio__ref7 = Object(preact_min["h"])(
  Formfield,
  null,
  Object(preact_min["h"])(Radio_Radio, { id: "r2", name: "opts" }),
  Object(preact_min["h"])(
    "label",
    { "for": "r2" },
    "Radio 2"
  )
);

var radio__ref8 = Object(preact_min["h"])(
  Formfield,
  null,
  Object(preact_min["h"])(Radio_Radio, { id: "r3", name: "opts", disabled: true }),
  Object(preact_min["h"])(
    "label",
    { "for": "r3" },
    "Disabled Radio "
  )
);

var radio_RadioPage = function (_Component) {
  routes_radio__inherits(RadioPage, _Component);

  function RadioPage() {
    routes_radio__classCallCheck(this, RadioPage);

    var _this = routes_radio__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Radio",
      props: [{
        name: "checked",
        description: "This makes the Radio button checked."
      }, {
        name: "disabled",
        description: "This makes the Radio button disabled."
      }]
    }];
    return _this;
  }

  RadioPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      radio__ref,
      radio__ref2,
      radio__ref3,
      radio__ref4,
      radio__ref5,
      radio__ref6,
      radio__ref7,
      radio__ref8
    );
  };

  return RadioPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/select/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var select_constants_cssClasses = {
  ROOT: 'mdc-select',
  OPEN: 'mdc-select--open',
  DISABLED: 'mdc-select--disabled'
};

var select_constants_strings = {
  CHANGE_EVENT: 'MDCSelect:change'
};
// CONCATENATED MODULE: ../node_modules/@material/select/foundation.js
var select_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var select_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function select_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function select_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function select_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var OPENER_KEYS = [{ key: 'ArrowUp', keyCode: 38, forType: 'keydown' }, { key: 'ArrowDown', keyCode: 40, forType: 'keydown' }, { key: 'Space', keyCode: 32, forType: 'keyup' }];

var foundation_MDCSelectFoundation = function (_MDCFoundation) {
  select_foundation__inherits(MDCSelectFoundation, _MDCFoundation);

  select_foundation__createClass(MDCSelectFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return select_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return select_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        setAttr: function setAttr() /* attr: string, value: string */{},
        rmAttr: function rmAttr() /* attr: string */{},
        computeBoundingRect: function computeBoundingRect() {
          return (/* {left: number, top: number} */{ left: 0, top: 0 }
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* type: string, handler: EventListener */{},
        focus: function focus() {},
        makeTabbable: function makeTabbable() {},
        makeUntabbable: function makeUntabbable() {},
        getComputedStyleValue: function getComputedStyleValue() {
          return (/* propertyName: string */ /* string */''
          );
        },
        setStyle: function setStyle() /* propertyName: string, value: string */{},
        create2dRenderingContext: function create2dRenderingContext() {
          return (/* {font: string, measureText: (string) => {width: number}} */{
              font: '',
              measureText: function measureText() {
                return { width: 0 };
              }
            }
          );
        },
        setMenuElStyle: function setMenuElStyle() /* propertyName: string, value: string */{},
        setMenuElAttr: function setMenuElAttr() /* attr: string, value: string */{},
        rmMenuElAttr: function rmMenuElAttr() /* attr: string */{},
        getMenuElOffsetHeight: function getMenuElOffsetHeight() {
          return (/* number */0
          );
        },
        openMenu: function openMenu() /* focusIndex: number */{},
        isMenuOpen: function isMenuOpen() {
          return (/* boolean */false
          );
        },
        setSelectedTextContent: function setSelectedTextContent() /* textContent: string */{},
        getNumberOfOptions: function getNumberOfOptions() {
          return (/* number */0
          );
        },
        getTextForOptionAtIndex: function getTextForOptionAtIndex() {
          return (/* index: number */ /* string */''
          );
        },
        getValueForOptionAtIndex: function getValueForOptionAtIndex() {
          return (/* index: number */ /* string */''
          );
        },
        setAttrForOptionAtIndex: function setAttrForOptionAtIndex() /* index: number, attr: string, value: string */{},
        rmAttrForOptionAtIndex: function rmAttrForOptionAtIndex() /* index: number, attr: string */{},
        getOffsetTopForOptionAtIndex: function getOffsetTopForOptionAtIndex() {
          return (/* index: number */ /* number */0
          );
        },
        registerMenuInteractionHandler: function registerMenuInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterMenuInteractionHandler: function deregisterMenuInteractionHandler() /* type: string, handler: EventListener */{},
        notifyChange: function notifyChange() {},
        getWindowInnerHeight: function getWindowInnerHeight() {
          return (/* number */0
          );
        }
      };
    }
  }]);

  function MDCSelectFoundation(adapter) {
    select_foundation__classCallCheck(this, MDCSelectFoundation);

    var _this = select_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, select_foundation__extends(MDCSelectFoundation.defaultAdapter, adapter)));

    _this.ctx_ = null;
    _this.selectedIndex_ = -1;
    _this.disabled_ = false;
    _this.displayHandler_ = function (evt) {
      evt.preventDefault();
      if (!_this.adapter_.isMenuOpen()) {
        _this.open_();
      }
    };
    _this.displayViaKeyboardHandler_ = function (evt) {
      return _this.handleDisplayViaKeyboard_(evt);
    };
    _this.selectionHandler_ = function (_ref) {
      var detail = _ref.detail;
      var index = detail.index;

      _this.close_();
      if (index !== _this.selectedIndex_) {
        _this.setSelectedIndex(index);
        _this.adapter_.notifyChange();
      }
    };
    _this.cancelHandler_ = function () {
      _this.close_();
    };
    return _this;
  }

  MDCSelectFoundation.prototype.init = function init() {
    this.ctx_ = this.adapter_.create2dRenderingContext();
    this.adapter_.registerInteractionHandler('click', this.displayHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.displayViaKeyboardHandler_);
    this.adapter_.registerInteractionHandler('keyup', this.displayViaKeyboardHandler_);
    this.adapter_.registerMenuInteractionHandler(simple_foundation.strings.SELECTED_EVENT, this.selectionHandler_);
    this.adapter_.registerMenuInteractionHandler(simple_foundation.strings.CANCEL_EVENT, this.cancelHandler_);
    this.resize();
  };

  MDCSelectFoundation.prototype.destroy = function destroy() {
    // Drop reference to context object to prevent potential leaks
    this.ctx_ = null;
    this.adapter_.deregisterInteractionHandler('click', this.displayHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.displayViaKeyboardHandler_);
    this.adapter_.deregisterInteractionHandler('keyup', this.displayViaKeyboardHandler_);
    this.adapter_.deregisterMenuInteractionHandler(simple_foundation.strings.SELECTED_EVENT, this.selectionHandler_);
    this.adapter_.deregisterMenuInteractionHandler(simple_foundation.strings.CANCEL_EVENT, this.cancelHandler_);
  };

  MDCSelectFoundation.prototype.getValue = function getValue() {
    return this.selectedIndex_ >= 0 ? this.adapter_.getValueForOptionAtIndex(this.selectedIndex_) : '';
  };

  MDCSelectFoundation.prototype.getSelectedIndex = function getSelectedIndex() {
    return this.selectedIndex_;
  };

  MDCSelectFoundation.prototype.setSelectedIndex = function setSelectedIndex(index) {
    var prevSelectedIndex = this.selectedIndex_;
    if (prevSelectedIndex >= 0) {
      this.adapter_.rmAttrForOptionAtIndex(this.selectedIndex_, 'aria-selected');
    }

    this.selectedIndex_ = index >= 0 && index < this.adapter_.getNumberOfOptions() ? index : -1;
    var selectedTextContent = '';
    if (this.selectedIndex_ >= 0) {
      selectedTextContent = this.adapter_.getTextForOptionAtIndex(this.selectedIndex_).trim();
      this.adapter_.setAttrForOptionAtIndex(this.selectedIndex_, 'aria-selected', 'true');
    }
    this.adapter_.setSelectedTextContent(selectedTextContent);
  };

  MDCSelectFoundation.prototype.isDisabled = function isDisabled() {
    return this.disabled_;
  };

  MDCSelectFoundation.prototype.setDisabled = function setDisabled(disabled) {
    var DISABLED = MDCSelectFoundation.cssClasses.DISABLED;

    this.disabled_ = disabled;
    if (this.disabled_) {
      this.adapter_.addClass(DISABLED);
      this.adapter_.setAttr('aria-disabled', 'true');
      this.adapter_.makeUntabbable();
    } else {
      this.adapter_.removeClass(DISABLED);
      this.adapter_.rmAttr('aria-disabled');
      this.adapter_.makeTabbable();
    }
  };

  MDCSelectFoundation.prototype.resize = function resize() {
    var font = this.adapter_.getComputedStyleValue('font');
    var letterSpacing = parseFloat(this.adapter_.getComputedStyleValue('letter-spacing'));
    if (font) {
      this.ctx_.font = font;
    } else {
      var primaryFontFamily = this.adapter_.getComputedStyleValue('font-family').split(',')[0];
      var fontSize = this.adapter_.getComputedStyleValue('font-size');
      this.ctx_.font = fontSize + ' ' + primaryFontFamily;
    }

    var maxTextLength = 0;
    for (var i = 0, l = this.adapter_.getNumberOfOptions(); i < l; i++) {
      var txt = this.adapter_.getTextForOptionAtIndex(i).trim();

      var _ctx_$measureText = this.ctx_.measureText(txt),
          width = _ctx_$measureText.width;

      var addedSpace = letterSpacing * txt.length;
      maxTextLength = Math.max(maxTextLength, Math.ceil(width + addedSpace));
    }
    this.adapter_.setStyle('width', maxTextLength + 'px');
  };

  MDCSelectFoundation.prototype.open_ = function open_() {
    var OPEN = MDCSelectFoundation.cssClasses.OPEN;

    var focusIndex = this.selectedIndex_ < 0 ? 0 : this.selectedIndex_;

    this.setMenuStylesForOpenAtIndex_(focusIndex);
    this.adapter_.addClass(OPEN);
    this.adapter_.openMenu(focusIndex);
  };

  MDCSelectFoundation.prototype.setMenuStylesForOpenAtIndex_ = function setMenuStylesForOpenAtIndex_(index) {
    var innerHeight = this.adapter_.getWindowInnerHeight();

    var _adapter_$computeBoun = this.adapter_.computeBoundingRect(),
        left = _adapter_$computeBoun.left,
        top = _adapter_$computeBoun.top;

    this.adapter_.setMenuElAttr('aria-hidden', 'true');
    this.adapter_.setMenuElStyle('display', 'block');
    var menuHeight = this.adapter_.getMenuElOffsetHeight();
    var itemOffsetTop = this.adapter_.getOffsetTopForOptionAtIndex(index);
    this.adapter_.setMenuElStyle('display', '');
    this.adapter_.rmMenuElAttr('aria-hidden');

    var adjustedTop = top - itemOffsetTop;
    var overflowsTop = adjustedTop < 0;
    var overflowsBottom = adjustedTop + menuHeight > innerHeight;
    if (overflowsTop) {
      adjustedTop = 0;
    } else if (overflowsBottom) {
      adjustedTop = Math.max(0, innerHeight - menuHeight);
    };

    this.adapter_.setMenuElStyle('left', left + 'px');
    this.adapter_.setMenuElStyle('top', adjustedTop + 'px');
    this.adapter_.setMenuElStyle('transform-origin', 'center ' + itemOffsetTop + 'px');
  };

  MDCSelectFoundation.prototype.close_ = function close_() {
    var OPEN = MDCSelectFoundation.cssClasses.OPEN;

    this.adapter_.removeClass(OPEN);
    this.adapter_.focus();
  };

  MDCSelectFoundation.prototype.handleDisplayViaKeyboard_ = function handleDisplayViaKeyboard_(evt) {
    // We use a hard-coded 2 instead of Event.AT_TARGET to avoid having to reference a browser
    // global.
    var EVENT_PHASE_AT_TARGET = 2;
    if (evt.eventPhase !== EVENT_PHASE_AT_TARGET) {
      return;
    }

    // Prevent pressing space down from scrolling the page
    var isSpaceDown = evt.type === 'keydown' && (evt.key === 'Space' || evt.keyCode === 32);
    if (isSpaceDown) {
      evt.preventDefault();
    }

    var isOpenerKey = OPENER_KEYS.some(function (_ref2) {
      var key = _ref2.key,
          keyCode = _ref2.keyCode,
          forType = _ref2.forType;

      return evt.type === forType && (evt.key === key || evt.keyCode === keyCode);
    });
    if (isOpenerKey) {
      this.displayHandler_(evt);
    }
  };

  return MDCSelectFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/select/index.js
var select__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function select__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function select__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function select__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var select_MDCSelect = function (_MDCComponent) {
  select__inherits(MDCSelect, _MDCComponent);

  function MDCSelect() {
    select__classCallCheck(this, MDCSelect);

    return select__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCSelect.attachTo = function attachTo(root) {
    return new MDCSelect(root);
  };

  MDCSelect.prototype.item = function item(index) {
    return this.options[index] || null;
  };

  MDCSelect.prototype.nameditem = function nameditem(key) {
    // NOTE: IE11 precludes us from using Array.prototype.find
    for (var i = 0, options = this.options, option; option = options[i]; i++) {
      if (option.id === key || option.getAttribute('name') === key) {
        return option;
      }
    }
    return null;
  };

  MDCSelect.prototype.initialize = function initialize() {
    var menuFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {
      return new simple_MDCSimpleMenu(el);
    };

    this.menuEl_ = this.root_.querySelector('.mdc-select__menu');
    this.menu_ = menuFactory(this.menuEl_);
    this.selectedText_ = this.root_.querySelector('.mdc-select__selected-text');
  };

  MDCSelect.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCSelectFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      setAttr: function setAttr(attr, value) {
        return _this2.root_.setAttribute(attr, value);
      },
      rmAttr: function rmAttr(attr, value) {
        return _this2.root_.removeAttribute(attr, value);
      },
      computeBoundingRect: function computeBoundingRect() {
        return _this2.root_.getBoundingClientRect();
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return _this2.root_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return _this2.root_.removeEventListener(type, handler);
      },
      focus: function focus() {
        return _this2.root_.focus();
      },
      makeTabbable: function makeTabbable() {
        _this2.root_.tabIndex = 0;
      },
      makeUntabbable: function makeUntabbable() {
        _this2.root_.tabIndex = -1;
      },
      getComputedStyleValue: function getComputedStyleValue(prop) {
        return window.getComputedStyle(_this2.root_).getPropertyValue(prop);
      },
      setStyle: function setStyle(propertyName, value) {
        return _this2.root_.style.setProperty(propertyName, value);
      },
      create2dRenderingContext: function create2dRenderingContext() {
        return document.createElement('canvas').getContext('2d');
      },
      setMenuElStyle: function setMenuElStyle(propertyName, value) {
        return _this2.menuEl_.style.setProperty(propertyName, value);
      },
      setMenuElAttr: function setMenuElAttr(attr, value) {
        return _this2.menuEl_.setAttribute(attr, value);
      },
      rmMenuElAttr: function rmMenuElAttr(attr) {
        return _this2.menuEl_.removeAttribute(attr);
      },
      getMenuElOffsetHeight: function getMenuElOffsetHeight() {
        return _this2.menuEl_.offsetHeight;
      },
      openMenu: function openMenu(focusIndex) {
        return _this2.menu_.show({ focusIndex: focusIndex });
      },
      isMenuOpen: function isMenuOpen() {
        return _this2.menu_.open;
      },
      setSelectedTextContent: function setSelectedTextContent(selectedTextContent) {
        _this2.selectedText_.textContent = selectedTextContent;
      },
      getNumberOfOptions: function getNumberOfOptions() {
        return _this2.options.length;
      },
      getTextForOptionAtIndex: function getTextForOptionAtIndex(index) {
        return _this2.options[index].textContent;
      },
      getValueForOptionAtIndex: function getValueForOptionAtIndex(index) {
        return _this2.options[index].id || _this2.options[index].textContent;
      },
      setAttrForOptionAtIndex: function setAttrForOptionAtIndex(index, attr, value) {
        return _this2.options[index].setAttribute(attr, value);
      },
      rmAttrForOptionAtIndex: function rmAttrForOptionAtIndex(index, attr) {
        return _this2.options[index].removeAttribute(attr);
      },
      getOffsetTopForOptionAtIndex: function getOffsetTopForOptionAtIndex(index) {
        return _this2.options[index].offsetTop;
      },
      registerMenuInteractionHandler: function registerMenuInteractionHandler(type, handler) {
        return _this2.menu_.listen(type, handler);
      },
      deregisterMenuInteractionHandler: function deregisterMenuInteractionHandler(type, handler) {
        return _this2.menu_.unlisten(type, handler);
      },
      notifyChange: function notifyChange() {
        return _this2.emit(foundation_MDCSelectFoundation.strings.CHANGE_EVENT, _this2);
      },
      getWindowInnerHeight: function getWindowInnerHeight() {
        return window.innerHeight;
      }
    });
  };

  MDCSelect.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    var selectedOption = this.selectedOptions[0];
    var idx = selectedOption ? this.options.indexOf(selectedOption) : -1;
    if (idx >= 0) {
      this.selectedIndex = idx;
    }

    if (this.root_.getAttribute('aria-disabled') === 'true') {
      this.disabled = true;
    }
  };

  select__createClass(MDCSelect, [{
    key: 'value',
    get: function get() {
      return this.foundation_.getValue();
    }
  }, {
    key: 'options',
    get: function get() {
      return this.menu_.items;
    }
  }, {
    key: 'selectedOptions',
    get: function get() {
      return this.root_.querySelectorAll('[aria-selected]');
    }
  }, {
    key: 'selectedIndex',
    get: function get() {
      return this.foundation_.getSelectedIndex();
    },
    set: function set(selectedIndex) {
      this.foundation_.setSelectedIndex(selectedIndex);
    }
  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    },
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }
  }]);

  return MDCSelect;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Select/index.js
function Select__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Select__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Select__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Select__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};






var Select_Select = function (_MaterialComponent) {
  Select__inherits(Select, _MaterialComponent);

  function Select() {
    Select__classCallCheck(this, Select);

    var _this = Select__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "select";
    _this._mdcProps = ["disabled"];
    _this._changed = _this._changed.bind(_this);
    return _this;
  }

  Select.prototype._changed = function _changed(e) {
    e = e || {};
    e.selectedIndex = e.selectedIndex || this.MDComponent.selectedIndex;
    e.selectedOptions = e.selectedOptions || this.MDComponent.selectedOptions;
    if (this.props.onChange) {
      this.props.onChange(e);
    }
  };

  Select.prototype.componentDidMount = function componentDidMount() {
    if (!this.props.basic) {
      this.MDComponent = new select_MDCSelect(this.control);
      this.MDComponent.listen("MDCSelect:change", this._changed);
      this.updateSelection();
    }
  };

  Select.prototype.componentWillUnmount = function componentWillUnmount() {
    if (!this.props.basic) {
      this.MDComponent.unlisten("MDCSelect:change", this._changed);
      this.MDComponent.destroy && this.MDComponent.destroy();
    }
  };

  Select.prototype.updateSelection = function updateSelection() {
    if ("selectedIndex" in this.props && this.MDComponent) {
      this.MDComponent.selectedIndex = this.props.selectedIndex;
    }
  };

  Select.prototype.componentDidUpdate = function componentDidUpdate() {
    this.updateSelection();
    if (this.MDComponent && this.MDComponent.foundation_) {
      this.MDComponent.foundation_.resize();
    }
  };

  Select.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    if (props.basic) {
      return Object(preact_min["h"])("select", Select__extends({}, props, {
        ref: function ref(control) {
          _this2.control = control;
        }
      }), props.children);
    }

    return Object(preact_min["h"])("div", Select__extends({
      role: "listbox"
    }, props, {
      ref: function ref(control) {
        _this2.control = control;
      }
    }), Object(preact_min["h"])("span", { className: "mdc-select__selected-text" }, props.hintText), Object(preact_min["h"])("div", { className: "mdc-simple-menu mdc-select__menu" }, Object(preact_min["h"])("ul", { className: "mdc-list mdc-simple-menu__items " }, props.children)));
  };

  return Select;
}(MaterialComponent_MaterialComponent);

Select_Select.Item = preact_material_components_List.Item;

/* harmony default export */ var preact_material_components_Select = (Select_Select);
// EXTERNAL MODULE: ./routes/select/sample.txt
var select_sample = __webpack_require__("iRQC");
var select_sample_default = /*#__PURE__*/__webpack_require__.n(select_sample);

// CONCATENATED MODULE: ./routes/select/index.js


function routes_select__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_select__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_select__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components




// Samples


// Class

var select__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var select__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    select_sample_default.a
  )
);

var select__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var select__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-select"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-select" },
    " ",
    "here"
  ),
  "."
);

var select__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var select__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Normal "
);

var select__ref7 = Object(preact_min["h"])(
  preact_material_components_Select,
  { hintText: "Select" },
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 1"
  ),
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 2"
  ),
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 3"
  ),
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 4"
  )
);

var select__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Basic "
);

var select__ref9 = Object(preact_min["h"])(
  preact_material_components_Select,
  { hintText: "Select", basic: true },
  Object(preact_min["h"])(
    "option",
    { value: "", "default": true, selected: true },
    "Pick a food"
  ),
  Object(preact_min["h"])(
    "option",
    { value: "grains" },
    "Bread, Cereal, Rice, and Pasta"
  ),
  Object(preact_min["h"])(
    "option",
    { value: "vegetables" },
    "Vegetables"
  ),
  Object(preact_min["h"])(
    "optgroup",
    { label: "Fruits" },
    Object(preact_min["h"])(
      "option",
      { value: "apple" },
      "Apple"
    ),
    Object(preact_min["h"])(
      "option",
      { value: "oranges" },
      "Orange"
    ),
    Object(preact_min["h"])(
      "option",
      { value: "banana" },
      "Banana"
    )
  ),
  Object(preact_min["h"])(
    "option",
    { value: "dairy" },
    "Milk, Yogurt, and Cheese"
  ),
  Object(preact_min["h"])(
    "option",
    { value: "meat" },
    "Meat, Poultry, Fish, Dry Beans, Eggs, and Nuts"
  ),
  Object(preact_min["h"])(
    "option",
    { value: "fats" },
    "Fats, Oils, and Sweets"
  )
);

var select__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Disabled "
);

var select__ref11 = Object(preact_min["h"])(
  preact_material_components_Select,
  { hintText: "Select", disabled: true },
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 1"
  ),
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 2"
  ),
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 3"
  ),
  Object(preact_min["h"])(
    preact_material_components_Select.Item,
    null,
    "Option 4"
  )
);

var select__ref12 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Note "
);

var select__ref13 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  Object(preact_min["h"])(
    "div",
    null,
    "If you are using this component individually, DO NOT FORGET to import",
    Object(preact_min["h"])(
      "i",
      null,
      " 'preact-material-components/Menu/style.css'"
    ),
    " and",
    Object(preact_min["h"])(
      "i",
      null,
      " 'preact-material-components/List/style.css'"
    )
  )
);

var select_SelectPage = function (_Component) {
  routes_select__inherits(SelectPage, _Component);

  function SelectPage() {
    routes_select__classCallCheck(this, SelectPage);

    var _this = routes_select__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Select",
      props: [{
        name: "disabled",
        description: "Makes the select box disabled."
      }, {
        name: "basic",
        description: "Makes the select box CSS only."
      }]
    }, {
      component: "Select.Item",
      props: []
    }];
    _this.eventsTable = [{
      name: "onChange",
      description: "Fired when the selection changes on Select box"
    }];
    return _this;
  }

  SelectPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-select" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      Object(preact_min["h"])(events_table_EventsTable, { data: this.eventsTable }),
      select__ref,
      select__ref2,
      select__ref3,
      select__ref4,
      select__ref5,
      select__ref6,
      select__ref7,
      select__ref8,
      select__ref9,
      select__ref10,
      select__ref11,
      select__ref12,
      select__ref13
    );
  };

  return SelectPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/slider/constants.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var slider_constants_cssClasses = {
  ACTIVE: 'mdc-slider--active',
  DISABLED: 'mdc-slider--disabled',
  DISCRETE: 'mdc-slider--discrete',
  FOCUS: 'mdc-slider--focus',
  IN_TRANSIT: 'mdc-slider--in-transit',
  OFF: 'mdc-slider--off',
  IS_DISCRETE: 'mdc-slider--discrete',
  HAS_TRACK_MARKER: 'mdc-slider--display-markers'
};

var slider_constants_strings = {
  TRACK_SELECTOR: '.mdc-slider__track',
  TRACK_MARKER_CONTAINER_SELECTOR: '.mdc-slider__track-marker-container',
  LAST_TRACK_MARKER_SELECTOR: '.mdc-slider__track-marker:last-child',
  THUMB_CONTAINER_SELECTOR: '.mdc-slider__thumb-container',
  PIN_VALUE_MARKER_SELECTOR: '.mdc-slider__pin-value-marker',
  ARIA_VALUEMIN: 'aria-valuemin',
  ARIA_VALUEMAX: 'aria-valuemax',
  ARIA_VALUENOW: 'aria-valuenow',
  ARIA_DISABLED: 'aria-disabled',
  STEP_DATA_ATTR: 'data-step',
  CHANGE_EVENT: 'MDCSlider:change',
  INPUT_EVENT: 'MDCSlider:input'
};

var slider_constants_numbers = {
  PAGE_FACTOR: 4
};
// CONCATENATED MODULE: ../node_modules/@material/slider/foundation.js
var slider_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var slider_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function slider_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function slider_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function slider_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var KEY_IDS = {
  ARROW_LEFT: 'ArrowLeft',
  ARROW_RIGHT: 'ArrowRight',
  ARROW_UP: 'ArrowUp',
  ARROW_DOWN: 'ArrowDown',
  HOME: 'Home',
  END: 'End',
  PAGE_UP: 'PageUp',
  PAGE_DOWN: 'PageDown'
};

var foundation_MDCSliderFoundation = function (_MDCFoundation) {
  slider_foundation__inherits(MDCSliderFoundation, _MDCFoundation);

  slider_foundation__createClass(MDCSliderFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return slider_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return slider_constants_strings;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return slider_constants_numbers;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        hasClass: function hasClass() {
          return (/* className: string */ /* boolean */false
          );
        },
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        getAttribute: function getAttribute() {
          return (/* name: string */ /* string|null */null
          );
        },
        setAttribute: function setAttribute() /* name: string, value: string */{},
        removeAttribute: function removeAttribute() /* name: string */{},
        computeBoundingRect: function computeBoundingRect() {
          return (/* ClientRect */{
              top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0
            }
          );
        },
        getTabIndex: function getTabIndex() {
          return (/* number */0
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* type: string, handler: EventListener */{},
        registerThumbContainerInteractionHandler: function registerThumbContainerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterThumbContainerInteractionHandler: function deregisterThumbContainerInteractionHandler() /* type: string, handler: EventListener */{},
        registerBodyInteractionHandler: function registerBodyInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterBodyInteractionHandler: function deregisterBodyInteractionHandler() /* type: string, handler: EventListener */{},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        notifyInput: function notifyInput() {},
        notifyChange: function notifyChange() {},
        setThumbContainerStyleProperty: function setThumbContainerStyleProperty() /* propertyName: string, value: string */{},
        setTrackStyleProperty: function setTrackStyleProperty() /* propertyName: string, value: string */{},
        setMarkerValue: function setMarkerValue() /* value: number */{},
        appendTrackMarkers: function appendTrackMarkers() /* numMarkers: number */{},
        removeTrackMarkers: function removeTrackMarkers() {},
        setLastTrackMarkersStyleProperty: function setLastTrackMarkersStyleProperty() /* propertyName: string, value: string */{},
        isRTL: function isRTL() {
          return (/* boolean */false
          );
        }
      };
    }
  }]);

  function MDCSliderFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    slider_foundation__classCallCheck(this, MDCSliderFoundation);

    var _this = slider_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, slider_foundation__extends(MDCSliderFoundation.defaultAdapter, adapter)));

    _this.rect_ = null;
    // We set this to NaN since we want it to be a number, but we can't use '0' or '-1'
    // because those could be valid tabindices set by the client code.
    _this.savedTabIndex_ = NaN;
    _this.off_ = false;
    _this.active_ = false;
    _this.inTransit_ = false;
    _this.isDiscrete_ = false;
    _this.hasTrackMarker_ = false;
    _this.handlingThumbTargetEvt_ = false;
    _this.min_ = 0;
    _this.max_ = 100;
    _this.step_ = 0;
    _this.value_ = 0;
    _this.disabled_ = false;
    _this.preventFocusState_ = false;
    _this.updateUIFrame_ = 0;
    _this.thumbContainerPointerHandler_ = function () {
      _this.handlingThumbTargetEvt_ = true;
    };
    _this.mousedownHandler_ = _this.createDownHandler_('mousemove', 'mouseup');
    _this.pointerdownHandler_ = _this.createDownHandler_('pointermove', 'pointerup');
    _this.touchstartHandler_ = _this.createDownHandler_('touchmove', 'touchend', function (_ref) {
      var targetTouches = _ref.targetTouches;
      return targetTouches[0].pageX;
    });
    _this.keydownHandler_ = function (evt) {
      return _this.handleKeydown_(evt);
    };
    _this.focusHandler_ = function () {
      return _this.handleFocus_();
    };
    _this.blurHandler_ = function () {
      return _this.handleBlur_();
    };
    _this.resizeHandler_ = function () {
      return _this.layout();
    };
    return _this;
  }

  MDCSliderFoundation.prototype.init = function init() {
    var _this2 = this;

    this.isDiscrete_ = this.adapter_.hasClass(slider_constants_cssClasses.IS_DISCRETE);
    this.hasTrackMarker_ = this.adapter_.hasClass(slider_constants_cssClasses.HAS_TRACK_MARKER);
    this.adapter_.registerInteractionHandler('mousedown', this.mousedownHandler_);
    this.adapter_.registerInteractionHandler('pointerdown', this.pointerdownHandler_);
    this.adapter_.registerInteractionHandler('touchstart', this.touchstartHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
    ['mousedown', 'pointerdown', 'touchstart'].forEach(function (evtName) {
      _this2.adapter_.registerThumbContainerInteractionHandler(evtName, _this2.thumbContainerPointerHandler_);
    });
    this.adapter_.registerResizeHandler(this.resizeHandler_);
    this.layout();
    // At last step, provide a reasonable default value to discrete slider
    if (this.isDiscrete_ && this.getStep() == 0) {
      this.step_ = 1;
    }
  };

  MDCSliderFoundation.prototype.destroy = function destroy() {
    var _this3 = this;

    this.adapter_.deregisterInteractionHandler('mousedown', this.mousedownHandler_);
    this.adapter_.deregisterInteractionHandler('pointerdown', this.pointerdownHandler_);
    this.adapter_.deregisterInteractionHandler('touchstart', this.touchstartHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);
    ['mousedown', 'pointerdown', 'touchstart'].forEach(function (evtName) {
      _this3.adapter_.deregisterThumbContainerInteractionHandler(evtName, _this3.thumbContainerPointerHandler_);
    });
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
  };

  MDCSliderFoundation.prototype.setupTrackMarker = function setupTrackMarker() {
    if (this.isDiscrete_ && this.hasTrackMarker_ && this.getStep() != 0) {
      var min = this.getMin();
      var max = this.getMax();
      var step = this.getStep();
      var numMarkers = (max - min) / step;

      // In case distance between max & min is indivisible to step,
      // we place the secondary to last marker proportionally at where thumb
      // could reach and place the last marker at max value
      var indivisible = Math.ceil(numMarkers) !== numMarkers;
      if (indivisible) {
        numMarkers = Math.ceil(numMarkers);
      }

      this.adapter_.removeTrackMarkers();
      this.adapter_.appendTrackMarkers(numMarkers);

      if (indivisible) {
        var lastStepRatio = (max - numMarkers * step) / step + 1;
        var flex = getCorrectPropertyName(window, 'flex');
        this.adapter_.setLastTrackMarkersStyleProperty(flex, lastStepRatio);
      }
    }
  };

  MDCSliderFoundation.prototype.layout = function layout() {
    this.rect_ = this.adapter_.computeBoundingRect();
    this.updateUIForCurrentValue_();
  };

  MDCSliderFoundation.prototype.getValue = function getValue() {
    return this.value_;
  };

  MDCSliderFoundation.prototype.setValue = function setValue(value) {
    this.setValue_(value, false);
  };

  MDCSliderFoundation.prototype.getMax = function getMax() {
    return this.max_;
  };

  MDCSliderFoundation.prototype.setMax = function setMax(max) {
    if (max < this.min_) {
      throw new Error('Cannot set max to be less than the slider\'s minimum value');
    }
    this.max_ = max;
    this.setValue_(this.value_, false, true);
    this.adapter_.setAttribute(slider_constants_strings.ARIA_VALUEMAX, String(this.max_));
    this.setupTrackMarker();
  };

  MDCSliderFoundation.prototype.getMin = function getMin() {
    return this.min_;
  };

  MDCSliderFoundation.prototype.setMin = function setMin(min) {
    if (min > this.max_) {
      throw new Error('Cannot set min to be greater than the slider\'s maximum value');
    }
    this.min_ = min;
    this.setValue_(this.value_, false, true);
    this.adapter_.setAttribute(slider_constants_strings.ARIA_VALUEMIN, String(this.min_));
    this.setupTrackMarker();
  };

  MDCSliderFoundation.prototype.getStep = function getStep() {
    return this.step_;
  };

  MDCSliderFoundation.prototype.setStep = function setStep(step) {
    if (step < 0) {
      throw new Error('Step cannot be set to a negative number');
    }
    if (this.isDiscrete_ && (typeof step !== 'number' || step < 1)) {
      step = 1;
    }
    this.step_ = step;
    this.setValue_(this.value_, false, true);
    this.setupTrackMarker();
  };

  MDCSliderFoundation.prototype.isDisabled = function isDisabled() {
    return this.disabled_;
  };

  MDCSliderFoundation.prototype.setDisabled = function setDisabled(disabled) {
    this.disabled_ = disabled;
    this.toggleClass_(slider_constants_cssClasses.DISABLED, this.disabled_);
    if (this.disabled_) {
      this.savedTabIndex_ = this.adapter_.getTabIndex();
      this.adapter_.setAttribute(slider_constants_strings.ARIA_DISABLED, 'true');
      this.adapter_.removeAttribute('tabindex');
    } else {
      this.adapter_.removeAttribute(slider_constants_strings.ARIA_DISABLED);
      if (!isNaN(this.savedTabIndex_)) {
        this.adapter_.setAttribute('tabindex', String(this.savedTabIndex_));
      }
    }
  };

  MDCSliderFoundation.prototype.createDownHandler_ = function createDownHandler_(moveEvt, upEvt) {
    var _this4 = this;

    var getPageX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (_ref2) {
      var pageX = _ref2.pageX;
      return pageX;
    };

    var moveHandler = function moveHandler(evt) {
      evt.preventDefault();
      _this4.setValueFromEvt_(evt, getPageX);
    };

    var upHandler = function upHandler() {
      _this4.setActive_(false);
      _this4.adapter_.deregisterBodyInteractionHandler(moveEvt, moveHandler);
      _this4.adapter_.deregisterBodyInteractionHandler(upEvt, upHandler);
      _this4.adapter_.notifyChange();
    };

    var downHandler = function downHandler(evt) {
      if (_this4.disabled_) {
        return;
      }

      _this4.preventFocusState_ = true;
      _this4.setInTransit_(!_this4.handlingThumbTargetEvt_);
      _this4.handlingThumbTargetEvt_ = false;

      _this4.setActive_(true);

      _this4.adapter_.registerBodyInteractionHandler(moveEvt, moveHandler);
      _this4.adapter_.registerBodyInteractionHandler(upEvt, upHandler);
      _this4.setValueFromEvt_(evt, getPageX);
    };

    return downHandler;
  };

  MDCSliderFoundation.prototype.setValueFromEvt_ = function setValueFromEvt_(evt, getPageX) {
    var pageX = getPageX(evt);
    var value = this.computeValueFromPageX_(pageX);
    this.setValue_(value, true);
  };

  MDCSliderFoundation.prototype.computeValueFromPageX_ = function computeValueFromPageX_(pageX) {
    var max = this.max_,
        min = this.min_;

    var xPos = pageX - this.rect_.left;
    var pctComplete = xPos / this.rect_.width;
    if (this.adapter_.isRTL()) {
      pctComplete = 1 - pctComplete;
    }
    // Fit the percentage complete between the range [min,max]
    // by remapping from [0, 1] to [min, min+(max-min)].
    return min + pctComplete * (max - min);
  };

  MDCSliderFoundation.prototype.handleKeydown_ = function handleKeydown_(evt) {
    var keyId = this.getKeyId_(evt);
    var value = this.getValueForKeyId_(keyId);
    if (isNaN(value)) {
      return;
    }

    // Prevent page from scrolling due to key presses that would normally scroll the page
    evt.preventDefault();
    this.adapter_.addClass(slider_constants_cssClasses.FOCUS);
    this.setValue_(value, true);
    this.adapter_.notifyChange();
  };

  MDCSliderFoundation.prototype.getKeyId_ = function getKeyId_(kbdEvt) {
    switch (kbdEvt.key || kbdEvt.keyCode) {
      case KEY_IDS.ARROW_LEFT:
      case 37:
        return KEY_IDS.ARROW_LEFT;
      case KEY_IDS.ARROW_RIGHT:
      case 39:
        return KEY_IDS.ARROW_RIGHT;
      case KEY_IDS.ARROW_UP:
      case 38:
        return KEY_IDS.ARROW_UP;
      case KEY_IDS.ARROW_DOWN:
      case 40:
        return KEY_IDS.ARROW_DOWN;
      case KEY_IDS.HOME:
      case 36:
        return KEY_IDS.HOME;
      case KEY_IDS.END:
      case 35:
        return KEY_IDS.END;
      case KEY_IDS.PAGE_UP:
      case 33:
        return KEY_IDS.PAGE_UP;
      case KEY_IDS.PAGE_DOWN:
      case 34:
        return KEY_IDS.PAGE_DOWN;
      default:
        // Doesn't matter
        return '';
    }
  };

  MDCSliderFoundation.prototype.getValueForKeyId_ = function getValueForKeyId_(keyId) {
    var max = this.max_,
        min = this.min_,
        step = this.step_;

    var delta = step || (max - min) / 100;
    var valueNeedsToBeFlipped = this.adapter_.isRTL() && (keyId === KEY_IDS.ARROW_LEFT || keyId === KEY_IDS.ARROW_RIGHT);
    if (valueNeedsToBeFlipped) {
      delta = -delta;
    }

    switch (keyId) {
      case KEY_IDS.ARROW_LEFT:
      case KEY_IDS.ARROW_DOWN:
        return this.value_ - delta;
      case KEY_IDS.ARROW_RIGHT:
      case KEY_IDS.ARROW_UP:
        return this.value_ + delta;
      case KEY_IDS.HOME:
        return this.min_;
      case KEY_IDS.END:
        return this.max_;
      case KEY_IDS.PAGE_UP:
        return this.value_ + delta * slider_constants_numbers.PAGE_FACTOR;
      case KEY_IDS.PAGE_DOWN:
        return this.value_ - delta * slider_constants_numbers.PAGE_FACTOR;
      default:
        return NaN;
    }
  };

  MDCSliderFoundation.prototype.handleFocus_ = function handleFocus_() {
    if (this.preventFocusState_) {
      return;
    }
    this.adapter_.addClass(slider_constants_cssClasses.FOCUS);
  };

  MDCSliderFoundation.prototype.handleBlur_ = function handleBlur_() {
    this.preventFocusState_ = false;
    this.adapter_.removeClass(slider_constants_cssClasses.FOCUS);
  };

  MDCSliderFoundation.prototype.setValue_ = function setValue_(value, shouldFireInput) {
    var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (value === this.value_ && !force) {
      return;
    }

    var min = this.min_,
        max = this.max_;

    var valueSetToBoundary = value === min || value === max;
    if (this.step_ && !valueSetToBoundary) {
      value = this.quantize_(value);
    }
    if (value < min) {
      value = min;
    } else if (value > max) {
      value = max;
    }
    this.value_ = value;
    this.adapter_.setAttribute(slider_constants_strings.ARIA_VALUENOW, String(this.value_));
    this.updateUIForCurrentValue_();

    if (shouldFireInput) {
      this.adapter_.notifyInput();
      if (this.isDiscrete_) {
        this.adapter_.setMarkerValue(value);
      }
    }
  };

  MDCSliderFoundation.prototype.quantize_ = function quantize_(value) {
    var numSteps = Math.round(value / this.step_);
    var quantizedVal = numSteps * this.step_;
    return quantizedVal;
  };

  MDCSliderFoundation.prototype.updateUIForCurrentValue_ = function updateUIForCurrentValue_() {
    var _this5 = this;

    var max = this.max_,
        min = this.min_,
        value = this.value_;

    var pctComplete = (value - min) / (max - min);
    var translatePx = pctComplete * this.rect_.width;
    if (this.adapter_.isRTL()) {
      translatePx = this.rect_.width - translatePx;
    }

    var transformProp = getCorrectPropertyName(window, 'transform');
    var transitionendEvtName = getCorrectEventName(window, 'transitionend');

    if (this.inTransit_) {
      var onTransitionEnd = function onTransitionEnd() {
        _this5.setInTransit_(false);
        _this5.adapter_.deregisterThumbContainerInteractionHandler(transitionendEvtName, onTransitionEnd);
      };
      this.adapter_.registerThumbContainerInteractionHandler(transitionendEvtName, onTransitionEnd);
    }

    this.updateUIFrame_ = requestAnimationFrame(function () {
      _this5.setOff_(pctComplete === 0);
      // NOTE(traviskaufman): It would be nice to use calc() here,
      // but IE cannot handle calcs in transforms correctly.
      // See: https://goo.gl/NC2itk
      // Also note that the -50% offset is used to center the slider thumb.
      _this5.adapter_.setThumbContainerStyleProperty(transformProp, 'translateX(' + translatePx + 'px) translateX(-50%)');
      _this5.adapter_.setTrackStyleProperty(transformProp, 'scaleX(' + pctComplete + ')');
    });
  };

  MDCSliderFoundation.prototype.setOff_ = function setOff_(off) {
    this.off_ = off;
    this.toggleClass_(slider_constants_cssClasses.OFF, this.off_);
  };

  MDCSliderFoundation.prototype.setActive_ = function setActive_(active) {
    this.active_ = active;
    this.toggleClass_(slider_constants_cssClasses.ACTIVE, this.active_);
  };

  MDCSliderFoundation.prototype.setInTransit_ = function setInTransit_(inTransit) {
    this.inTransit_ = inTransit;
    this.toggleClass_(slider_constants_cssClasses.IN_TRANSIT, this.inTransit_);
  };

  MDCSliderFoundation.prototype.toggleClass_ = function toggleClass_(className, shouldBePresent) {
    if (shouldBePresent) {
      this.adapter_.addClass(className);
    } else {
      this.adapter_.removeClass(className);
    }
  };

  return MDCSliderFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/slider/index.js
var slider__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function slider__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function slider__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function slider__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var slider_MDCSlider = function (_MDCComponent) {
  slider__inherits(MDCSlider, _MDCComponent);

  function MDCSlider() {
    slider__classCallCheck(this, MDCSlider);

    return slider__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCSlider.attachTo = function attachTo(root) {
    return new MDCSlider(root);
  };

  MDCSlider.prototype.initialize = function initialize() {
    this.thumbContainer_ = this.root_.querySelector(slider_constants_strings.THUMB_CONTAINER_SELECTOR);
    this.track_ = this.root_.querySelector(slider_constants_strings.TRACK_SELECTOR);
    this.pinValueMarker_ = this.root_.querySelector(slider_constants_strings.PIN_VALUE_MARKER_SELECTOR);
    this.trackMarkerContainer_ = this.root_.querySelector(slider_constants_strings.TRACK_MARKER_CONTAINER_SELECTOR);
  };

  MDCSlider.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCSliderFoundation({
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      getAttribute: function getAttribute(name) {
        return _this2.root_.getAttribute(name);
      },
      setAttribute: function setAttribute(name, value) {
        return _this2.root_.setAttribute(name, value);
      },
      removeAttribute: function removeAttribute(name) {
        return _this2.root_.removeAttribute(name);
      },
      computeBoundingRect: function computeBoundingRect() {
        return _this2.root_.getBoundingClientRect();
      },
      getTabIndex: function getTabIndex() {
        return _this2.root_.tabIndex;
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        _this2.root_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        _this2.root_.removeEventListener(type, handler);
      },
      registerThumbContainerInteractionHandler: function registerThumbContainerInteractionHandler(type, handler) {
        _this2.thumbContainer_.addEventListener(type, handler);
      },
      deregisterThumbContainerInteractionHandler: function deregisterThumbContainerInteractionHandler(type, handler) {
        _this2.thumbContainer_.removeEventListener(type, handler);
      },
      registerBodyInteractionHandler: function registerBodyInteractionHandler(type, handler) {
        document.body.addEventListener(type, handler);
      },
      deregisterBodyInteractionHandler: function deregisterBodyInteractionHandler(type, handler) {
        document.body.removeEventListener(type, handler);
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        window.removeEventListener('resize', handler);
      },
      notifyInput: function notifyInput() {
        _this2.emit(slider_constants_strings.INPUT_EVENT, _this2);
      },
      notifyChange: function notifyChange() {
        _this2.emit(slider_constants_strings.CHANGE_EVENT, _this2);
      },
      setThumbContainerStyleProperty: function setThumbContainerStyleProperty(propertyName, value) {
        _this2.thumbContainer_.style.setProperty(propertyName, value);
      },
      setTrackStyleProperty: function setTrackStyleProperty(propertyName, value) {
        _this2.track_.style.setProperty(propertyName, value);
      },
      setMarkerValue: function setMarkerValue(value) {
        _this2.pinValueMarker_.innerText = value;
      },
      appendTrackMarkers: function appendTrackMarkers(numMarkers) {
        var frag = document.createDocumentFragment();
        for (var i = 0; i < numMarkers; i++) {
          var marker = document.createElement('div');
          marker.classList.add('mdc-slider__track-marker');
          frag.appendChild(marker);
        }
        _this2.trackMarkerContainer_.appendChild(frag);
      },
      removeTrackMarkers: function removeTrackMarkers() {
        while (_this2.trackMarkerContainer_.firstChild) {
          _this2.trackMarkerContainer_.removeChild(_this2.trackMarkerContainer_.firstChild);
        }
      },
      setLastTrackMarkersStyleProperty: function setLastTrackMarkersStyleProperty(propertyName, value) {
        // We remove and append new nodes, thus, the last track marker must be dynamically found.
        var lastTrackMarker = _this2.root_.querySelector(slider_constants_strings.LAST_TRACK_MARKER_SELECTOR);
        lastTrackMarker.style.setProperty(propertyName, value);
      },
      isRTL: function isRTL() {
        return getComputedStyle(_this2.root_).direction === 'rtl';
      }
    });
  };

  MDCSlider.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    var origValueNow = parseFloat(this.root_.getAttribute(slider_constants_strings.ARIA_VALUENOW));
    this.min = parseFloat(this.root_.getAttribute(slider_constants_strings.ARIA_VALUEMIN)) || this.min;
    this.max = parseFloat(this.root_.getAttribute(slider_constants_strings.ARIA_VALUEMAX)) || this.max;
    this.step = parseFloat(this.root_.getAttribute(slider_constants_strings.STEP_DATA_ATTR)) || this.step;
    this.value = origValueNow || this.value;
    this.disabled = this.root_.hasAttribute(slider_constants_strings.ARIA_DISABLED) && this.root_.getAttribute(slider_constants_strings.ARIA_DISABLED) !== 'false';
    this.foundation_.setupTrackMarker();
  };

  MDCSlider.prototype.layout = function layout() {
    this.foundation_.layout();
  };

  MDCSlider.prototype.stepUp = function stepUp() {
    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.step || 1;

    this.value += amount;
  };

  MDCSlider.prototype.stepDown = function stepDown() {
    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.step || 1;

    this.value -= amount;
  };

  slider__createClass(MDCSlider, [{
    key: 'value',
    get: function get() {
      return this.foundation_.getValue();
    },
    set: function set(value) {
      this.foundation_.setValue(value);
    }
  }, {
    key: 'min',
    get: function get() {
      return this.foundation_.getMin();
    },
    set: function set(min) {
      this.foundation_.setMin(min);
    }
  }, {
    key: 'max',
    get: function get() {
      return this.foundation_.getMax();
    },
    set: function set(max) {
      this.foundation_.setMax(max);
    }
  }, {
    key: 'step',
    get: function get() {
      return this.foundation_.getStep();
    },
    set: function set(step) {
      this.foundation_.setStep(step);
    }
  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    },
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }
  }]);

  return MDCSlider;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Slider/index.js
function Slider__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Slider__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Slider__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function Slider__objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}





/**
 * @prop disabled = false
 */

var Slider_Slider = function (_MaterialComponent) {
  Slider__inherits(Slider, _MaterialComponent);

  function Slider() {
    Slider__classCallCheck(this, Slider);

    var _this = Slider__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "slider";
    _this._mdcProps = ["discrete"];
    _this._onChange = _this._onChange.bind(_this);
    _this._onInput = _this._onInput.bind(_this);
    return _this;
  }

  Slider.prototype._onChange = function _onChange() {
    if (this.props.onChange) {
      this.props.onChange(this.MDComponent.value);
    }
  };

  Slider.prototype._onInput = function _onInput() {
    if (this.props.onInput) {
      this.props.onInput(this.MDComponent.value);
    }
  };

  Slider.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new slider_MDCSlider(this.base);
    this.MDComponent.listen("MDCSlider:change", this._onChange);
    this.MDComponent.listen("MDCSlider:input", this._onInput);
    this.setValue(); // set initial value programatically because of error if min is greater than initial max
  };

  Slider.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.unlisten("MDCSlider:change", this._onChange);
    this.MDComponent.unlisten("MDCSlider:input", this._onInput);
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Slider.prototype.setValue = function setValue() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    var _props$disabled = props.disabled,
        disabled = _props$disabled === undefined ? false : _props$disabled,
        _props$min = props.min,
        min = _props$min === undefined ? 0 : _props$min,
        _props$max = props.max,
        max = _props$max === undefined ? 100 : _props$max,
        value = props.value,
        step = props.step;

    if (this.MDComponent) {
      if (min > this.MDComponent.max) {
        this.MDComponent.max = max;
        this.MDComponent.min = min;
      } else {
        this.MDComponent.min = min;
        this.MDComponent.max = max;
      }

      this.MDComponent.value = value;
      this.MDComponent.disabled = disabled;
      this.MDComponent.step = step;
    }
  };

  Slider.prototype.materialDom = function materialDom(allprops) {
    var _allprops$tabindex = allprops.tabindex,
        tabindex = _allprops$tabindex === undefined ? 0 : _allprops$tabindex,
        props = Slider__objectWithoutProperties(allprops, ["tabindex"]);

    this.setValue(allprops);
    return Object(preact_min["h"])("div", Slider__extends({
      tabindex: tabindex,
      role: "slider",
      "aria-label": "Select Value"
    }, props), Object(preact_min["h"])("div", { "class": "mdc-slider__track-container" }, Object(preact_min["h"])("div", { "class": "mdc-slider__track" })), Object(preact_min["h"])("div", { "class": "mdc-slider__thumb-container" }, props.discrete && Object(preact_min["h"])("div", { "class": "mdc-slider__pin" }, Object(preact_min["h"])("span", { "class": "mdc-slider__pin-value-marker" })), Object(preact_min["h"])("svg", { "class": "mdc-slider__thumb", width: "21", height: "21" }, Object(preact_min["h"])("circle", { cx: "10.5", cy: "10.5", r: "7.875" })), Object(preact_min["h"])("div", { "class": "mdc-slider__focus-ring" })));
  };

  return Slider;
}(MaterialComponent_MaterialComponent);


// EXTERNAL MODULE: ./routes/slider/sample.txt
var slider_sample = __webpack_require__("4ECx");
var slider_sample_default = /*#__PURE__*/__webpack_require__.n(slider_sample);

// CONCATENATED MODULE: ./routes/slider/index.js


function routes_slider__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_slider__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_slider__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components




// Samples


// Class

var slider__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var slider__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    slider_sample_default.a
  )
);

var slider__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var slider__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-slider"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider" },
    " ",
    "here"
  ),
  "."
);

var slider__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var slider__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Regular "
);

var slider__ref7 = Object(preact_min["h"])(
  "div",
  { className: "slider-container" },
  Object(preact_min["h"])(Slider_Slider, null)
);

var slider__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Disabled "
);

var slider__ref9 = Object(preact_min["h"])(
  "div",
  { className: "slider-container" },
  Object(preact_min["h"])(Slider_Slider, { disabled: true })
);

var slider__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Step 2, Max 20, Value 10 "
);

var slider__ref11 = Object(preact_min["h"])(
  "div",
  { className: "slider-container" },
  Object(preact_min["h"])(Slider_Slider, { step: 2, value: 10, max: 20 })
);

var slider__ref12 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Discrete "
);

var slider__ref13 = Object(preact_min["h"])(
  "div",
  { className: "slider-container" },
  Object(preact_min["h"])(Slider_Slider, { step: 2, value: 10, max: 20, discrete: true })
);

var slider_SliderPage = function (_Component) {
  routes_slider__inherits(SliderPage, _Component);

  function SliderPage() {
    routes_slider__classCallCheck(this, SliderPage);

    var _this = routes_slider__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Slider",
      props: [{
        name: "disabled",
        description: "Tells if the slider is disabled."
      }, {
        name: "min",
        value: "number",
        description: "Tells minimum value of the slider."
      }, {
        name: "max",
        value: "number",
        description: "Tells maximum value of the slider."
      }, {
        name: "step",
        value: "number",
        description: "Tells step/jump of the slider."
      }, {
        name: "value",
        value: "number",
        description: "Tells current value of the slider."
      }, {
        name: "discrete",
        description: "Tells if the slider is discrete."
      }]
    }];
    _this.eventsTable = [{
      name: "onInput",
      description: "Fired when a user is dragging the slider or changing the value using the arrow keys."
    }, {
      name: "onChange",
      description: "Fired when a user stops dragging the slider or changes the value using the arrow keys.."
    }];
    return _this;
  }

  SliderPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-slider" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      Object(preact_min["h"])(events_table_EventsTable, { data: this.eventsTable }),
      slider__ref,
      slider__ref2,
      slider__ref3,
      slider__ref4,
      slider__ref5,
      slider__ref6,
      slider__ref7,
      slider__ref8,
      slider__ref9,
      slider__ref10,
      slider__ref11,
      slider__ref12,
      slider__ref13
    );
  };

  return SliderPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/snackbar/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var snackbar_constants_cssClasses = {
  ROOT: 'mdc-snackbar',
  TEXT: 'mdc-snackbar__text',
  ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',
  ACTION_BUTTON: 'mdc-snackbar__action-button',
  ACTIVE: 'mdc-snackbar--active',
  MULTILINE: 'mdc-snackbar--multiline',
  ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom'
};

var snackbar_constants_strings = {
  TEXT_SELECTOR: '.mdc-snackbar__text',
  ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',
  ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button'
};

var snackbar_constants_numbers = {
  MESSAGE_TIMEOUT: 2750
};
// CONCATENATED MODULE: ../node_modules/@material/snackbar/foundation.js
var snackbar_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var snackbar_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function snackbar_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function snackbar_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function snackbar_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var foundation_MDCSnackbarFoundation = function (_MDCFoundation) {
  snackbar_foundation__inherits(MDCSnackbarFoundation, _MDCFoundation);

  snackbar_foundation__createClass(MDCSnackbarFoundation, [{
    key: 'active',
    get: function get() {
      return this.active_;
    }
  }], [{
    key: 'cssClasses',
    get: function get() {
      return snackbar_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return snackbar_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        setAriaHidden: function setAriaHidden() {},
        unsetAriaHidden: function unsetAriaHidden() {},
        setActionAriaHidden: function setActionAriaHidden() {},
        unsetActionAriaHidden: function unsetActionAriaHidden() {},
        setActionText: function setActionText() /* actionText: string */{},
        setMessageText: function setMessageText() /* message: string */{},
        setFocus: function setFocus() {},
        visibilityIsHidden: function visibilityIsHidden() {
          return (/* boolean */false
          );
        },
        registerCapturedBlurHandler: function registerCapturedBlurHandler() /* handler: EventListener */{},
        deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler() /* handler: EventListener */{},
        registerVisibilityChangeHandler: function registerVisibilityChangeHandler() /* handler: EventListener */{},
        deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler() /* handler: EventListener */{},
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerActionClickHandler: function registerActionClickHandler() /* handler: EventListener */{},
        deregisterActionClickHandler: function deregisterActionClickHandler() /* handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{}
      };
    }
  }]);

  function MDCSnackbarFoundation(adapter) {
    snackbar_foundation__classCallCheck(this, MDCSnackbarFoundation);

    var _this = snackbar_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, snackbar_foundation__extends(MDCSnackbarFoundation.defaultAdapter, adapter)));

    _this.active_ = false;
    _this.actionWasClicked_ = false;
    _this.dismissOnAction_ = true;
    _this.firstFocus_ = true;
    _this.pointerDownRecognized_ = false;
    _this.snackbarHasFocus_ = false;
    _this.snackbarData_ = null;
    _this.queue_ = [];
    _this.actionClickHandler_ = function () {
      _this.actionWasClicked_ = true;
      _this.invokeAction_();
    };
    _this.visibilitychangeHandler_ = function () {
      clearTimeout(_this.timeoutId_);
      _this.snackbarHasFocus_ = true;

      if (!_this.adapter_.visibilityIsHidden()) {
        setTimeout(_this.cleanup_.bind(_this), _this.snackbarData_.timeout || snackbar_constants_numbers.MESSAGE_TIMEOUT);
      }
    };
    _this.interactionHandler_ = function (evt) {
      if (evt.type == 'touchstart' || evt.type == 'mousedown') {
        _this.pointerDownRecognized_ = true;
      }
      _this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type == 'focus') {
        _this.pointerDownRecognized_ = false;
      }
    };
    _this.blurHandler_ = function () {
      clearTimeout(_this.timeoutId_);
      _this.snackbarHasFocus_ = false;
      _this.timeoutId_ = setTimeout(_this.cleanup_.bind(_this), _this.snackbarData_.timeout || snackbar_constants_numbers.MESSAGE_TIMEOUT);
    };
    return _this;
  }

  MDCSnackbarFoundation.prototype.init = function init() {
    this.adapter_.registerActionClickHandler(this.actionClickHandler_);
    this.adapter_.setAriaHidden();
    this.adapter_.setActionAriaHidden();
  };

  MDCSnackbarFoundation.prototype.destroy = function destroy() {
    var _this2 = this;

    this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);
    this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);
    this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
      _this2.adapter_.deregisterCapturedInteractionHandler(evtType, _this2.interactionHandler_);
    });
  };

  MDCSnackbarFoundation.prototype.dismissesOnAction = function dismissesOnAction() {
    return this.dismissOnAction_;
  };

  MDCSnackbarFoundation.prototype.setDismissOnAction = function setDismissOnAction(dismissOnAction) {
    this.dismissOnAction_ = !!dismissOnAction;
  };

  MDCSnackbarFoundation.prototype.show = function show(data) {
    var _this3 = this;

    if (!data) {
      throw new Error('Please provide a data object with at least a message to display.');
    }
    if (!data.message) {
      throw new Error('Please provide a message to be displayed.');
    }
    if (data.actionHandler && !data.actionText) {
      throw new Error('Please provide action text with the handler.');
    }
    if (this.active) {
      this.queue_.push(data);
      return;
    }
    clearTimeout(this.timeoutId_);
    this.snackbarData_ = data;
    this.firstFocus_ = true;
    this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);
    this.adapter_.registerCapturedBlurHandler(this.blurHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
      _this3.adapter_.registerCapturedInteractionHandler(evtType, _this3.interactionHandler_);
    });

    var ACTIVE = snackbar_constants_cssClasses.ACTIVE,
        MULTILINE = snackbar_constants_cssClasses.MULTILINE,
        ACTION_ON_BOTTOM = snackbar_constants_cssClasses.ACTION_ON_BOTTOM;


    this.adapter_.setMessageText(this.snackbarData_.message);

    if (this.snackbarData_.multiline) {
      this.adapter_.addClass(MULTILINE);
      if (this.snackbarData_.actionOnBottom) {
        this.adapter_.addClass(ACTION_ON_BOTTOM);
      }
    }

    if (this.snackbarData_.actionHandler) {
      this.adapter_.setActionText(this.snackbarData_.actionText);
      this.actionHandler_ = this.snackbarData_.actionHandler;
      this.setActionHidden_(false);
    } else {
      this.setActionHidden_(true);
      this.actionHandler_ = null;
      this.adapter_.setActionText(null);
    }

    this.active_ = true;
    this.adapter_.addClass(ACTIVE);
    this.adapter_.unsetAriaHidden();

    this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || snackbar_constants_numbers.MESSAGE_TIMEOUT);
  };

  MDCSnackbarFoundation.prototype.handlePossibleTabKeyboardFocus_ = function handlePossibleTabKeyboardFocus_() {
    var hijackFocus = this.firstFocus_ && !this.pointerDownRecognized_;

    if (hijackFocus) {
      this.setFocusOnAction_();
    }

    this.firstFocus_ = false;
  };

  MDCSnackbarFoundation.prototype.setFocusOnAction_ = function setFocusOnAction_() {
    this.adapter_.setFocus();
    this.snackbarHasFocus_ = true;
    this.firstFocus_ = false;
  };

  MDCSnackbarFoundation.prototype.invokeAction_ = function invokeAction_() {
    try {
      if (!this.actionHandler_) {
        return;
      }

      this.actionHandler_();
    } finally {
      if (this.dismissOnAction_) {
        this.cleanup_();
      }
    }
  };

  MDCSnackbarFoundation.prototype.cleanup_ = function cleanup_() {
    var _this4 = this;

    var allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;

    if (allowDismissal) {
      var ACTIVE = snackbar_constants_cssClasses.ACTIVE,
          MULTILINE = snackbar_constants_cssClasses.MULTILINE,
          ACTION_ON_BOTTOM = snackbar_constants_cssClasses.ACTION_ON_BOTTOM;


      this.adapter_.removeClass(ACTIVE);

      var handler = function handler() {
        clearTimeout(_this4.timeoutId_);
        _this4.adapter_.deregisterTransitionEndHandler(handler);
        _this4.adapter_.removeClass(MULTILINE);
        _this4.adapter_.removeClass(ACTION_ON_BOTTOM);
        _this4.setActionHidden_(true);
        _this4.adapter_.setAriaHidden();
        _this4.active_ = false;
        _this4.snackbarHasFocus_ = false;
        _this4.showNext_();
      };

      this.adapter_.registerTransitionEndHandler(handler);
    }
  };

  MDCSnackbarFoundation.prototype.showNext_ = function showNext_() {
    if (!this.queue_.length) {
      return;
    }
    this.show(this.queue_.shift());
  };

  MDCSnackbarFoundation.prototype.setActionHidden_ = function setActionHidden_(isHidden) {
    if (isHidden) {
      this.adapter_.setActionAriaHidden();
    } else {
      this.adapter_.unsetActionAriaHidden();
    }
  };

  return MDCSnackbarFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/snackbar/index.js
var snackbar__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function snackbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function snackbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function snackbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







var snackbar_MDCSnackbar = function (_MDCComponent) {
  snackbar__inherits(MDCSnackbar, _MDCComponent);

  function MDCSnackbar() {
    snackbar__classCallCheck(this, MDCSnackbar);

    return snackbar__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCSnackbar.attachTo = function attachTo(root) {
    return new MDCSnackbar(root);
  };

  MDCSnackbar.prototype.show = function show(data) {
    this.foundation_.show(data);
  };

  MDCSnackbar.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    var _MDCSnackbarFoundatio = foundation_MDCSnackbarFoundation.strings,
        TEXT_SELECTOR = _MDCSnackbarFoundatio.TEXT_SELECTOR,
        ACTION_BUTTON_SELECTOR = _MDCSnackbarFoundatio.ACTION_BUTTON_SELECTOR;

    var getText = function getText() {
      return _this2.root_.querySelector(TEXT_SELECTOR);
    };
    var getActionButton = function getActionButton() {
      return _this2.root_.querySelector(ACTION_BUTTON_SELECTOR);
    };

    /* eslint brace-style: "off" */
    return new foundation_MDCSnackbarFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      setAriaHidden: function setAriaHidden() {
        return _this2.root_.setAttribute('aria-hidden', 'true');
      },
      unsetAriaHidden: function unsetAriaHidden() {
        return _this2.root_.removeAttribute('aria-hidden');
      },
      setActionAriaHidden: function setActionAriaHidden() {
        return getActionButton().setAttribute('aria-hidden', 'true');
      },
      unsetActionAriaHidden: function unsetActionAriaHidden() {
        return getActionButton().removeAttribute('aria-hidden');
      },
      setActionText: function setActionText(text) {
        getActionButton().textContent = text;
      },
      setMessageText: function setMessageText(text) {
        getText().textContent = text;
      },
      setFocus: function setFocus() {
        return getActionButton().focus();
      },
      visibilityIsHidden: function visibilityIsHidden() {
        return document.hidden;
      },
      registerCapturedBlurHandler: function registerCapturedBlurHandler(handler) {
        return getActionButton().addEventListener('blur', handler, true);
      },
      deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler(handler) {
        return getActionButton().removeEventListener('blur', handler, true);
      },
      registerVisibilityChangeHandler: function registerVisibilityChangeHandler(handler) {
        return document.addEventListener('visibilitychange', handler);
      },
      deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler(handler) {
        return document.removeEventListener('visibilitychange', handler);
      },
      registerCapturedInteractionHandler: function registerCapturedInteractionHandler(evt, handler) {
        return document.body.addEventListener(evt, handler, true);
      },
      deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler(evt, handler) {
        return document.body.removeEventListener(evt, handler, true);
      },
      registerActionClickHandler: function registerActionClickHandler(handler) {
        return getActionButton().addEventListener('click', handler);
      },
      deregisterActionClickHandler: function deregisterActionClickHandler(handler) {
        return getActionButton().removeEventListener('click', handler);
      },
      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
        return _this2.root_.addEventListener(getCorrectEventName(window, 'transitionend'), handler);
      },
      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
        return _this2.root_.removeEventListener(getCorrectEventName(window, 'transitionend'), handler);
      }
    });
  };

  snackbar__createClass(MDCSnackbar, [{
    key: 'dismissesOnAction',
    get: function get() {
      return this.foundation_.dismissesOnAction();
    },
    set: function set(dismissesOnAction) {
      this.foundation_.setDismissOnAction(dismissesOnAction);
    }
  }]);

  return MDCSnackbar;
}(base_component);
// CONCATENATED MODULE: ../node_modules/preact-material-components/Snackbar/index.js
function Snackbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Snackbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Snackbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Snackbar__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};





function shallowDiffers(a, b) {
  for (var i in a) {
    if (!(i in b)) return true;
  }for (var _i in b) {
    if (a[_i] !== b[_i]) return true;
  }return false;
}

/**
 * dismissesOnAction = true
 */

var Snackbar_Snackbar = function (_MaterialComponent) {
  Snackbar__inherits(Snackbar, _MaterialComponent);

  function Snackbar() {
    Snackbar__classCallCheck(this, Snackbar);

    var _this = Snackbar__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "snackbar";
    _this.isPureReactComponent = true;
    return _this;
  }

  Snackbar.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = snackbar_MDCSnackbar.attachTo(this.control);
    if (this.props.dismissesOnAction === undefined || this.props.dismissesOnAction === null) {
      this.MDComponent.dismissesOnAction = true;
    } else {
      this.MDComponent.dismissesOnAction = this.props.dismissesOnAction;
    }
  };

  Snackbar.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Snackbar.prototype.shouldComponentUpdate = function shouldComponentUpdate(props, state) {
    return shallowDiffers(this.props, props) || shallowDiffers(this.state, state);
  };

  Snackbar.prototype.materialDom = function materialDom(props) {
    var _this2 = this;

    return Object(preact_min["h"])("div", Snackbar__extends({
      "aria-live": "assertive",
      "aria-atomic": "true",
      "aria-hidden": "true",
      ref: function ref(control) {
        return _this2.control = control;
      }
    }, props), Object(preact_min["h"])("div", { className: "mdc-snackbar__text" }), Object(preact_min["h"])("div", { className: "mdc-snackbar__action-wrapper" }, Object(preact_min["h"])("button", { type: "button", className: "mdc-snackbar__action-button" })));
  };

  return Snackbar;
}(MaterialComponent_MaterialComponent);


// EXTERNAL MODULE: ./routes/snackbar/style.scss
var snackbar_style = __webpack_require__("frf2");
var snackbar_style_default = /*#__PURE__*/__webpack_require__.n(snackbar_style);

// EXTERNAL MODULE: ./routes/snackbar/sample.txt
var snackbar_sample = __webpack_require__("K/3F");
var snackbar_sample_default = /*#__PURE__*/__webpack_require__.n(snackbar_sample);

// CONCATENATED MODULE: ./routes/snackbar/index.js


function routes_snackbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_snackbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_snackbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components



// Components



// Styles


// Samples


// Class

var snackbar__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var snackbar__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    snackbar_sample_default.a
  )
);

var snackbar__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var snackbar__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-snackbar"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-snackbar" },
    " ",
    "here"
  ),
  "."
);

var snackbar__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var snackbar_SnackbarPage = function (_Component) {
  routes_snackbar__inherits(SnackbarPage, _Component);

  function SnackbarPage() {
    routes_snackbar__classCallCheck(this, SnackbarPage);

    var _this = routes_snackbar__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Snackbar",
      props: [{
        name: "dismissesOnAction",
        description: "tells whether or not snackbar auto dismisses upon clicking the action button"
      }]
    }];
    return _this;
  }

  SnackbarPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      { className: "page-snackbar" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      snackbar__ref,
      snackbar__ref2,
      snackbar__ref3,
      snackbar__ref4,
      snackbar__ref5,
      Object(preact_min["h"])(
        preact_material_components_Button,
        {
          raised: true,
          primary: true,
          onClick: function onClick() {
            _this2.bar.MDComponent.show({
              message: "Hello Snack!"
            });
          }
        },
        "Show snack"
      ),
      Object(preact_min["h"])(Snackbar_Snackbar, {
        ref: function ref(bar) {
          _this2.bar = bar;
        }
      })
    );
  };

  return SnackbarPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/switch/style.scss
var switch_style = __webpack_require__("fWpu");
var switch_style_default = /*#__PURE__*/__webpack_require__.n(switch_style);

// EXTERNAL MODULE: ./routes/switch/sample.txt
var switch_sample = __webpack_require__("4igI");
var switch_sample_default = /*#__PURE__*/__webpack_require__.n(switch_sample);

// CONCATENATED MODULE: ./routes/switch/index.js


function switch__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function switch__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function switch__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Samples


// Class

var switch__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var switch__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    switch_sample_default.a
  )
);

var switch__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var switch__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-switch"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-switch" },
    " ",
    "here"
  ),
  "."
);

var switch__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var switch__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Default "
);

var switch__ref7 = Object(preact_min["h"])(Switch_Switch, null);

var switch__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Disabled "
);

var switch__ref9 = Object(preact_min["h"])(Switch_Switch, { disabled: true });

var switch_SwitchPage = function (_Component) {
  switch__inherits(SwitchPage, _Component);

  function SwitchPage() {
    switch__classCallCheck(this, SwitchPage);

    var _this = switch__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Switch",
      props: [{
        name: "disabled",
        description: "Disables the switch."
      }]
    }];
    return _this;
  }

  SwitchPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-switch" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      switch__ref,
      switch__ref2,
      switch__ref3,
      switch__ref4,
      switch__ref5,
      switch__ref6,
      switch__ref7,
      switch__ref8,
      switch__ref9
    );
  };

  return SwitchPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/tabs/tab/constants.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var tab_constants_cssClasses = {
  ACTIVE: 'mdc-tab--active'
};

var tab_constants_strings = {
  SELECTED_EVENT: 'MDCTab:selected'
};
// CONCATENATED MODULE: ../node_modules/@material/tabs/tab/foundation.js
var tab_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var tab_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function tab_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tab_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tab_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var foundation_MDCTabFoundation = function (_MDCFoundation) {
  tab_foundation__inherits(MDCTabFoundation, _MDCFoundation);

  tab_foundation__createClass(MDCTabFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return tab_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return tab_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerInteractionHandler: function registerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* type: string, handler: EventListener */{},
        getOffsetWidth: function getOffsetWidth() {
          return (/* number */0
          );
        },
        getOffsetLeft: function getOffsetLeft() {
          return (/* number */0
          );
        },
        notifySelected: function notifySelected() {}
      };
    }
  }]);

  function MDCTabFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    tab_foundation__classCallCheck(this, MDCTabFoundation);

    var _this = tab_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, tab_foundation__extends(MDCTabFoundation.defaultAdapter, adapter)));

    _this.computedWidth_ = 0;
    _this.computedLeft_ = 0;
    _this.isActive_ = false;
    _this.preventDefaultOnClick_ = false;

    _this.clickHandler_ = function (evt) {
      if (_this.preventDefaultOnClick_) {
        evt.preventDefault();
      }
      _this.adapter_.notifySelected();
    };

    _this.keydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Enter' || evt.keyCode === 13) {
        _this.adapter_.notifySelected();
      }
    };
    return _this;
  }

  MDCTabFoundation.prototype.init = function init() {
    this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
  };

  MDCTabFoundation.prototype.destroy = function destroy() {
    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
  };

  MDCTabFoundation.prototype.getComputedWidth = function getComputedWidth() {
    return this.computedWidth_;
  };

  MDCTabFoundation.prototype.getComputedLeft = function getComputedLeft() {
    return this.computedLeft_;
  };

  MDCTabFoundation.prototype.isActive = function isActive() {
    return this.isActive_;
  };

  MDCTabFoundation.prototype.setActive = function setActive(isActive) {
    this.isActive_ = isActive;
    if (this.isActive_) {
      this.adapter_.addClass(tab_constants_cssClasses.ACTIVE);
    } else {
      this.adapter_.removeClass(tab_constants_cssClasses.ACTIVE);
    }
  };

  MDCTabFoundation.prototype.preventsDefaultOnClick = function preventsDefaultOnClick() {
    return this.preventDefaultOnClick_;
  };

  MDCTabFoundation.prototype.setPreventDefaultOnClick = function setPreventDefaultOnClick(preventDefaultOnClick) {
    this.preventDefaultOnClick_ = preventDefaultOnClick;
  };

  MDCTabFoundation.prototype.measureSelf = function measureSelf() {
    this.computedWidth_ = this.adapter_.getOffsetWidth();
    this.computedLeft_ = this.adapter_.getOffsetLeft();
  };

  return MDCTabFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/tabs/tab/index.js
var tab__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function tab__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tab__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tab__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









var tab_MDCTab = function (_MDCComponent) {
  tab__inherits(MDCTab, _MDCComponent);

  MDCTab.attachTo = function attachTo(root) {
    return new MDCTab(root);
  };

  tab__createClass(MDCTab, [{
    key: 'computedWidth',
    get: function get() {
      return this.foundation_.getComputedWidth();
    }
  }, {
    key: 'computedLeft',
    get: function get() {
      return this.foundation_.getComputedLeft();
    }
  }, {
    key: 'isActive',
    get: function get() {
      return this.foundation_.isActive();
    },
    set: function set(isActive) {
      this.foundation_.setActive(isActive);
    }
  }, {
    key: 'preventDefaultOnClick',
    get: function get() {
      return this.foundation_.preventsDefaultOnClick();
    },
    set: function set(preventDefaultOnClick) {
      this.foundation_.setPreventDefaultOnClick(preventDefaultOnClick);
    }
  }]);

  function MDCTab() {
    tab__classCallCheck(this, MDCTab);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = tab__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.ripple_ = ripple_MDCRipple.attachTo(_this.root_);
    return _this;
  }

  MDCTab.prototype.destroy = function destroy() {
    this.ripple_.destroy();
    _MDCComponent.prototype.destroy.call(this);
  };

  MDCTab.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCTabFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return _this2.root_.addEventListener(type, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return _this2.root_.removeEventListener(type, handler);
      },
      getOffsetWidth: function getOffsetWidth() {
        return _this2.root_.offsetWidth;
      },
      getOffsetLeft: function getOffsetLeft() {
        return _this2.root_.offsetLeft;
      },
      notifySelected: function notifySelected() {
        return _this2.emit(foundation_MDCTabFoundation.strings.SELECTED_EVENT, { tab: _this2 }, true);
      }
    });
  };

  MDCTab.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    this.isActive = this.root_.classList.contains(tab_constants_cssClasses.ACTIVE);
  };

  MDCTab.prototype.measureSelf = function measureSelf() {
    this.foundation_.measureSelf();
  };

  return MDCTab;
}(base_component);
// CONCATENATED MODULE: ../node_modules/@material/tabs/tab-bar/constants.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var tab_bar_constants_cssClasses = {
  UPGRADED: 'mdc-tab-bar-upgraded'
};

var tab_bar_constants_strings = {
  TAB_SELECTOR: '.mdc-tab',
  INDICATOR_SELECTOR: '.mdc-tab-bar__indicator',
  CHANGE_EVENT: 'MDCTabBar:change'
};
// CONCATENATED MODULE: ../node_modules/@material/tabs/tab-bar/foundation.js
var tab_bar_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var tab_bar_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function tab_bar_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tab_bar_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tab_bar_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var foundation_MDCTabBarFoundation = function (_MDCFoundation) {
  tab_bar_foundation__inherits(MDCTabBarFoundation, _MDCFoundation);

  tab_bar_foundation__createClass(MDCTabBarFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return tab_bar_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return tab_bar_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        bindOnMDCTabSelectedEvent: function bindOnMDCTabSelectedEvent() {},
        unbindOnMDCTabSelectedEvent: function unbindOnMDCTabSelectedEvent() {},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        getOffsetWidth: function getOffsetWidth() {
          return (/* number */0
          );
        },
        setStyleForIndicator: function setStyleForIndicator() /* propertyName: string, value: string */{},
        getOffsetWidthForIndicator: function getOffsetWidthForIndicator() {
          return (/* number */0
          );
        },
        notifyChange: function notifyChange() /* evtData: {activeTabIndex: number} */{},
        getNumberOfTabs: function getNumberOfTabs() {
          return (/* number */0
          );
        },
        isTabActiveAtIndex: function isTabActiveAtIndex() {
          return (/* index: number */ /* boolean */false
          );
        },
        setTabActiveAtIndex: function setTabActiveAtIndex() /* index: number, isActive: true */{},
        isDefaultPreventedOnClickForTabAtIndex: function isDefaultPreventedOnClickForTabAtIndex() {
          return (/* index: number */ /* boolean */false
          );
        },
        setPreventDefaultOnClickForTabAtIndex: function setPreventDefaultOnClickForTabAtIndex() /* index: number, preventDefaultOnClick: boolean */{},
        measureTabAtIndex: function measureTabAtIndex() /* index: number */{},
        getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex() {
          return (/* index: number */ /* number */0
          );
        },
        getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex() {
          return (/* index: number */ /* number */0
          );
        }
      };
    }
  }]);

  function MDCTabBarFoundation(adapter) {
    tab_bar_foundation__classCallCheck(this, MDCTabBarFoundation);

    var _this = tab_bar_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, tab_bar_foundation__extends(MDCTabBarFoundation.defaultAdapter, adapter)));

    _this.isIndicatorShown_ = false;
    _this.computedWidth_ = 0;
    _this.computedLeft_ = 0;
    _this.activeTabIndex_ = 0;
    _this.layoutFrame_ = 0;
    _this.resizeHandler_ = function () {
      return _this.layout();
    };
    return _this;
  }

  MDCTabBarFoundation.prototype.init = function init() {
    this.adapter_.addClass(tab_bar_constants_cssClasses.UPGRADED);
    this.adapter_.bindOnMDCTabSelectedEvent();
    this.adapter_.registerResizeHandler(this.resizeHandler_);
    var activeTabIndex = this.findActiveTabIndex_();
    if (activeTabIndex >= 0) {
      this.activeTabIndex_ = activeTabIndex;
    }
    this.layout();
  };

  MDCTabBarFoundation.prototype.destroy = function destroy() {
    this.adapter_.removeClass(tab_bar_constants_cssClasses.UPGRADED);
    this.adapter_.unbindOnMDCTabSelectedEvent();
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
  };

  MDCTabBarFoundation.prototype.layoutInternal_ = function layoutInternal_() {
    var _this2 = this;

    this.forEachTabIndex_(function (index) {
      return _this2.adapter_.measureTabAtIndex(index);
    });
    this.computedWidth_ = this.adapter_.getOffsetWidth();
    this.layoutIndicator_();
  };

  MDCTabBarFoundation.prototype.layoutIndicator_ = function layoutIndicator_() {
    var isIndicatorFirstRender = !this.isIndicatorShown_;

    // Ensure that indicator appears in the right position immediately for correct first render.
    if (isIndicatorFirstRender) {
      this.adapter_.setStyleForIndicator('transition', 'none');
    }

    var translateAmtForActiveTabLeft = this.adapter_.getComputedLeftForTabAtIndex(this.activeTabIndex_);
    var scaleAmtForActiveTabWidth = this.adapter_.getComputedWidthForTabAtIndex(this.activeTabIndex_) / this.adapter_.getOffsetWidth();

    var transformValue = 'translateX(' + translateAmtForActiveTabLeft + 'px) scale(' + scaleAmtForActiveTabWidth + ', 1)';
    this.adapter_.setStyleForIndicator(getCorrectPropertyName(window, 'transform'), transformValue);

    if (isIndicatorFirstRender) {
      // Force layout so that transform styles to take effect.
      this.adapter_.getOffsetWidthForIndicator();
      this.adapter_.setStyleForIndicator('transition', '');
      this.adapter_.setStyleForIndicator('visibility', 'visible');
      this.isIndicatorShown_ = true;
    }
  };

  MDCTabBarFoundation.prototype.findActiveTabIndex_ = function findActiveTabIndex_() {
    var _this3 = this;

    var activeTabIndex = -1;
    this.forEachTabIndex_(function (index) {
      if (_this3.adapter_.isTabActiveAtIndex(index)) {
        activeTabIndex = index;
        return true;
      }
    });
    return activeTabIndex;
  };

  MDCTabBarFoundation.prototype.forEachTabIndex_ = function forEachTabIndex_(iterator) {
    var numTabs = this.adapter_.getNumberOfTabs();
    for (var index = 0; index < numTabs; index++) {
      var shouldBreak = iterator(index);
      if (shouldBreak) {
        break;
      }
    }
  };

  MDCTabBarFoundation.prototype.layout = function layout() {
    var _this4 = this;

    if (this.layoutFrame_) {
      cancelAnimationFrame(this.layoutFrame_);
    }

    this.layoutFrame_ = requestAnimationFrame(function () {
      _this4.layoutInternal_();
      _this4.layoutFrame_ = 0;
    });
  };

  MDCTabBarFoundation.prototype.switchToTabAtIndex = function switchToTabAtIndex(index, shouldNotify) {
    var _this5 = this;

    if (index === this.activeTabIndex_) {
      return;
    }

    if (index < 0 || index >= this.adapter_.getNumberOfTabs()) {
      throw new Error('Out of bounds index specified for tab: ' + index);
    }

    var prevActiveTabIndex = this.activeTabIndex_;
    this.activeTabIndex_ = index;
    requestAnimationFrame(function () {
      if (prevActiveTabIndex >= 0) {
        _this5.adapter_.setTabActiveAtIndex(prevActiveTabIndex, false);
      }
      _this5.adapter_.setTabActiveAtIndex(_this5.activeTabIndex_, true);
      _this5.layoutIndicator_();
      if (shouldNotify) {
        _this5.adapter_.notifyChange({ activeTabIndex: _this5.activeTabIndex_ });
      }
    });
  };

  MDCTabBarFoundation.prototype.getActiveTabIndex = function getActiveTabIndex() {
    return this.findActiveTabIndex_();
  };

  return MDCTabBarFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/tabs/tab-bar/index.js
var tab_bar__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function tab_bar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tab_bar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tab_bar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








var tab_bar_MDCTabBar = function (_MDCComponent) {
  tab_bar__inherits(MDCTabBar, _MDCComponent);

  function MDCTabBar() {
    tab_bar__classCallCheck(this, MDCTabBar);

    return tab_bar__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCTabBar.attachTo = function attachTo(root) {
    return new MDCTabBar(root);
  };

  MDCTabBar.prototype.initialize = function initialize() {
    var _this2 = this;

    var tabFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {
      return new tab_MDCTab(el);
    };

    this.indicator_ = this.root_.querySelector(foundation_MDCTabBarFoundation.strings.INDICATOR_SELECTOR);
    this.tabs_ = this.gatherTabs_(tabFactory);
    this.tabSelectedHandler_ = function (_ref) {
      var detail = _ref.detail;
      var tab = detail.tab;

      _this2.setActiveTab_(tab, true);
    };
  };

  MDCTabBar.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this3 = this;

    return new foundation_MDCTabBarFoundation({
      addClass: function addClass(className) {
        return _this3.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this3.root_.classList.remove(className);
      },
      bindOnMDCTabSelectedEvent: function bindOnMDCTabSelectedEvent() {
        return _this3.listen(foundation_MDCTabFoundation.strings.SELECTED_EVENT, _this3.tabSelectedHandler_);
      },
      unbindOnMDCTabSelectedEvent: function unbindOnMDCTabSelectedEvent() {
        return _this3.unlisten(foundation_MDCTabFoundation.strings.SELECTED_EVENT, _this3.tabSelectedHandler_);
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      getOffsetWidth: function getOffsetWidth() {
        return _this3.root_.offsetWidth;
      },
      setStyleForIndicator: function setStyleForIndicator(propertyName, value) {
        return _this3.indicator_.style.setProperty(propertyName, value);
      },
      getOffsetWidthForIndicator: function getOffsetWidthForIndicator() {
        return _this3.indicator_.offsetWidth;
      },
      notifyChange: function notifyChange(evtData) {
        return _this3.emit(foundation_MDCTabBarFoundation.strings.CHANGE_EVENT, evtData);
      },
      getNumberOfTabs: function getNumberOfTabs() {
        return _this3.tabs.length;
      },
      isTabActiveAtIndex: function isTabActiveAtIndex(index) {
        return _this3.tabs[index].isActive;
      },
      setTabActiveAtIndex: function setTabActiveAtIndex(index, isActive) {
        _this3.tabs[index].isActive = isActive;
      },
      isDefaultPreventedOnClickForTabAtIndex: function isDefaultPreventedOnClickForTabAtIndex(index) {
        return _this3.tabs[index].preventDefaultOnClick;
      },
      setPreventDefaultOnClickForTabAtIndex: function setPreventDefaultOnClickForTabAtIndex(index, preventDefaultOnClick) {
        _this3.tabs[index].preventDefaultOnClick = preventDefaultOnClick;
      },
      measureTabAtIndex: function measureTabAtIndex(index) {
        return _this3.tabs[index].measureSelf();
      },
      getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex(index) {
        return _this3.tabs[index].computedWidth;
      },
      getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex(index) {
        return _this3.tabs[index].computedLeft;
      }
    });
  };

  MDCTabBar.prototype.gatherTabs_ = function gatherTabs_(tabFactory) {
    var tabElements = [].slice.call(this.root_.querySelectorAll(foundation_MDCTabBarFoundation.strings.TAB_SELECTOR));
    return tabElements.map(function (el) {
      return tabFactory(el);
    });
  };

  MDCTabBar.prototype.setActiveTabIndex_ = function setActiveTabIndex_(activeTabIndex, notifyChange) {
    this.foundation_.switchToTabAtIndex(activeTabIndex, notifyChange);
  };

  MDCTabBar.prototype.layout = function layout() {
    this.foundation_.layout();
  };

  MDCTabBar.prototype.setActiveTab_ = function setActiveTab_(activeTab, notifyChange) {
    var indexOfTab = this.tabs.indexOf(activeTab);
    if (indexOfTab < 0) {
      throw new Error('Invalid tab component given as activeTab: Tab not found within this component\'s tab list');
    }
    this.setActiveTabIndex_(indexOfTab, notifyChange);
  };

  tab_bar__createClass(MDCTabBar, [{
    key: 'tabs',
    get: function get() {
      return this.tabs_;
    }
  }, {
    key: 'activeTab',
    get: function get() {
      var activeIndex = this.foundation_.getActiveTabIndex();
      return this.tabs[activeIndex];
    },
    set: function set(tab) {
      this.setActiveTab_(tab, false);
    }
  }, {
    key: 'activeTabIndex',
    get: function get() {
      return this.foundation_.getActiveTabIndex();
    },
    set: function set(index) {
      this.setActiveTabIndex_(index, false);
    }
  }]);

  return MDCTabBar;
}(base_component);
// CONCATENATED MODULE: ../node_modules/@material/tabs/tab-bar-scroller/constants.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var tab_bar_scroller_constants_cssClasses = {
  INDICATOR_FORWARD: 'mdc-tab-bar-scroller__indicator--forward',
  INDICATOR_BACK: 'mdc-tab-bar-scroller__indicator--back',
  INDICATOR_ENABLED: 'mdc-tab-bar-scroller__indicator--enabled',
  TAB: 'mdc-tab'
};

var tab_bar_scroller_constants_strings = {
  FRAME_SELECTOR: '.mdc-tab-bar-scroller__scroll-frame',
  TABS_SELECTOR: '.mdc-tab-bar-scroller__scroll-frame__tabs',
  TAB_SELECTOR: '.mdc-tab',
  INDICATOR_FORWARD_SELECTOR: '.mdc-tab-bar-scroller__indicator--forward',
  INDICATOR_BACK_SELECTOR: '.mdc-tab-bar-scroller__indicator--back'
};
// CONCATENATED MODULE: ../node_modules/@material/tabs/tab-bar-scroller/foundation.js
var tab_bar_scroller_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var tab_bar_scroller_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function tab_bar_scroller_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tab_bar_scroller_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tab_bar_scroller_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var foundation_MDCTabBarScrollerFoundation = function (_MDCFoundation) {
  tab_bar_scroller_foundation__inherits(MDCTabBarScrollerFoundation, _MDCFoundation);

  tab_bar_scroller_foundation__createClass(MDCTabBarScrollerFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return tab_bar_scroller_constants_cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return tab_bar_scroller_constants_strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        eventTargetHasClass: function eventTargetHasClass() {
          return (/* target: EventTarget, className: string */ /* boolean */false
          );
        },
        addClassToForwardIndicator: function addClassToForwardIndicator() /* className: string */{},
        removeClassFromForwardIndicator: function removeClassFromForwardIndicator() /* className: string */{},
        addClassToBackIndicator: function addClassToBackIndicator() /* className: string */{},
        removeClassFromBackIndicator: function removeClassFromBackIndicator() /* className: string */{},
        isRTL: function isRTL() {
          return (/* boolean */false
          );
        },
        registerBackIndicatorClickHandler: function registerBackIndicatorClickHandler() /* handler: EventListener */{},
        deregisterBackIndicatorClickHandler: function deregisterBackIndicatorClickHandler() /* handler: EventListener */{},
        registerForwardIndicatorClickHandler: function registerForwardIndicatorClickHandler() /* handler: EventListener */{},
        deregisterForwardIndicatorClickHandler: function deregisterForwardIndicatorClickHandler() /* handler: EventListener */{},
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler() /* evt: string, handler: EventListener */{},
        registerWindowResizeHandler: function registerWindowResizeHandler() /* handler: EventListener */{},
        deregisterWindowResizeHandler: function deregisterWindowResizeHandler() /* handler: EventListener */{},
        getNumberOfTabs: function getNumberOfTabs() {
          return (/* number */0
          );
        },
        getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex() {
          return (/* number */0
          );
        },
        getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex() {
          return (/* number */0
          );
        },
        getOffsetWidthForScrollFrame: function getOffsetWidthForScrollFrame() {
          return (/* number */0
          );
        },
        getScrollLeftForScrollFrame: function getScrollLeftForScrollFrame() {
          return (/* number */0
          );
        },
        setScrollLeftForScrollFrame: function setScrollLeftForScrollFrame() /* scrollLeftAmount: number */{},
        getOffsetWidthForTabBar: function getOffsetWidthForTabBar() {
          return (/* number */0
          );
        },
        setTransformStyleForTabBar: function setTransformStyleForTabBar() /* value: string */{},
        getOffsetLeftForEventTarget: function getOffsetLeftForEventTarget() {
          return (/* target: EventTarget */ /* number */0
          );
        },
        getOffsetWidthForEventTarget: function getOffsetWidthForEventTarget() {
          return (/* target: EventTarget */ /* number */0
          );
        }
      };
    }
  }]);

  function MDCTabBarScrollerFoundation(adapter) {
    tab_bar_scroller_foundation__classCallCheck(this, MDCTabBarScrollerFoundation);

    var _this = tab_bar_scroller_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, tab_bar_scroller_foundation__extends(MDCTabBarScrollerFoundation.defaultAdapter, adapter)));

    _this.pointerDownRecognized_ = false;
    _this.currentTranslateOffset_ = 0;
    _this.focusedTarget_ = null;
    _this.layoutFrame_ = 0;
    _this.scrollFrameScrollLeft_ = 0;
    _this.forwardIndicatorClickHandler_ = function (evt) {
      return _this.scrollForward(evt);
    };
    _this.backIndicatorClickHandler_ = function (evt) {
      return _this.scrollBack(evt);
    };
    _this.resizeHandler_ = function () {
      return _this.layout();
    };
    _this.interactionHandler_ = function (evt) {
      if (evt.type == 'touchstart' || evt.type == 'mousedown') {
        _this.pointerDownRecognized_ = true;
      }
      _this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type == 'focus') {
        _this.pointerDownRecognized_ = false;
      }
    };
    return _this;
  }

  MDCTabBarScrollerFoundation.prototype.init = function init() {
    var _this2 = this;

    this.adapter_.registerBackIndicatorClickHandler(this.backIndicatorClickHandler_);
    this.adapter_.registerForwardIndicatorClickHandler(this.forwardIndicatorClickHandler_);
    this.adapter_.registerWindowResizeHandler(this.resizeHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
      _this2.adapter_.registerCapturedInteractionHandler(evtType, _this2.interactionHandler_);
    });
    this.layout();
  };

  MDCTabBarScrollerFoundation.prototype.destroy = function destroy() {
    var _this3 = this;

    this.adapter_.deregisterBackIndicatorClickHandler(this.backIndicatorClickHandler_);
    this.adapter_.deregisterForwardIndicatorClickHandler(this.forwardIndicatorClickHandler_);
    this.adapter_.deregisterWindowResizeHandler(this.resizeHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
      _this3.adapter_.deregisterCapturedInteractionHandler(evtType, _this3.interactionHandler_);
    });
  };

  MDCTabBarScrollerFoundation.prototype.scrollBack = function scrollBack() {
    var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (evt) {
      evt.preventDefault();
    }

    var tabWidthAccumulator = 0;
    var scrollTargetIndex = 0;

    for (var i = this.adapter_.getNumberOfTabs() - 1; i > 0; i--) {
      var tabOffsetLeft = this.adapter_.getComputedLeftForTabAtIndex(i);
      var tabBarWidthLessTabOffsetLeft = this.adapter_.getOffsetWidthForTabBar() - tabOffsetLeft;

      var tabIsNotOccluded = tabOffsetLeft > this.currentTranslateOffset_;
      if (this.isRTL_()) {
        tabIsNotOccluded = tabBarWidthLessTabOffsetLeft > this.currentTranslateOffset_;
      }

      if (tabIsNotOccluded) {
        continue;
      }

      tabWidthAccumulator += this.adapter_.getComputedWidthForTabAtIndex(i);

      var scrollTargetDetermined = tabWidthAccumulator > this.adapter_.getOffsetWidthForScrollFrame();
      if (scrollTargetDetermined) {
        scrollTargetIndex = this.isRTL_() ? i + 1 : i;
        break;
      }
    }

    this.scrollToTabAtIndex(scrollTargetIndex);
  };

  MDCTabBarScrollerFoundation.prototype.scrollForward = function scrollForward() {
    var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (evt) {
      evt.preventDefault();
    }

    var scrollFrameOffsetWidth = this.adapter_.getOffsetWidthForScrollFrame() + this.currentTranslateOffset_;
    var scrollTargetIndex = 0;

    for (var i = 0; i < this.adapter_.getNumberOfTabs(); i++) {
      var tabOffsetLeftAndWidth = this.adapter_.getComputedLeftForTabAtIndex(i) + this.adapter_.getComputedWidthForTabAtIndex(i);
      var scrollTargetDetermined = tabOffsetLeftAndWidth > scrollFrameOffsetWidth;

      if (this.isRTL_()) {
        var frameOffsetAndTabWidth = scrollFrameOffsetWidth - this.adapter_.getComputedWidthForTabAtIndex(i);
        var _tabOffsetLeftAndWidth = this.adapter_.getComputedLeftForTabAtIndex(i) + this.adapter_.getComputedWidthForTabAtIndex(i);
        var tabRightOffset = this.adapter_.getOffsetWidthForTabBar() - _tabOffsetLeftAndWidth;

        scrollTargetDetermined = tabRightOffset > frameOffsetAndTabWidth;
      }

      if (scrollTargetDetermined) {
        scrollTargetIndex = i;
        break;
      }
    }

    this.scrollToTabAtIndex(scrollTargetIndex);
  };

  MDCTabBarScrollerFoundation.prototype.layout = function layout() {
    var _this4 = this;

    cancelAnimationFrame(this.layoutFrame_);
    this.scrollFrameScrollLeft_ = this.adapter_.getScrollLeftForScrollFrame();
    this.layoutFrame_ = requestAnimationFrame(function () {
      return _this4.layout_();
    });
  };

  MDCTabBarScrollerFoundation.prototype.isRTL_ = function isRTL_() {
    return this.adapter_.isRTL();
  };

  MDCTabBarScrollerFoundation.prototype.handlePossibleTabKeyboardFocus_ = function handlePossibleTabKeyboardFocus_(evt) {
    if (!this.adapter_.eventTargetHasClass(evt.target, tab_bar_scroller_constants_cssClasses.TAB) || this.pointerDownRecognized_) {
      return;
    }

    var resetAmt = this.isRTL_() ? this.scrollFrameScrollLeft_ : 0;
    this.adapter_.setScrollLeftForScrollFrame(resetAmt);

    this.focusedTarget_ = evt.target;
    var scrollFrameWidth = this.adapter_.getOffsetWidthForScrollFrame();
    var tabBarWidth = this.adapter_.getOffsetWidthForTabBar();
    var leftEdge = this.adapter_.getOffsetLeftForEventTarget(this.focusedTarget_);
    var rightEdge = leftEdge + this.adapter_.getOffsetWidthForEventTarget(this.focusedTarget_);

    var shouldScrollBack = rightEdge <= this.currentTranslateOffset_;
    var shouldScrollForward = rightEdge > this.currentTranslateOffset_ + scrollFrameWidth;

    if (this.isRTL_()) {
      var normalizedLeftOffset = tabBarWidth - leftEdge;
      shouldScrollBack = leftEdge >= tabBarWidth - this.currentTranslateOffset_;
      shouldScrollForward = normalizedLeftOffset > scrollFrameWidth + this.currentTranslateOffset_;
    }

    if (shouldScrollForward) {
      this.scrollForward();
    } else if (shouldScrollBack) {
      this.scrollBack();
    }

    this.pointerDownRecognized_ = false;
  };

  MDCTabBarScrollerFoundation.prototype.layout_ = function layout_() {
    var frameWidth = this.adapter_.getOffsetWidthForScrollFrame();
    var isOverflowing = this.adapter_.getOffsetWidthForTabBar() > frameWidth;

    if (!isOverflowing) {
      this.currentTranslateOffset_ = 0;
    }

    this.shiftFrame_();
    this.updateIndicatorEnabledStates_();
  };

  MDCTabBarScrollerFoundation.prototype.scrollToTabAtIndex = function scrollToTabAtIndex(index) {
    var _this5 = this;

    var scrollTargetOffsetLeft = this.adapter_.getComputedLeftForTabAtIndex(index);
    var scrollTargetOffsetWidth = this.adapter_.getComputedWidthForTabAtIndex(index);

    this.currentTranslateOffset_ = this.normalizeForRTL_(scrollTargetOffsetLeft, scrollTargetOffsetWidth);

    requestAnimationFrame(function () {
      return _this5.shiftFrame_();
    });
  };

  MDCTabBarScrollerFoundation.prototype.normalizeForRTL_ = function normalizeForRTL_(left, width) {
    return this.isRTL_() ? this.adapter_.getOffsetWidthForTabBar() - (left + width) : left;
  };

  MDCTabBarScrollerFoundation.prototype.shiftFrame_ = function shiftFrame_() {
    var shiftAmount = this.isRTL_() ? this.currentTranslateOffset_ : -this.currentTranslateOffset_;

    this.adapter_.setTransformStyleForTabBar('translateX(' + shiftAmount + 'px)');
    this.updateIndicatorEnabledStates_();
  };

  MDCTabBarScrollerFoundation.prototype.updateIndicatorEnabledStates_ = function updateIndicatorEnabledStates_() {
    var INDICATOR_ENABLED = tab_bar_scroller_constants_cssClasses.INDICATOR_ENABLED;

    if (this.currentTranslateOffset_ === 0) {
      this.adapter_.removeClassFromBackIndicator(INDICATOR_ENABLED);
    } else {
      this.adapter_.addClassToBackIndicator(INDICATOR_ENABLED);
    }

    var remainingTabBarWidth = this.adapter_.getOffsetWidthForTabBar() - this.currentTranslateOffset_;
    if (remainingTabBarWidth > this.adapter_.getOffsetWidthForScrollFrame()) {
      this.adapter_.addClassToForwardIndicator(INDICATOR_ENABLED);
    } else {
      this.adapter_.removeClassFromForwardIndicator(INDICATOR_ENABLED);
    }
  };

  return MDCTabBarScrollerFoundation;
}(base_foundation);


// CONCATENATED MODULE: ../node_modules/@material/tabs/tab-bar-scroller/index.js
var tab_bar_scroller__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function tab_bar_scroller__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tab_bar_scroller__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tab_bar_scroller__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */









var tab_bar_scroller_MDCTabBarScroller = function (_MDCComponent) {
  tab_bar_scroller__inherits(MDCTabBarScroller, _MDCComponent);

  function MDCTabBarScroller() {
    tab_bar_scroller__classCallCheck(this, MDCTabBarScroller);

    return tab_bar_scroller__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCTabBarScroller.attachTo = function attachTo(root) {
    return new MDCTabBarScroller(root);
  };

  MDCTabBarScroller.prototype.initialize = function initialize() {
    var tabBarFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (root) {
      return new tab_bar_MDCTabBar(root);
    };

    this.scrollFrame_ = this.root_.querySelector(foundation_MDCTabBarScrollerFoundation.strings.FRAME_SELECTOR);
    this.tabBarEl_ = this.root_.querySelector(foundation_MDCTabBarScrollerFoundation.strings.TABS_SELECTOR);
    this.forwardIndicator_ = this.root_.querySelector(foundation_MDCTabBarScrollerFoundation.strings.INDICATOR_FORWARD_SELECTOR);
    this.backIndicator_ = this.root_.querySelector(foundation_MDCTabBarScrollerFoundation.strings.INDICATOR_BACK_SELECTOR);
    this.tabBar_ = tabBarFactory(this.tabBarEl_);
  };

  MDCTabBarScroller.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCTabBarScrollerFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      eventTargetHasClass: function eventTargetHasClass(target, className) {
        return target.classList.contains(className);
      },
      addClassToForwardIndicator: function addClassToForwardIndicator(className) {
        return _this2.forwardIndicator_.classList.add(className);
      },
      removeClassFromForwardIndicator: function removeClassFromForwardIndicator(className) {
        return _this2.forwardIndicator_.classList.remove(className);
      },
      addClassToBackIndicator: function addClassToBackIndicator(className) {
        return _this2.backIndicator_.classList.add(className);
      },
      removeClassFromBackIndicator: function removeClassFromBackIndicator(className) {
        return _this2.backIndicator_.classList.remove(className);
      },
      isRTL: function isRTL() {
        return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
      },
      registerBackIndicatorClickHandler: function registerBackIndicatorClickHandler(handler) {
        return _this2.backIndicator_.addEventListener('click', handler);
      },
      deregisterBackIndicatorClickHandler: function deregisterBackIndicatorClickHandler(handler) {
        return _this2.backIndicator_.removeEventListener('click', handler);
      },
      registerForwardIndicatorClickHandler: function registerForwardIndicatorClickHandler(handler) {
        return _this2.forwardIndicator_.addEventListener('click', handler);
      },
      deregisterForwardIndicatorClickHandler: function deregisterForwardIndicatorClickHandler(handler) {
        return _this2.forwardIndicator_.removeEventListener('click', handler);
      },
      registerCapturedInteractionHandler: function registerCapturedInteractionHandler(evt, handler) {
        return _this2.root_.addEventListener(evt, handler, true);
      },
      deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler(evt, handler) {
        return _this2.root_.removeEventListener(evt, handler, true);
      },
      registerWindowResizeHandler: function registerWindowResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterWindowResizeHandler: function deregisterWindowResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      getNumberOfTabs: function getNumberOfTabs() {
        return _this2.tabBar.tabs.length;
      },
      getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex(index) {
        return _this2.tabBar.tabs[index].computedWidth;
      },
      getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex(index) {
        return _this2.tabBar.tabs[index].computedLeft;
      },
      getOffsetWidthForScrollFrame: function getOffsetWidthForScrollFrame() {
        return _this2.scrollFrame_.offsetWidth;
      },
      getScrollLeftForScrollFrame: function getScrollLeftForScrollFrame() {
        return _this2.scrollFrame_.scrollLeft;
      },
      setScrollLeftForScrollFrame: function setScrollLeftForScrollFrame(scrollLeftAmount) {
        return _this2.scrollFrame_.scrollLeft = scrollLeftAmount;
      },
      getOffsetWidthForTabBar: function getOffsetWidthForTabBar() {
        return _this2.tabBarEl_.offsetWidth;
      },
      setTransformStyleForTabBar: function setTransformStyleForTabBar(value) {
        _this2.tabBarEl_.style.setProperty(getCorrectPropertyName(window, 'transform'), value);
      },
      getOffsetLeftForEventTarget: function getOffsetLeftForEventTarget(target) {
        return target.offsetLeft;
      },
      getOffsetWidthForEventTarget: function getOffsetWidthForEventTarget(target) {
        return target.offsetWidth;
      }
    });
  };

  MDCTabBarScroller.prototype.layout = function layout() {
    this.foundation_.layout();
  };

  tab_bar_scroller__createClass(MDCTabBarScroller, [{
    key: 'tabBar',
    get: function get() {
      return this.tabBar_;
    }
  }]);

  return MDCTabBarScroller;
}(base_component);
// CONCATENATED MODULE: ../node_modules/@material/tabs/index.js
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




// CONCATENATED MODULE: ../node_modules/preact-material-components/Tabs/index.js
function Tabs__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Tabs__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Tabs__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tabs__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function Tabs__objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}





/**
 * @prop indicator-accent = false
 * @prop icon-tab-bar = false
 * @prop icons-with-text = false
 * @prop scroller = false
 */

var Tabs_Tabs = function (_MaterialComponent) {
  Tabs__inherits(Tabs, _MaterialComponent);

  function Tabs() {
    Tabs__classCallCheck(this, Tabs);

    var _this = Tabs__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "tab-bar";
    _this._mdcProps = ["indicator-accent", "icon-tab-bar", "icons-with-text", "scroller"];
    return _this;
  }

  Tabs.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new tab_bar_MDCTabBar(this.control);
  };

  Tabs.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  Tabs.prototype.materialDom = function materialDom(allprops) {
    var _this2 = this;

    var className = allprops.className,
        props = Tabs__objectWithoutProperties(allprops, ["className"]);

    if (props.scroller) {
      className = "mdc-tab-bar-scroller__scroll-frame__tabs";
    } else {
      className = "";
    }
    return Object(preact_min["h"])("nav", Tabs__extends({
      className: className,
      role: "tablist"
    }, props, {
      ref: function ref(control) {
        return _this2.control = control;
      }
    }), props.children, Object(preact_min["h"])("span", { "class": "mdc-tab-bar__indicator" }));
  };

  return Tabs;
}(MaterialComponent_MaterialComponent);

var Tabs_TabBarScroller = function (_MaterialComponent2) {
  Tabs__inherits(TabBarScroller, _MaterialComponent2);

  function TabBarScroller() {
    Tabs__classCallCheck(this, TabBarScroller);

    var _this3 = Tabs__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this3.componentName = "tab-bar-scroller";
    return _this3;
  }

  TabBarScroller.prototype.componentDidMount = function componentDidMount() {
    this.MDComponent = new tab_bar_scroller_MDCTabBarScroller(this.control);
  };

  TabBarScroller.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent.destroy && this.MDComponent.destroy();
  };

  TabBarScroller.prototype.materialDom = function materialDom(props) {
    var _this4 = this;

    return Object(preact_min["h"])("div", Tabs__extends({}, props, { ref: function ref(control) {
        return _this4.control = control;
      } }), Object(preact_min["h"])("div", { className: "mdc-tab-bar-scroller__indicator mdc-tab-bar-scroller__indicator--back" }, Object(preact_min["h"])("a", {
      className: "mdc-tab-bar-scroller__indicator__inner material-icons",
      href: "#",
      "aria-label": "scroll back button"
    }, "navigate_before")), Object(preact_min["h"])("div", { className: "mdc-tab-bar-scroller__scroll-frame" }, props.children), Object(preact_min["h"])("div", { className: "mdc-tab-bar-scroller__indicator mdc-tab-bar-scroller__indicator--forward" }, Object(preact_min["h"])("a", {
      className: "mdc-tab-bar-scroller__indicator__inner material-icons",
      href: "#",
      "aria-label": "scroll forward button"
    }, "navigate_next")));
  };

  return TabBarScroller;
}(MaterialComponent_MaterialComponent);

/**
 * @prop active = false
 */


var Tabs_Tab = function (_MaterialComponent3) {
  Tabs__inherits(Tab, _MaterialComponent3);

  function Tab() {
    Tabs__classCallCheck(this, Tab);

    var _this5 = Tabs__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this5.componentName = "tab";
    _this5._mdcProps = ["active"];
    return _this5;
  }

  Tab.prototype.materialDom = function materialDom(props) {
    var _this6 = this;

    return Object(preact_min["h"])("a", Tabs__extends({ role: "tab" }, props, { ref: function ref(control) {
        return _this6.control = control;
      } }), props.children);
  };

  return Tab;
}(MaterialComponent_MaterialComponent);

var Tabs_TabIconLabel = function (_MaterialComponent4) {
  Tabs__inherits(TabIconLabel, _MaterialComponent4);

  function TabIconLabel() {
    Tabs__classCallCheck(this, TabIconLabel);

    var _this7 = Tabs__possibleConstructorReturn(this, _MaterialComponent4.call(this));

    _this7.componentName = "tab__icon-text";
    return _this7;
  }

  TabIconLabel.prototype.materialDom = function materialDom(props) {
    var _this8 = this;

    return Object(preact_min["h"])("span", Tabs__extends({}, props, { ref: function ref(control) {
        return _this8.control = control;
      } }), props.children);
  };

  return TabIconLabel;
}(MaterialComponent_MaterialComponent);

Tabs_Tabs.TabBarScroller = Tabs_TabBarScroller;
Tabs_Tabs.Tab = Tabs_Tab;
Tabs_Tabs.TabIconLabel = Tabs_TabIconLabel;
/* harmony default export */ var preact_material_components_Tabs = (Tabs_Tabs);
// EXTERNAL MODULE: ./routes/tabs/sample.txt
var tabs_sample = __webpack_require__("9xBA");
var tabs_sample_default = /*#__PURE__*/__webpack_require__.n(tabs_sample);

// EXTERNAL MODULE: ./routes/tabs/scroller-sample.txt
var scroller_sample = __webpack_require__("9gb+");
var scroller_sample_default = /*#__PURE__*/__webpack_require__.n(scroller_sample);

// CONCATENATED MODULE: ./routes/tabs/index.js


function tabs__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function tabs__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function tabs__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components



// Components



// Samples



// Class

var tabs__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var tabs__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    tabs_sample_default.a
  )
);

var tabs__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Scrollable Tabs Sample code",
  " "
);

var tabs__ref4 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    scroller_sample_default.a
  )
);

var tabs__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var tabs__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-tabs"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-tabs" },
    " ",
    "here"
  ),
  "."
);

var tabs__ref7 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var tabs__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Default "
);

var tabs__ref9 = Object(preact_min["h"])(
  preact_material_components_Tabs,
  { className: "demo-tabs" },
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    "Tab1"
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    "Tab2"
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    "Tab3"
  )
);

var tabs__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "With indicator accent "
);

var tabs__ref11 = Object(preact_min["h"])(
  preact_material_components_Tabs,
  { className: "demo-tabs", "indicator-accent": true },
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    "Tab1"
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    "Tab2"
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    "Tab3"
  )
);

var tabs__ref12 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Icons tabs bar "
);

var tabs__ref13 = Object(preact_min["h"])(
  preact_material_components_Tabs,
  { className: "demo-tabs", "icon-tab-bar": true },
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    Object(preact_min["h"])(
      Icon_Icon,
      null,
      "favorite"
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    Object(preact_min["h"])(
      Icon_Icon,
      null,
      "done"
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    Object(preact_min["h"])(
      Icon_Icon,
      null,
      "info"
    )
  )
);

var tabs__ref14 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Icons with test tabs bar "
);

var tabs__ref15 = Object(preact_min["h"])(
  preact_material_components_Tabs,
  { className: "demo-tabs", "icons-with-text": true },
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    Object(preact_min["h"])(
      Icon_Icon,
      null,
      "favorite"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.TabIconLabel,
      null,
      "Heart"
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    { active: true },
    Object(preact_min["h"])(
      Icon_Icon,
      null,
      "done"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.TabIconLabel,
      null,
      "Done"
    )
  ),
  Object(preact_min["h"])(
    preact_material_components_Tabs.Tab,
    null,
    Object(preact_min["h"])(
      Icon_Icon,
      null,
      "info"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.TabIconLabel,
      null,
      "Info"
    )
  )
);

var tabs__ref16 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Scrollable tabs "
);

var tabs__ref17 = Object(preact_min["h"])(
  preact_material_components_Tabs.TabBarScroller,
  null,
  Object(preact_min["h"])(
    preact_material_components_Tabs,
    { scroller: true },
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab1"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      { active: true },
      "tab2"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab3"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab4"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab5"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab6"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab7"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab7"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab9"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab10"
    ),
    Object(preact_min["h"])(
      preact_material_components_Tabs.Tab,
      null,
      "tab11"
    )
  )
);

var tabs_TabsPage = function (_Component) {
  tabs__inherits(TabsPage, _Component);

  function TabsPage() {
    tabs__classCallCheck(this, TabsPage);

    var _this = tabs__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Tabs",
      props: [{
        name: "indicator-accent",
        description: "Makes the indicator accented."
      }, {
        name: "icon-tab-bar",
        description: "Makes the tab bar accomodate icons."
      }, {
        name: "icons-with-text",
        description: "Makes the tab bar accomodate icons and label."
      }, {
        name: "scroller",
        description: "Makes the tabs scrollable"
      }]
    }, {
      component: "Tab",
      props: [{
        name: "active",
        description: "Makes the current tab active."
      }]
    }];
    return _this;
  }

  TabsPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      tabs__ref,
      tabs__ref2,
      tabs__ref3,
      tabs__ref4,
      tabs__ref5,
      tabs__ref6,
      tabs__ref7,
      tabs__ref8,
      tabs__ref9,
      tabs__ref10,
      tabs__ref11,
      tabs__ref12,
      tabs__ref13,
      tabs__ref14,
      tabs__ref15,
      tabs__ref16,
      tabs__ref17
    );
  };

  return TabsPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/@material/textfield/constants.js
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
var textfield_constants_strings = {
  ARIA_HIDDEN: 'aria-hidden',
  ROLE: 'role',
  INPUT_SELECTOR: '.mdc-textfield__input',
  LABEL_SELECTOR: '.mdc-textfield__label',
  ICON_SELECTOR: '.mdc-textfield__icon',
  ICON_EVENT: 'MDCTextfield:icon',
  BOTTOM_LINE_SELECTOR: '.mdc-textfield__bottom-line'
};

/** @enum {string} */
var textfield_constants_cssClasses = {
  ROOT: 'mdc-textfield',
  UPGRADED: 'mdc-textfield--upgraded',
  DISABLED: 'mdc-textfield--disabled',
  FOCUSED: 'mdc-textfield--focused',
  INVALID: 'mdc-textfield--invalid',
  HELPTEXT_PERSISTENT: 'mdc-textfield-helptext--persistent',
  HELPTEXT_VALIDATION_MSG: 'mdc-textfield-helptext--validation-msg',
  LABEL_FLOAT_ABOVE: 'mdc-textfield__label--float-above',
  LABEL_SHAKE: 'mdc-textfield__label--shake',
  BOX: 'mdc-textfield--box',
  TEXT_FIELD_ICON: 'mdc-textfield__icon',
  TEXTAREA: 'mdc-textfield--textarea',
  BOTTOM_LINE_ACTIVE: 'mdc-textfield__bottom-line--active'
};


// CONCATENATED MODULE: ../node_modules/@material/textfield/adapter.js
function textfield_adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * @typedef {{
 *   value: string,
 *   disabled: boolean,
 *   badInput: boolean,
 *   checkValidity: (function(): boolean)
 * }}
 */
var NativeInputType = void 0;

/**
 * Adapter for MDC Textfield.
 *
 * Defines the shape of the adapter expected by the foundation. Implement this
 * adapter to integrate the Textfield into your framework. See
 * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md
 * for more information.
 *
 * @record
 */

var MDCTextfieldAdapter = function () {
  function MDCTextfieldAdapter() {
    textfield_adapter__classCallCheck(this, MDCTextfieldAdapter);
  }

  /**
   * Adds a class to the root Element.
   * @param {string} className
   */
  MDCTextfieldAdapter.prototype.addClass = function addClass(className) {};

  /**
   * Removes a class from the root Element.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.removeClass = function removeClass(className) {};

  /**
   * Adds a class to the label Element. We recommend you add a conditional
   * check here, and in removeClassFromLabel for whether or not the label is
   * present so that the JS component could be used with text fields that don't
   * require a label, such as the full-width text field.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.addClassToLabel = function addClassToLabel(className) {};

  /**
   * Removes a class from the label Element.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.removeClassFromLabel = function removeClassFromLabel(className) {};

  /**
   * Sets an attribute on the icon Element.
   * @param {string} name
   * @param {string} value
   */


  MDCTextfieldAdapter.prototype.setIconAttr = function setIconAttr(name, value) {};

  /**
   * Returns true if classname exists for a given target element.
   * @param {?EventTarget} target
   * @param {string} className
   * @return {boolean}
   */


  MDCTextfieldAdapter.prototype.eventTargetHasClass = function eventTargetHasClass(target, className) {};

  /**
   * Registers an event handler on the root element for a given event.
   * @param {string} type
   * @param {function(!Event): undefined} handler
   */


  MDCTextfieldAdapter.prototype.registerTextFieldInteractionHandler = function registerTextFieldInteractionHandler(type, handler) {};

  /**
   * Deregisters an event handler on the root element for a given event.
   * @param {string} type
   * @param {function(!Event): undefined} handler
   */


  MDCTextfieldAdapter.prototype.deregisterTextFieldInteractionHandler = function deregisterTextFieldInteractionHandler(type, handler) {};

  /**
   * Emits a custom event "MDCTextfield:icon" denoting a user has clicked the icon.
   */


  MDCTextfieldAdapter.prototype.notifyIconAction = function notifyIconAction() {};

  /**
   * Adds a class to the bottom line element.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.addClassToBottomLine = function addClassToBottomLine(className) {};

  /**
   * Removes a class from the bottom line element.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.removeClassFromBottomLine = function removeClassFromBottomLine(className) {};

  /**
   * Adds a class to the help text element. Note that in our code we check for
   * whether or not we have a help text element and if we don't, we simply
   * return.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.addClassToHelptext = function addClassToHelptext(className) {};

  /**
   * Removes a class from the help text element.
   * @param {string} className
   */


  MDCTextfieldAdapter.prototype.removeClassFromHelptext = function removeClassFromHelptext(className) {};

  /**
   * Returns whether or not the help text element contains the given class.
   * @param {string} className
   * @return {boolean}
   */


  MDCTextfieldAdapter.prototype.helptextHasClass = function helptextHasClass(className) {};

  /**
   * Registers an event listener on the native input element for a given event.
   * @param {string} evtType
   * @param {function(!Event): undefined} handler
   */


  MDCTextfieldAdapter.prototype.registerInputInteractionHandler = function registerInputInteractionHandler(evtType, handler) {};

  /**
   * Deregisters an event listener on the native input element for a given event.
   * @param {string} evtType
   * @param {function(!Event): undefined} handler
   */


  MDCTextfieldAdapter.prototype.deregisterInputInteractionHandler = function deregisterInputInteractionHandler(evtType, handler) {};

  /**
   * Registers an event listener on the bottom line element for a "transitionend" event.
   * @param {function(!Event): undefined} handler
   */


  MDCTextfieldAdapter.prototype.registerTransitionEndHandler = function registerTransitionEndHandler(handler) {};

  /**
   * Deregisters an event listener on the bottom line element for a "transitionend" event.
   * @param {function(!Event): undefined} handler
   */


  MDCTextfieldAdapter.prototype.deregisterTransitionEndHandler = function deregisterTransitionEndHandler(handler) {};

  /**
   * Sets an attribute with a given value on the bottom line element.
   * @param {string} attr
   * @param {string} value
   */


  MDCTextfieldAdapter.prototype.setBottomLineAttr = function setBottomLineAttr(attr, value) {};

  /**
   * Sets an attribute with a given value on the help text element.
   * @param {string} name
   * @param {string} value
   */


  MDCTextfieldAdapter.prototype.setHelptextAttr = function setHelptextAttr(name, value) {};

  /**
   * Removes an attribute from the help text element.
   * @param {string} name
   */


  MDCTextfieldAdapter.prototype.removeHelptextAttr = function removeHelptextAttr(name) {};

  /**
   * Returns an object representing the native text input element, with a
   * similar API shape. The object returned should include the value, disabled
   * and badInput properties, as well as the checkValidity() function. We never
   * alter the value within our code, however we do update the disabled
   * property, so if you choose to duck-type the return value for this method
   * in your implementation it's important to keep this in mind. Also note that
   * this method can return null, which the foundation will handle gracefully.
   * @return {?Element|?NativeInputType}
   */


  MDCTextfieldAdapter.prototype.getNativeInput = function getNativeInput() {};

  return MDCTextfieldAdapter;
}();


// CONCATENATED MODULE: ../node_modules/@material/textfield/foundation.js
var textfield_foundation__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var textfield_foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function textfield_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function textfield_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function textfield_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * @extends {MDCFoundation<!MDCTextfieldAdapter>}
 * @final
 */

var foundation_MDCTextfieldFoundation = function (_MDCFoundation) {
  textfield_foundation__inherits(MDCTextfieldFoundation, _MDCFoundation);

  textfield_foundation__createClass(MDCTextfieldFoundation, null, [{
    key: 'cssClasses',

    /** @return enum {string} */
    get: function get() {
      return textfield_constants_cssClasses;
    }

    /** @return enum {string} */

  }, {
    key: 'strings',
    get: function get() {
      return textfield_constants_strings;
    }

    /**
     * {@see MDCTextfieldAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCTextfieldAdapter}
     */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCTextfieldAdapter} */{
          addClass: function addClass() {},
          removeClass: function removeClass() {},
          addClassToLabel: function addClassToLabel() {},
          removeClassFromLabel: function removeClassFromLabel() {},
          setIconAttr: function setIconAttr() {},
          eventTargetHasClass: function eventTargetHasClass() {},
          registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler() {},
          deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler() {},
          notifyIconAction: function notifyIconAction() {},
          addClassToBottomLine: function addClassToBottomLine() {},
          removeClassFromBottomLine: function removeClassFromBottomLine() {},
          addClassToHelptext: function addClassToHelptext() {},
          removeClassFromHelptext: function removeClassFromHelptext() {},
          helptextHasClass: function helptextHasClass() {
            return false;
          },
          registerInputInteractionHandler: function registerInputInteractionHandler() {},
          deregisterInputInteractionHandler: function deregisterInputInteractionHandler() {},
          registerTransitionEndHandler: function registerTransitionEndHandler() {},
          deregisterTransitionEndHandler: function deregisterTransitionEndHandler() {},
          setBottomLineAttr: function setBottomLineAttr() {},
          setHelptextAttr: function setHelptextAttr() {},
          removeHelptextAttr: function removeHelptextAttr() {},
          getNativeInput: function getNativeInput() {}
        }
      );
    }

    /**
     * @param {!MDCTextfieldAdapter=} adapter
     */

  }]);

  function MDCTextfieldFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /** @type {!MDCTextfieldAdapter} */{};

    textfield_foundation__classCallCheck(this, MDCTextfieldFoundation);

    /** @private {boolean} */
    var _this = textfield_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, textfield_foundation__extends(MDCTextfieldFoundation.defaultAdapter, adapter)));

    _this.isFocused_ = false;
    /** @private {boolean} */
    _this.receivedUserInput_ = false;
    /** @private {boolean} */
    _this.useCustomValidityChecking_ = false;
    /** @private {function(): undefined} */
    _this.inputFocusHandler_ = function () {
      return _this.activateFocus_();
    };
    /** @private {function(): undefined} */
    _this.inputBlurHandler_ = function () {
      return _this.deactivateFocus_();
    };
    /** @private {function(): undefined} */
    _this.inputInputHandler_ = function () {
      return _this.autoCompleteFocus_();
    };
    /** @private {function(!Event): undefined} */
    _this.setPointerXOffset_ = function (evt) {
      return _this.setBottomLineTransformOrigin_(evt);
    };
    /** @private {function(!Event): undefined} */
    _this.textFieldInteractionHandler_ = function (evt) {
      return _this.handleTextFieldInteraction_(evt);
    };
    /** @private {function(!Event): undefined} */
    _this.transitionEndHandler_ = function (evt) {
      return _this.transitionEnd_(evt);
    };
    return _this;
  }

  MDCTextfieldFoundation.prototype.init = function init() {
    var _this2 = this;

    this.adapter_.addClass(MDCTextfieldFoundation.cssClasses.UPGRADED);
    // Ensure label does not collide with any pre-filled value.
    if (this.getNativeInput_().value) {
      this.adapter_.addClassToLabel(MDCTextfieldFoundation.cssClasses.LABEL_FLOAT_ABOVE);
    }

    this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);
    this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);
    this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);
    ['mousedown', 'touchstart'].forEach(function (evtType) {
      _this2.adapter_.registerInputInteractionHandler(evtType, _this2.setPointerXOffset_);
    });
    ['click', 'keydown'].forEach(function (evtType) {
      _this2.adapter_.registerTextFieldInteractionHandler(evtType, _this2.textFieldInteractionHandler_);
    });
    this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
  };

  MDCTextfieldFoundation.prototype.destroy = function destroy() {
    var _this3 = this;

    this.adapter_.removeClass(MDCTextfieldFoundation.cssClasses.UPGRADED);
    this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);
    this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);
    this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);
    ['mousedown', 'touchstart'].forEach(function (evtType) {
      _this3.adapter_.deregisterInputInteractionHandler(evtType, _this3.setPointerXOffset_);
    });
    ['click', 'keydown'].forEach(function (evtType) {
      _this3.adapter_.deregisterTextFieldInteractionHandler(evtType, _this3.textFieldInteractionHandler_);
    });
    this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
  };

  /**
   * Handles all user interactions with the Textfield.
   * @param {!Event} evt
   * @private
   */


  MDCTextfieldFoundation.prototype.handleTextFieldInteraction_ = function handleTextFieldInteraction_(evt) {
    if (this.adapter_.getNativeInput().disabled) {
      return;
    }

    this.receivedUserInput_ = true;

    var target = evt.target,
        type = evt.type;
    var TEXT_FIELD_ICON = MDCTextfieldFoundation.cssClasses.TEXT_FIELD_ICON;

    var targetIsIcon = this.adapter_.eventTargetHasClass(target, TEXT_FIELD_ICON);
    var eventTriggersNotification = type === 'click' || evt.key === 'Enter' || evt.keyCode === 13;

    if (targetIsIcon && eventTriggersNotification) {
      this.adapter_.notifyIconAction();
    }
  };

  /**
   * Activates the text field focus state.
   * @private
   */


  MDCTextfieldFoundation.prototype.activateFocus_ = function activateFocus_() {
    var _MDCTextfieldFoundati = MDCTextfieldFoundation.cssClasses,
        BOTTOM_LINE_ACTIVE = _MDCTextfieldFoundati.BOTTOM_LINE_ACTIVE,
        FOCUSED = _MDCTextfieldFoundati.FOCUSED,
        LABEL_FLOAT_ABOVE = _MDCTextfieldFoundati.LABEL_FLOAT_ABOVE,
        LABEL_SHAKE = _MDCTextfieldFoundati.LABEL_SHAKE;

    this.adapter_.addClass(FOCUSED);
    this.adapter_.addClassToBottomLine(BOTTOM_LINE_ACTIVE);
    this.adapter_.addClassToLabel(LABEL_FLOAT_ABOVE);
    this.adapter_.removeClassFromLabel(LABEL_SHAKE);
    this.showHelptext_();
    this.isFocused_ = true;
  };

  /**
   * Sets the transform-origin of the bottom line, causing it to animate out
   * from the user's click location.
   * @param {!Event} evt
   * @private
   */


  MDCTextfieldFoundation.prototype.setBottomLineTransformOrigin_ = function setBottomLineTransformOrigin_(evt) {
    var targetClientRect = evt.target.getBoundingClientRect();
    var evtCoords = { x: evt.clientX, y: evt.clientY };
    var normalizedX = evtCoords.x - targetClientRect.left;
    var attributeString = 'transform-origin: ' + normalizedX + 'px center';

    this.adapter_.setBottomLineAttr('style', attributeString);
  };

  /**
   * Activates the Textfield's focus state in cases when the input value
   * changes without user input (e.g. programatically).
   * @private
   */


  MDCTextfieldFoundation.prototype.autoCompleteFocus_ = function autoCompleteFocus_() {
    if (!this.receivedUserInput_) {
      this.activateFocus_();
    }
  };

  /**
   * Makes the help text visible to screen readers.
   * @private
   */


  MDCTextfieldFoundation.prototype.showHelptext_ = function showHelptext_() {
    var ARIA_HIDDEN = MDCTextfieldFoundation.strings.ARIA_HIDDEN;

    this.adapter_.removeHelptextAttr(ARIA_HIDDEN);
  };

  /**
   * Fires when animation transition ends, performing actions that must wait
   * for animations to finish.
   * @param {!Event} evt
   * @private
   */


  MDCTextfieldFoundation.prototype.transitionEnd_ = function transitionEnd_(evt) {
    var BOTTOM_LINE_ACTIVE = MDCTextfieldFoundation.cssClasses.BOTTOM_LINE_ACTIVE;

    // We need to wait for the bottom line to be entirely transparent
    // before removing the class. If we do not, we see the line start to
    // scale down before disappearing

    if (evt.propertyName === 'opacity' && !this.isFocused_) {
      this.adapter_.removeClassFromBottomLine(BOTTOM_LINE_ACTIVE);
    }
  };

  /**
   * Deactives the Textfield's focus state.
   * @private
   */


  MDCTextfieldFoundation.prototype.deactivateFocus_ = function deactivateFocus_() {
    var _MDCTextfieldFoundati2 = MDCTextfieldFoundation.cssClasses,
        FOCUSED = _MDCTextfieldFoundati2.FOCUSED,
        LABEL_FLOAT_ABOVE = _MDCTextfieldFoundati2.LABEL_FLOAT_ABOVE,
        LABEL_SHAKE = _MDCTextfieldFoundati2.LABEL_SHAKE;

    var input = this.getNativeInput_();

    this.isFocused_ = false;
    this.adapter_.removeClass(FOCUSED);
    this.adapter_.removeClassFromLabel(LABEL_SHAKE);

    if (!input.value && !this.isBadInput_()) {
      this.adapter_.removeClassFromLabel(LABEL_FLOAT_ABOVE);
      this.receivedUserInput_ = false;
    }

    if (!this.useCustomValidityChecking_) {
      this.changeValidity_(input.checkValidity());
    }
  };

  /**
   * Updates the Textfield's valid state based on the supplied validity.
   * @param {boolean} isValid
   * @private
   */


  MDCTextfieldFoundation.prototype.changeValidity_ = function changeValidity_(isValid) {
    var _MDCTextfieldFoundati3 = MDCTextfieldFoundation.cssClasses,
        INVALID = _MDCTextfieldFoundati3.INVALID,
        LABEL_SHAKE = _MDCTextfieldFoundati3.LABEL_SHAKE;

    if (isValid) {
      this.adapter_.removeClass(INVALID);
    } else {
      this.adapter_.addClassToLabel(LABEL_SHAKE);
      this.adapter_.addClass(INVALID);
    }
    this.updateHelptext_(isValid);
  };

  /**
   * Updates the state of the Textfield's help text based on validity and
   * the Textfield's options.
   * @param {boolean} isValid
   */


  MDCTextfieldFoundation.prototype.updateHelptext_ = function updateHelptext_(isValid) {
    var _MDCTextfieldFoundati4 = MDCTextfieldFoundation.cssClasses,
        HELPTEXT_PERSISTENT = _MDCTextfieldFoundati4.HELPTEXT_PERSISTENT,
        HELPTEXT_VALIDATION_MSG = _MDCTextfieldFoundati4.HELPTEXT_VALIDATION_MSG;
    var ROLE = MDCTextfieldFoundation.strings.ROLE;

    var helptextIsPersistent = this.adapter_.helptextHasClass(HELPTEXT_PERSISTENT);
    var helptextIsValidationMsg = this.adapter_.helptextHasClass(HELPTEXT_VALIDATION_MSG);
    var validationMsgNeedsDisplay = helptextIsValidationMsg && !isValid;

    if (validationMsgNeedsDisplay) {
      this.adapter_.setHelptextAttr(ROLE, 'alert');
    } else {
      this.adapter_.removeHelptextAttr(ROLE);
    }

    if (helptextIsPersistent || validationMsgNeedsDisplay) {
      return;
    }
    this.hideHelptext_();
  };

  /**
   * Hides the help text from screen readers.
   * @private
   */


  MDCTextfieldFoundation.prototype.hideHelptext_ = function hideHelptext_() {
    var ARIA_HIDDEN = MDCTextfieldFoundation.strings.ARIA_HIDDEN;

    this.adapter_.setHelptextAttr(ARIA_HIDDEN, 'true');
  };

  /**
   * @return {boolean} True if the Textfield input fails validity checks.
   * @private
   */


  MDCTextfieldFoundation.prototype.isBadInput_ = function isBadInput_() {
    var input = this.getNativeInput_();
    return input.validity ? input.validity.badInput : input.badInput;
  };

  /**
   * @return {boolean} True if the Textfield is disabled.
   */


  MDCTextfieldFoundation.prototype.isDisabled = function isDisabled() {
    return this.getNativeInput_().disabled;
  };

  /**
   * @param {boolean} disabled Sets the textfield disabled or enabled.
   */


  MDCTextfieldFoundation.prototype.setDisabled = function setDisabled(disabled) {
    var DISABLED = MDCTextfieldFoundation.cssClasses.DISABLED;

    this.getNativeInput_().disabled = disabled;
    if (disabled) {
      this.adapter_.addClass(DISABLED);
      this.adapter_.setIconAttr('tabindex', '-1');
    } else {
      this.adapter_.removeClass(DISABLED);
      this.adapter_.setIconAttr('tabindex', '0');
    }
  };

  /**
   * @return {!Element|!NativeInputType} The native text input from the
   * host environment, or a dummy if none exists.
   * @private
   */


  MDCTextfieldFoundation.prototype.getNativeInput_ = function getNativeInput_() {
    return this.adapter_.getNativeInput() ||
    /** @type {!NativeInputType} */{
      checkValidity: function checkValidity() {
        return true;
      },
      value: '',
      disabled: false,
      badInput: false
    };
  };

  /**
   * @param {boolean} isValid Sets the validity state of the Textfield.
   */


  MDCTextfieldFoundation.prototype.setValid = function setValid(isValid) {
    this.useCustomValidityChecking_ = true;
    this.changeValidity_(isValid);
  };

  return MDCTextfieldFoundation;
}(base_foundation);

/* harmony default export */ var textfield_foundation = (foundation_MDCTextfieldFoundation);
// CONCATENATED MODULE: ../node_modules/@material/textfield/index.js
var textfield__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var textfield__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function textfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function textfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function textfield__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */








/**
 * @extends {MDCComponent<!MDCTextfieldFoundation>}
 * @final
 */

var textfield_MDCTextfield = function (_MDCComponent) {
  textfield__inherits(MDCTextfield, _MDCComponent);

  /**
   * @param {...?} args
   */
  function MDCTextfield() {
    textfield__classCallCheck(this, MDCTextfield);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {?Element} */
    var _this = textfield__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.input_;
    /** @private {?Element} */
    _this.label_;
    /** @type {?Element} */
    _this.helptextElement;
    /** @type {?MDCRipple} */
    _this.ripple;
    /** @private {?Element} */
    _this.bottomLine_;
    /** @private {?Element} */
    _this.icon_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @return {!MDCTextfield}
   */


  MDCTextfield.attachTo = function attachTo(root) {
    return new MDCTextfield(root);
  };

  /**
   * @param {(function(!Element): !MDCRipple)=} rippleFactory A function which
   * creates a new MDCRipple.
   */


  MDCTextfield.prototype.initialize = function initialize() {
    var rippleFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {
      return new ripple_MDCRipple(el);
    };

    this.input_ = this.root_.querySelector(textfield_constants_strings.INPUT_SELECTOR);
    this.label_ = this.root_.querySelector(textfield_constants_strings.LABEL_SELECTOR);
    this.helptextElement = null;
    this.ripple = null;
    if (this.input_.hasAttribute('aria-controls')) {
      this.helptextElement = document.getElementById(this.input_.getAttribute('aria-controls'));
    }
    if (this.root_.classList.contains(textfield_constants_cssClasses.BOX)) {
      this.ripple = rippleFactory(this.root_);
    };
    if (!this.root_.classList.contains(textfield_constants_cssClasses.TEXTAREA)) {
      this.bottomLine_ = this.root_.querySelector(textfield_constants_strings.BOTTOM_LINE_SELECTOR);
    };
    if (!this.root_.classList.contains(textfield_constants_cssClasses.TEXT_FIELD_ICON)) {
      this.icon_ = this.root_.querySelector(textfield_constants_strings.ICON_SELECTOR);
    };
  };

  MDCTextfield.prototype.destroy = function destroy() {
    if (this.ripple) {
      this.ripple.destroy();
    }
    _MDCComponent.prototype.destroy.call(this);
  };

  /**
   * Initiliazes the Textfield's internal state based on the environment's
   * state.
   */


  MDCTextfield.prototype.initialSyncWithDom = function initialSyncWithDom() {
    this.disabled = this.input_.disabled;
  };

  /**
   * @return {boolean} True if the Textfield is disabled.
   */


  /**
   * @return {!MDCTextfieldFoundation}
   */
  MDCTextfield.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new textfield_foundation( /** @type {!MDCTextfieldAdapter} */textfield__extends({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      addClassToLabel: function addClassToLabel(className) {
        var label = _this2.label_;
        if (label) {
          label.classList.add(className);
        }
      },
      removeClassFromLabel: function removeClassFromLabel(className) {
        var label = _this2.label_;
        if (label) {
          label.classList.remove(className);
        }
      },
      eventTargetHasClass: function eventTargetHasClass(target, className) {
        return target.classList.contains(className);
      },
      registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler(evtType, handler) {
        return _this2.root_.addEventListener(evtType, handler);
      },
      deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler(evtType, handler) {
        return _this2.root_.removeEventListener(evtType, handler);
      },
      notifyIconAction: function notifyIconAction() {
        return _this2.emit(textfield_foundation.strings.ICON_EVENT, {});
      }
    }, this.getInputAdapterMethods_(), this.getHelptextAdapterMethods_(), this.getBottomLineAdapterMethods_(), this.getIconAdapterMethods_()));
  };

  /**
   * @return {!{
   *   setIconAttr: function(string, string): undefined,
   * }}
   */


  MDCTextfield.prototype.getIconAdapterMethods_ = function getIconAdapterMethods_() {
    var _this3 = this;

    return {
      setIconAttr: function setIconAttr(name, value) {
        if (_this3.icon_) {
          _this3.icon_.setAttribute(name, value);
        }
      }
    };
  };

  /**
   * @return {!{
   *   addClassToBottomLine: function(string): undefined,
   *   removeClassFromBottomLine: function(string): undefined,
   *   setBottomLineAttr: function(string, string): undefined,
   *   registerTransitionEndHandler: function(function()): undefined,
   *   deregisterTransitionEndHandler: function(function()): undefined,
   * }}
   */


  MDCTextfield.prototype.getBottomLineAdapterMethods_ = function getBottomLineAdapterMethods_() {
    var _this4 = this;

    return {
      addClassToBottomLine: function addClassToBottomLine(className) {
        if (_this4.bottomLine_) {
          _this4.bottomLine_.classList.add(className);
        }
      },
      removeClassFromBottomLine: function removeClassFromBottomLine(className) {
        if (_this4.bottomLine_) {
          _this4.bottomLine_.classList.remove(className);
        }
      },
      setBottomLineAttr: function setBottomLineAttr(attr, value) {
        if (_this4.bottomLine_) {
          _this4.bottomLine_.setAttribute(attr, value);
        }
      },
      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
        if (_this4.bottomLine_) {
          _this4.bottomLine_.addEventListener('transitionend', handler);
        }
      },
      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
        if (_this4.bottomLine_) {
          _this4.bottomLine_.removeEventListener('transitionend', handler);
        }
      }
    };
  };

  /**
   * @return {!{
   *   registerInputInteractionHandler: function(string, function()): undefined,
   *   deregisterInputInteractionHandler: function(string, function()): undefined,
   *   getNativeInput: function(): ?Element,
   * }}
   */


  MDCTextfield.prototype.getInputAdapterMethods_ = function getInputAdapterMethods_() {
    var _this5 = this;

    return {
      registerInputInteractionHandler: function registerInputInteractionHandler(evtType, handler) {
        return _this5.input_.addEventListener(evtType, handler);
      },
      deregisterInputInteractionHandler: function deregisterInputInteractionHandler(evtType, handler) {
        return _this5.input_.removeEventListener(evtType, handler);
      },
      getNativeInput: function getNativeInput() {
        return _this5.input_;
      }
    };
  };

  /**
   * @return {!{
   *   addClassToHelptext: function(string): undefined,
   *   removeClassFromHelptext: function(string): undefined,
   *   helptextHasClass: function(string): boolean,
   *   setHelptextAttr: function(string, string): undefined,
   *   removeHelptextAttr: function(string): undefined,
   * }}
   */


  MDCTextfield.prototype.getHelptextAdapterMethods_ = function getHelptextAdapterMethods_() {
    var _this6 = this;

    return {
      addClassToHelptext: function addClassToHelptext(className) {
        if (_this6.helptextElement) {
          _this6.helptextElement.classList.add(className);
        }
      },
      removeClassFromHelptext: function removeClassFromHelptext(className) {
        if (_this6.helptextElement) {
          _this6.helptextElement.classList.remove(className);
        }
      },
      helptextHasClass: function helptextHasClass(className) {
        if (!_this6.helptextElement) {
          return false;
        }
        return _this6.helptextElement.classList.contains(className);
      },
      setHelptextAttr: function setHelptextAttr(name, value) {
        if (_this6.helptextElement) {
          _this6.helptextElement.setAttribute(name, value);
        }
      },
      removeHelptextAttr: function removeHelptextAttr(name) {
        if (_this6.helptextElement) {
          _this6.helptextElement.removeAttribute(name);
        }
      }
    };
  };

  textfield__createClass(MDCTextfield, [{
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    }

    /**
     * @param {boolean} disabled Sets the Textfield disabled or enabled.
     */
    ,
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }

    /**
     * @param {boolean} valid Sets the Textfield valid or invalid.
     */

  }, {
    key: 'valid',
    set: function set(valid) {
      this.foundation_.setValid(valid);
    }
  }]);

  return MDCTextfield;
}(base_component);


// CONCATENATED MODULE: ../node_modules/preact-material-components/Textfield/index.js
function Textfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Textfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Textfield__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Textfield__extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function Textfield__objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}





/**
 * @prop persistent = false
 * @prop validation-msg = false
 */

var Textfield_Helptext = function (_MaterialComponent) {
  Textfield__inherits(Helptext, _MaterialComponent);

  function Helptext() {
    Textfield__classCallCheck(this, Helptext);

    var _this = Textfield__possibleConstructorReturn(this, _MaterialComponent.call(this));

    _this.componentName = "textfield-helptext";
    _this._mdcProps = ["persistent", "validation-msg"];
    return _this;
  }

  Helptext.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("p", Textfield__extends({}, props, { "aria-hidden": "true" }), props.children);
  };

  return Helptext;
}(MaterialComponent_MaterialComponent);

var Textfield_Label = function (_MaterialComponent2) {
  Textfield__inherits(Label, _MaterialComponent2);

  function Label() {
    Textfield__classCallCheck(this, Label);

    var _this2 = Textfield__possibleConstructorReturn(this, _MaterialComponent2.call(this));

    _this2.componentName = "textfield__label";
    return _this2;
  }

  Label.prototype.materialDom = function materialDom(props) {
    return Object(preact_min["h"])("label", props, props.children);
  };

  return Label;
}(MaterialComponent_MaterialComponent);

/**
 * @prop fullwidth = false
 * @prop multiline = false
 * @prop dense = false
 * @prop disabled = false
 * @prop box = false
 * @prop type = 'text'
 * @prop value = ''
 * @prop label = ''
 */


var Textfield_TextfieldInput = function (_MaterialComponent3) {
  Textfield__inherits(TextfieldInput, _MaterialComponent3);

  function TextfieldInput() {
    Textfield__classCallCheck(this, TextfieldInput);

    var _this3 = Textfield__possibleConstructorReturn(this, _MaterialComponent3.call(this));

    _this3.componentName = "textfield";
    _this3._mdcProps = ["fullwidth", "multiline", "dense", "disabled", "box"];
    _this3.state = {
      showFloatingLabel: false
    };
    return _this3;
  }

  TextfieldInput.prototype.componentDidMount = function componentDidMount() {
    var _this4 = this;

    this.setState({
      showFloatingLabel: true
    }, function () {
      _this4.MDComponent = new textfield_MDCTextfield(_this4.control);
      _this4.props.onInit && _this4.props.onInit(_this4.MDComponent);
    });
  };

  TextfieldInput.prototype.componentWillUnmount = function componentWillUnmount() {
    this.MDComponent && this.MDComponent.destroy && this.MDComponent.destroy();
  };

  TextfieldInput.prototype.materialDom = function materialDom(allprops) {
    var _this5 = this;

    var className = allprops.className,
        props = Textfield__objectWithoutProperties(allprops, ["className"]);


    if ("value" in props && this.state.showFloatingLabel) {
      className = [className, "mdc-textfield--upgraded"].join(" ");
    }

    return Object(preact_min["h"])("div", { className: className, ref: function ref(control) {
        return _this5.control = control;
      } }, props.multiline ? Object(preact_min["h"])("textarea", Textfield__extends({ className: "mdc-textfield__input" }, props)) : Object(preact_min["h"])("input", Textfield__extends({
      type: props.type || "text",
      className: "mdc-textfield__input"
    }, props)), props.label && this.state.showFloatingLabel && Object(preact_min["h"])(Textfield_Label, { "for": props.id }, props.label), props.multiline ? "" : Object(preact_min["h"])("div", { "class": "mdc-textfield__bottom-line" }));
  };

  return TextfieldInput;
}(MaterialComponent_MaterialComponent);

/**
 * @prop fullwidth = false
 * @prop multiline = false
 * @prop dense = false
 * @prop disabled = false
 * @prop box = false
 * @prop type = 'text'
 * @prop value = ''
 * @prop label = ''
 * @prop helptext = ''
 * @prop helptextPersistent = false
 * @prop helptextValidationMsg = false
 */


var Textfield_Textfield = function (_Component) {
  Textfield__inherits(Textfield, _Component);

  function Textfield() {
    Textfield__classCallCheck(this, Textfield);

    var _this6 = Textfield__possibleConstructorReturn(this, _Component.call(this));

    _this6.id = Textfield.uid();
    _this6.state = {
      showFloatingLabel: false
    };
    return _this6;
  }

  Textfield.prototype.componentDidMount = function componentDidMount() {
    this.setState({
      showFloatingLabel: true
    });
  };

  Textfield.uid = function uid() {
    if (!this.uidCounter) {
      this.uidCounter = 0;
    }
    return ++this.uidCounter;
  };

  Textfield.prototype.render = function render(allprops, _ref) {
    var _this7 = this;

    var showFloatingLabel = _ref.showFloatingLabel;

    var className = allprops.className,
        helptextPersistent = allprops.helptextPersistent,
        helptextValidationMsg = allprops.helptextValidationMsg,
        props = Textfield__objectWithoutProperties(allprops, ["className", "helptextPersistent", "helptextValidationMsg"]);

    var showDiv = props.helptext || props.label && !showFloatingLabel;

    if (showDiv && !props.id) {
      props.id = "tf-" + this.id;
    }

    // Helper text
    var helptextProps = {
      persistent: helptextPersistent,
      "validation-msg": helptextValidationMsg
    };

    return showDiv ? Object(preact_min["h"])("div", { className: className }, props.label && !showFloatingLabel && Object(preact_min["h"])("label", { "for": props.id }, props.cssLabel || props.label + ": "), Object(preact_min["h"])(Textfield_TextfieldInput, Textfield__extends({}, props, {
      onInit: function onInit(MDComponent) {
        _this7.MDComponent = MDComponent;
      },
      "aria-controls": props.helptext && props.id + "-helptext"
    })), props.helptext && Object(preact_min["h"])(Textfield_Helptext, Textfield__extends({ id: props.id + "-helptext" }, helptextProps), props.helptext)) : Object(preact_min["h"])(Textfield_TextfieldInput, Textfield__extends({}, props, {
      className: className,
      onInit: function onInit(MDComponent) {
        _this7.MDComponent = MDComponent;
      }
    }));
  };

  return Textfield;
}(preact_min["Component"]);

Textfield_Textfield.Helptext = Textfield_Helptext;

/* harmony default export */ var preact_material_components_Textfield = (Textfield_Textfield);
// EXTERNAL MODULE: ./routes/textfield/sample.txt
var textfield_sample = __webpack_require__("IsP3");
var textfield_sample_default = /*#__PURE__*/__webpack_require__.n(textfield_sample);

// CONCATENATED MODULE: ./routes/textfield/index.js


function routes_textfield__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_textfield__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_textfield__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Samples


// Class

var textfield__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var textfield__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    textfield_sample_default.a
  )
);

var textfield__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var textfield__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-textfield"
  ),
  ". You can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield" },
    " ",
    "here"
  ),
  "."
);

var textfield__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo"
);

var textfield__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "Default"
);

var textfield__ref7 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "Multiline"
);

var textfield__ref8 = Object(preact_min["h"])(preact_material_components_Textfield, { multiline: true, label: "Textarea tag" });

var textfield__ref9 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "Password"
);

var textfield__ref10 = Object(preact_min["h"])(preact_material_components_Textfield, { type: "password", label: "Enter a password" });

var textfield__ref11 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "With help text"
);

var textfield__ref12 = Object(preact_min["h"])(preact_material_components_Textfield, { label: "Help text", helptext: "This is the helptext" });

var textfield__ref13 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "With persistent help text"
);

var textfield__ref14 = Object(preact_min["h"])(preact_material_components_Textfield, {
  label: "Persistent help text",
  helptext: "This is the helptext",
  helptextPersistent: true
});

var textfield__ref15 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "Dense"
);

var textfield__ref16 = Object(preact_min["h"])(preact_material_components_Textfield, { label: "Dense", dense: true });

var textfield__ref17 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "Disabled"
);

var _ref18 = Object(preact_min["h"])(preact_material_components_Textfield, { label: "Disabled", disabled: true });

var _ref19 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--headline" },
  "Link state"
);

var textfield_TextfieldPage = function (_Component) {
  routes_textfield__inherits(TextfieldPage, _Component);

  function TextfieldPage() {
    routes_textfield__classCallCheck(this, TextfieldPage);

    var _this = routes_textfield__possibleConstructorReturn(this, _Component.call(this));

    _this.state = {
      value: ""
    };
    _this.propsTable = [{
      component: "Textfield",
      props: [{
        name: "fullwidth",
        description: "Makes the textfield full width."
      }, {
        name: "multiline",
        description: "Toggles between TextArea and TextField."
      }, {
        name: "type",
        description: "Type of HTML textfield (defaults to 'text')",
        value: "text, password, date, time, etc."
      }, {
        name: "dense",
        description: "Use a dense font"
      }, {
        name: "disabled",
        description: "Disables the input"
      }, {
        name: "helptext",
        description: "Include an help text that is useful for providing supplemental information to users, as well for validation messages"
      }, {
        name: "helptextPersistent",
        description: "Makes the help text always visible"
      }, {
        name: "helptextValidationMsg",
        description: "Provide styles for using the help text as a validation message"
      }]
    }];
    return _this;
  }

  TextfieldPage.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      null,
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      textfield__ref,
      textfield__ref2,
      textfield__ref3,
      textfield__ref4,
      textfield__ref5,
      textfield__ref6,
      Object(preact_min["h"])(preact_material_components_Textfield, {
        label: "Your name",
        onKeyUp: function onKeyUp(e) {
          _this2.setState({
            name: e.target.value
          });
        }
      }),
      " ",
      "Hi - ",
      this.state.name,
      textfield__ref7,
      textfield__ref8,
      textfield__ref9,
      textfield__ref10,
      textfield__ref11,
      textfield__ref12,
      textfield__ref13,
      textfield__ref14,
      textfield__ref15,
      textfield__ref16,
      textfield__ref17,
      _ref18,
      _ref19,
      Object(preact_min["h"])(preact_material_components_Textfield, {
        label: "State",
        value: this.state.value,
        onInput: function onInput(e) {
          return _this2.setState({ value: e.target.value });
        }
      }),
      "State: ",
      this.state.value
    );
  };

  return TextfieldPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/theme/style.scss
var theme_style = __webpack_require__("XxRI");
var theme_style_default = /*#__PURE__*/__webpack_require__.n(theme_style);

// CONCATENATED MODULE: ./routes/theme/index.js


function theme__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function theme__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function theme__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components



// Styles


// Class

var theme__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var theme__ref2 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "preact-material-components brings",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-theme"
  ),
  " as is, you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-theme" },
    " ",
    "here"
  ),
  "."
);

var theme__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Changing colors"
);

var theme__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "With preact-material-components you can either choose to use the bundled ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    ".css "
  ),
  "files or the ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    ".scss"
  ),
  " files. Both have their different ways to handle theming.",
  Object(preact_min["h"])(
    "div",
    null,
    "With the css files you can either override the colors and backgrounds with a more specificity css rule or you can alter the css variables defined on the",
    Object(preact_min["h"])(
      "a",
      { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-theme#css-custom-properties" },
      "\xA0original documentation page."
    )
  ),
  Object(preact_min["h"])(
    "div",
    null,
    "Whereas with the scss files you can directly go an while importing the scss of the individual components, you can declare your scss variabled as shown",
    Object(preact_min["h"])(
      "a",
      { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-theme#sass-mixins-variables-and-functions" },
      "\xA0here."
    )
  )
);

var theme__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var theme__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Unstyled "
);

var theme__ref7 = Object(preact_min["h"])(
  preact_material_components_Button,
  { ripple: true, raised: true },
  "Flat button with ripple"
);

var theme__ref8 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Overridden with css property"
);

var theme__ref9 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Overridden with css variable"
);

var theme__ref10 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Theme colors as Text "
);

var theme__ref11 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Theme colors as Background",
  " "
);

var theme_ThemePage = function (_Component) {
  theme__inherits(ThemePage, _Component);

  function ThemePage() {
    theme__classCallCheck(this, ThemePage);

    return theme__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  ThemePage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: theme_style_default.a["page-theme"] },
      theme__ref,
      theme__ref2,
      theme__ref3,
      theme__ref4,
      theme__ref5,
      theme__ref6,
      theme__ref7,
      theme__ref8,
      Object(preact_min["h"])(
        preact_material_components_Button,
        { ripple: true, raised: true, className: theme_style_default.a["css-prop-override"] },
        "Flat button with ripple"
      ),
      theme__ref9,
      Object(preact_min["h"])(
        preact_material_components_Button,
        { ripple: true, raised: true, className: theme_style_default.a["css-var-override"] },
        "Flat button with ripple"
      ),
      theme__ref10,
      Object(preact_min["h"])(
        "div",
        { className: theme_style_default.a.parentbox },
        Object(preact_min["h"])(
          "div",
          { className: theme_style_default.a.box },
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--primary"
            },
            "Primary"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--primary-light"
            },
            "Primary Light"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--primary-dark"
            },
            "Primary Dark"
          )
        ),
        Object(preact_min["h"])(
          "div",
          { className: theme_style_default.a.box },
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--secondary"
            },
            "Secondary"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--secondary-light"
            },
            "Secondary Light"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--secondary-dark"
            },
            "Secondary Dark"
          )
        )
      ),
      theme__ref11,
      Object(preact_min["h"])(
        "div",
        { className: theme_style_default.a.parentbox },
        Object(preact_min["h"])(
          "div",
          { className: theme_style_default.a.box },
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-primary mdc-theme--primary-bg"
            },
            "Primary"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-primary mdc-theme--primary-light-bg"
            },
            "Primary Light"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-primary mdc-theme--primary-dark-bg"
            },
            "Primary Dark"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-background mdc-theme--background"
            },
            "Background"
          )
        ),
        Object(preact_min["h"])(
          "div",
          { className: theme_style_default.a.box },
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-secondary mdc-theme--secondary-bg"
            },
            "Secondary"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-secondary mdc-theme--secondary-light-bg"
            },
            "Secondary Light"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-secondary mdc-theme--secondary-dark-bg"
            },
            "Secondary Dark"
          ),
          Object(preact_min["h"])(
            "div",
            {
              className: theme_style_default.a.cell + " mdc-typography--body mdc-theme--text-primary-on-background mdc-theme--background"
            },
            "\xA0"
          )
        )
      )
    );
  };

  return ThemePage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/toolbar/style.scss
var toolbar_style = __webpack_require__("LQ60");
var toolbar_style_default = /*#__PURE__*/__webpack_require__.n(toolbar_style);

// EXTERNAL MODULE: ./routes/toolbar/sample.txt
var toolbar_sample = __webpack_require__("Fj5d");
var toolbar_sample_default = /*#__PURE__*/__webpack_require__.n(toolbar_sample);

// CONCATENATED MODULE: ./routes/toolbar/index.js


function routes_toolbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function routes_toolbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function routes_toolbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies


// Material Components


// Components




// Styles


// Samples


// Class

var toolbar__ref = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Sample code "
);

var toolbar__ref2 = Object(preact_min["h"])(
  code_block,
  null,
  Object(preact_min["h"])(
    "code",
    { "class": "lang-js" },
    toolbar_sample_default.a
  )
);

var toolbar__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Original documentation"
);

var toolbar__ref4 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--body" },
  "This component encapsulates",
  " ",
  Object(preact_min["h"])(
    "span",
    { className: "strong" },
    "mdc-toolbar"
  ),
  ", you can refer to its documentation",
  Object(preact_min["h"])(
    "a",
    { href: "https://github.com/material-components/material-components-web/tree/master/packages/mdc-toolbar" },
    " ",
    "here"
  ),
  "."
);

var toolbar__ref5 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display1" },
  "Demo "
);

var toolbar__ref6 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--title" },
  "Default "
);

var toolbar__ref7 = Object(preact_min["h"])(
  preact_material_components_Toolbar,
  { className: "toolbar" },
  Object(preact_min["h"])(
    preact_material_components_Toolbar.Row,
    null,
    Object(preact_min["h"])(
      preact_material_components_Toolbar.Section,
      { "align-start": true },
      Object(preact_min["h"])(
        preact_material_components_Toolbar.Icon,
        { menu: true },
        "menu"
      ),
      Object(preact_min["h"])(
        preact_material_components_Toolbar.Title,
        null,
        "My App"
      )
    ),
    Object(preact_min["h"])(
      preact_material_components_Toolbar.Section,
      { "align-end": true },
      Object(preact_min["h"])(
        preact_material_components_Toolbar.Icon,
        null,
        "more_vert"
      )
    )
  )
);

var toolbar_ToolbarPage = function (_Component) {
  routes_toolbar__inherits(ToolbarPage, _Component);

  function ToolbarPage() {
    routes_toolbar__classCallCheck(this, ToolbarPage);

    var _this = routes_toolbar__possibleConstructorReturn(this, _Component.call(this));

    _this.propsTable = [{
      component: "Toolbar",
      props: [{
        name: "fixed",
        description: "Makes toolbar fixed on top and have persistent elevation"
      }, {
        name: "fixed-lastrow-only",
        description: "Makes only last row of fixed toolbar anchored on top"
      }, {
        name: "waterfall",
        description: "Removes fixed toolbar persistent elevation and makes it to gain elevation when a user begins to scroll down the page"
      }, {
        name: "flexible",
        description: "Makes toolbar first row has flexible space"
      }, {
        name: "flexible-default-behavior",
        description: "Further defines the background and title movement behavior"
      }]
    }, {
      component: "Toolbar.Row",
      props: []
    }, {
      component: "Toolbar.Section",
      props: [{
        name: "align-start",
        description: "Aligns the section to start of the toolbar row"
      }, {
        name: "align-end",
        description: "Aligns the section to end of the toolbar row"
      }, {
        name: "shrink-to-fit",
        description: "Makes section takes the width of its content"
      }]
    }, {
      component: "Toolbar.Icon",
      props: [{
        name: "menu",
        description: "Adds additional padding, intended for the left-most icon"
      }]
    }, {
      component: "Toolbar.Title",
      props: []
    }];
    _this.eventsTable = [{
      name: "onChange",
      description: "Fired when toolbar's expansion ratio is changed."
    }];
    return _this;
  }

  ToolbarPage.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { className: "page-toolbar" },
      Object(preact_min["h"])(component_table_ComponentTable, { data: this.propsTable }),
      Object(preact_min["h"])(events_table_EventsTable, { data: this.eventsTable }),
      toolbar__ref,
      toolbar__ref2,
      toolbar__ref3,
      toolbar__ref4,
      toolbar__ref5,
      toolbar__ref6,
      toolbar__ref7
    );
  };

  return ToolbarPage;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./components/menu/index.js


function components_menu__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function components_menu__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function components_menu__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies



// Material Components



// Class

var components_menu__ref2 = Object(preact_min["h"])(
  preact_material_components_Drawer.TemporaryDrawerHeader,
  { className: "mdc-theme--primary-bg" },
  "Components"
);

var menu_Menu = function (_Component) {
  components_menu__inherits(Menu, _Component);

  function Menu() {
    components_menu__classCallCheck(this, Menu);

    var _this = components_menu__possibleConstructorReturn(this, _Component.call(this));

    _this._onClick = _this._onClick.bind(_this);
    return _this;
  }

  Menu.prototype._routeFromLink = function _routeFromLink(node) {
    // only valid elements
    if (!node || !node.getAttribute) return;

    var href = node.getAttribute("href"),
        target = node.getAttribute("target");

    // ignore links with targets and non-path URLs
    if (!href || !href.match(/^\//g) || target && !target.match(/^_?self$/i)) return;

    // attempt to route, if no match simply cede control to browser
    return route(href);
  };

  Menu.prototype._handleLinkClick = function _handleLinkClick(e) {
    // eslint-disable-next-line eqeqeq
    if (e.button == 0) {
      this._routeFromLink(e.currentTarget || e.target || this);
      return this._prevent(e);
    }
  };

  Menu.prototype._prevent = function _prevent(e) {
    if (e) {
      if (e.stopImmediatePropagation) e.stopImmediatePropagation();
      if (e.stopPropagation) e.stopPropagation();
      e.preventDefault();
    }
    return false;
  };

  Menu.prototype._onClick = function _onClick(e) {
    this.close();
    this._handleLinkClick(e);
  };

  Menu.prototype.close = function close() {
    this.drawer.MDComponent.open = false;
  };

  Menu.prototype.open = function open() {
    this.drawer.MDComponent.open = true;
  };

  Menu.prototype.render = function render(_ref) {
    var _this2 = this;

    var items = _ref.items;

    return Object(preact_min["h"])(
      preact_material_components_Drawer.TemporaryDrawer,
      { ref: function ref(drawer) {
          return _this2.drawer = drawer;
        } },
      components_menu__ref2,
      Object(preact_min["h"])(
        preact_material_components_Drawer.TemporaryDrawerContent,
        null,
        items.map(function (_ref3) {
          var icon = _ref3.icon,
              link = _ref3.link,
              text = _ref3.text;
          return Object(preact_min["h"])(
            preact_material_components_Drawer.DrawerItem,
            { href: link, onClick: _this2._onClick },
            Object(preact_min["h"])(
              preact_material_components_List.ItemIcon,
              null,
              icon || "code"
            ),
            text
          );
        })
      )
    );
  };

  return Menu;
}(preact_min["Component"]);


// EXTERNAL MODULE: ../node_modules/preact-material-components/style.css
var preact_material_components_style = __webpack_require__("3IxH");
var preact_material_components_style_default = /*#__PURE__*/__webpack_require__.n(preact_material_components_style);

// EXTERNAL MODULE: ./components/app/style.scss
var app_style = __webpack_require__("gT5u");
var app_style_default = /*#__PURE__*/__webpack_require__.n(app_style);

// CONCATENATED MODULE: ./components/app/index.js


function app__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function app__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function app__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Dependencies



// Material Components





// Routes


























// Components


// Styles



// Class

var app__ref = Object(preact_min["h"])("link", {
  rel: "stylesheet",
  href: "https://fonts.googleapis.com/icon?family=Material+Icons"
});

var app__ref2 = Object(preact_min["h"])(
  "svg",
  {
    width: "200",
    height: "200",
    xmlns: "http://www.w3.org/2000/svg",
    preserveAspectRatio: "xMinYMid"
  },
  Object(preact_min["h"])(
    "g",
    null,
    Object(preact_min["h"])(
      "title",
      null,
      "background"
    ),
    Object(preact_min["h"])("rect", {
      fill: "none",
      id: "canvas_background",
      height: "202",
      width: "202",
      y: "-1",
      x: "-1"
    })
  ),
  Object(preact_min["h"])(
    "g",
    null,
    Object(preact_min["h"])(
      "title",
      null,
      "Layer 1"
    ),
    Object(preact_min["h"])("path", {
      stroke: "#673ab8",
      id: "svg_19",
      fill: "#673ab8",
      d: "m100,6.87844l83.36915,46.56078l0,93.12156l-83.36915,46.56078l-83.36914,-46.56078l0,-93.12156l83.36914,-46.56078z"
    }),
    Object(preact_min["h"])(
      "g",
      { id: "svg_34" },
      Object(preact_min["h"])(
        "g",
        { stroke: "null", id: "svg_5" },
        Object(preact_min["h"])("circle", {
          stroke: "null",
          id: "svg_1",
          r: "56.999668",
          cy: "99.999997",
          cx: "99.333339",
          "class": "st0"
        }),
        Object(preact_min["h"])("path", {
          stroke: "null",
          id: "svg_2",
          d: "m59.433574,60.100231l79.799535,0l0,79.799535l-79.799535,0l0,-79.799535z",
          "class": "st1"
        }),
        Object(preact_min["h"])("path", {
          stroke: "null",
          id: "svg_3",
          d: "m139.233109,60.100231l-39.899768,79.799535l-39.899768,-79.799535l79.799535,0z",
          "class": "st2"
        }),
        Object(preact_min["h"])("path", {
          stroke: "null",
          id: "svg_4",
          d: "m42.333671,43.000329l113.999336,0l0,113.999336l-113.999336,0l0,-113.999336z",
          "class": "st3"
        })
      ),
      Object(preact_min["h"])("ellipse", {
        ry: "1.999985",
        rx: "1.999985",
        id: "svg_25",
        cy: "93.333385",
        cx: "99.333336",
        "stroke-width": "null",
        stroke: "null",
        fill: "#673ab8"
      })
    ),
    Object(preact_min["h"])(
      "g",
      { stroke: "null", id: "svg_36" },
      Object(preact_min["h"])("ellipse", {
        stroke: "#673ab8",
        transform: "matrix(0.17321515449627276,0.17321515449627273,-0.17321515449627273,0.17321515449627276,63.46362017579341,27.139604895916065) ",
        ry: "20.957719",
        rx: "75.190925",
        id: "svg_32",
        cy: "89.457308",
        cx: "296.539126",
        "fill-opacity": "null",
        "stroke-width": "5",
        fill: "none"
      }),
      Object(preact_min["h"])("ellipse", {
        stroke: "#673ab8",
        transform: "matrix(0.17321515449627276,-0.17321515449627273,0.17321515449627273,0.17321515449627276,28.182048694186207,62.16614021567621) ",
        ry: "20.957719",
        rx: "75.190925",
        id: "svg_35",
        cy: "297.275314",
        cx: "113.492909",
        "fill-opacity": "null",
        "stroke-width": "5",
        fill: "none"
      })
    )
  )
);

var app__ref3 = Object(preact_min["h"])(
  "div",
  { className: "mdc-typography--display2 name" },
  "preact-material-components"
);

var app__ref5 = Object(preact_min["h"])(home_FormFieldPage, { "default": true });

var app_Home = function (_Component) {
  app__inherits(Home, _Component);

  function Home() {
    app__classCallCheck(this, Home);

    var _this = app__possibleConstructorReturn(this, _Component.call(this));

    _this.state = {
      darkMode: false
    };
    _this.menuItems = [{
      text: "Home",
      icon: "home",
      link: "/",
      component: home_FormFieldPage
    }, {
      text: "Button",
      link: "/component/button",
      component: button_ButtonPage
    }, {
      text: "Card",
      link: "/component/card",
      component: card_CardPage
    }, {
      text: "Checkbox",
      link: "/component/checkbox",
      component: checkbox_CheckboxPage
    }, {
      text: "Dialog",
      link: "/component/dialog",
      component: dialog_DialogPage
    }, {
      text: "Drawer",
      link: "/component/drawer",
      component: drawer_DrawerPage
    }, {
      text: "Elevation",
      link: "/component/elevation",
      component: elevation_ElevationPage
    }, {
      text: "Fab",
      link: "/component/fab",
      component: fab_FabPage
    }, {
      text: "Formfield",
      link: "/component/form-field",
      component: form_field_FormFieldPage
    }, {
      text: "GridList",
      link: "/component/grid-list",
      component: grid_list_GridListPage
    }, {
      text: "Icon",
      link: "/component/icon",
      component: icon_IconPage
    }, {
      text: "IconToggle",
      link: "/component/icon-toggle",
      component: icon_toggle_IconTogglePage
    }, {
      text: "LayoutGrid",
      link: "/component/layout-grid",
      component: layout_grid_LayoutGridPage
    }, {
      text: "LinearProgress",
      link: "/component/linear-progress",
      component: linear_progress_LinearProgressPage
    }, {
      text: "List",
      link: "/component/list",
      component: list_ListPage
    }, {
      text: "Menu",
      link: "/component/menu",
      component: menu_MenuPage
    }, {
      text: "Radio",
      link: "/component/radio",
      component: radio_RadioPage
    }, {
      text: "Select",
      link: "/component/select",
      component: select_SelectPage
    }, {
      text: "Slider",
      link: "/component/slider",
      component: slider_SliderPage
    }, {
      text: "Snackbar",
      link: "/component/snackbar",
      component: snackbar_SnackbarPage
    }, {
      text: "Switch",
      link: "/component/switch",
      component: switch_SwitchPage
    }, {
      text: "Tabs",
      link: "/component/tabs",
      component: tabs_TabsPage
    }, {
      text: "Textfield",
      link: "/component/textfield",
      component: textfield_TextfieldPage
    }, {
      text: "Theme",
      link: "/component/theme",
      component: theme_ThemePage
    }, {
      text: "Toolbar",
      link: "/component/toolbar",
      component: toolbar_ToolbarPage
    }];
    _this._handleRoute = _this._handleRoute.bind(_this);
    return _this;
  }

  Home.prototype.closeDrawer = function closeDrawer() {
    this.menu.close();
  };

  Home.prototype.toggleDarkMode = function toggleDarkMode() {
    this.setState({
      darkMode: !this.state.darkMode
    });
    if (this.state.darkMode) {
      document.body.classList.add("mdc-theme--dark");
    } else {
      document.body.classList.remove("mdc-theme--dark");
    }
  };

  Home.prototype._handleRoute = function _handleRoute(e) {
    this.setState({
      toolbarTitle: e.url === "/" ? null : (this.menuItems.find(function (item) {
        return item.link === e.url;
      }) || {}).text
    });
  };

  Home.prototype.render = function render() {
    var _this2 = this;

    return Object(preact_min["h"])(
      "div",
      { className: "home mdc-typography" },
      app__ref,
      Object(preact_min["h"])(
        "div",
        { className: this.state.toolbarTitle ? "hero collapsed" : "hero" },
        Object(preact_min["h"])(
          preact_material_components_Toolbar,
          { className: "mdc-theme--dark" },
          Object(preact_min["h"])(
            preact_material_components_Toolbar.Row,
            null,
            Object(preact_min["h"])(
              preact_material_components_Toolbar.Section,
              { "align-start": true },
              Object(preact_min["h"])(
                preact_material_components_Toolbar.Icon,
                {
                  menu: true,
                  href: "#",
                  onClick: function onClick(e) {
                    e.preventDefault();
                    _this2.menu.open();
                  }
                },
                "menu"
              ),
              Object(preact_min["h"])(
                preact_material_components_Toolbar.Title,
                null,
                this.state.toolbarTitle
              )
            ),
            Object(preact_min["h"])(
              preact_material_components_Toolbar.Section,
              { "align-end": true },
              Object(preact_min["h"])(
                Formfield,
                { className: "field-darkmode" },
                "Dark Mode",
                Object(preact_min["h"])(Switch_Switch, {
                  className: "switch-darkmode",
                  onChange: function onChange() {
                    _this2.toggleDarkMode();
                  }
                })
              )
            )
          )
        ),
        app__ref2,
        app__ref3
      ),
      Object(preact_min["h"])(menu_Menu, { items: this.menuItems, ref: function ref(menu) {
          return _this2.menu = menu;
        } }),
      Object(preact_min["h"])(
        preact_material_components_LayoutGrid,
        { className: "content" },
        Object(preact_min["h"])(
          preact_material_components_LayoutGrid.Inner,
          null,
          Object(preact_min["h"])(
            preact_material_components_LayoutGrid.Cell,
            { cols: "12" },
            Object(preact_min["h"])(
              preact_router_es,
              { onChange: this._handleRoute },
              this.menuItems.map(function (_ref4) {
                var Element = _ref4.component,
                    link = _ref4.link;
                return Object(preact_min["h"])(Element, { path: link });
              }),
              app__ref5
            )
          )
        )
      )
    );
  };

  return Home;
}(preact_min["Component"]);


// EXTERNAL MODULE: ../node_modules/preact-material-components/Typography/style.css
var Typography_style = __webpack_require__("3onB");
var Typography_style_default = /*#__PURE__*/__webpack_require__.n(Typography_style);

// EXTERNAL MODULE: ../node_modules/preact-material-components/Theme/style.css
var Theme_style = __webpack_require__("a81U");
var Theme_style_default = /*#__PURE__*/__webpack_require__.n(Theme_style);

// EXTERNAL MODULE: ./style/index.scss
var style_0 = __webpack_require__("yY49");
var style_default_0 = /*#__PURE__*/__webpack_require__.n(style_0);

// CONCATENATED MODULE: ./index.js
// Components


// Material Components



// Styles


// Export
/* harmony default export */ var index = __webpack_exports__["default"] = (app_Home);

/***/ }),

/***/ "K/3F":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Snackbar from 'preact-material-components/Snackbar';\nimport Button from 'preact-material-components/Button';\nimport 'preact-material-components/Button/style.css';\nimport 'preact-material-components/Snackbar/style.css';\n\nexport default class SnackbarPage extends Component {\n  render(){\n    return (\n      <div>\n        <Button raised={true} primary={true} onClick={()=>{\n          this.bar.MDComponent.show({\n            message: \"Hello Snack!\"\n          });\n        }}>\n            Show snack\n        </Button>\n        <Snackbar ref={bar=>{this.bar=bar;}}/>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "KM04":
/***/ (function(module, exports, __webpack_require__) {

!function () {
  "use strict";
  function e() {}function t(t, n) {
    var o,
        r,
        i,
        l,
        a = E;for (l = arguments.length; l-- > 2;) {
      W.push(arguments[l]);
    }n && null != n.children && (W.length || W.push(n.children), delete n.children);while (W.length) {
      if ((r = W.pop()) && void 0 !== r.pop) for (l = r.length; l--;) {
        W.push(r[l]);
      } else "boolean" == typeof r && (r = null), (i = "function" != typeof t) && (null == r ? r = "" : "number" == typeof r ? r += "" : "string" != typeof r && (i = !1)), i && o ? a[a.length - 1] += r : a === E ? a = [r] : a.push(r), o = i;
    }var u = new e();return u.nodeName = t, u.children = a, u.attributes = null == n ? void 0 : n, u.key = null == n ? void 0 : n.key, void 0 !== S.vnode && S.vnode(u), u;
  }function n(e, t) {
    for (var n in t) {
      e[n] = t[n];
    }return e;
  }function o(e, o) {
    return t(e.nodeName, n(n({}, e.attributes), o), arguments.length > 2 ? [].slice.call(arguments, 2) : e.children);
  }function r(e) {
    !e.__d && (e.__d = !0) && 1 == A.push(e) && (S.debounceRendering || P)(i);
  }function i() {
    var e,
        t = A;A = [];while (e = t.pop()) {
      e.__d && k(e);
    }
  }function l(e, t, n) {
    return "string" == typeof t || "number" == typeof t ? void 0 !== e.splitText : "string" == typeof t.nodeName ? !e._componentConstructor && a(e, t.nodeName) : n || e._componentConstructor === t.nodeName;
  }function a(e, t) {
    return e.__n === t || e.nodeName.toLowerCase() === t.toLowerCase();
  }function u(e) {
    var t = n({}, e.attributes);t.children = e.children;var o = e.nodeName.defaultProps;if (void 0 !== o) for (var r in o) {
      void 0 === t[r] && (t[r] = o[r]);
    }return t;
  }function _(e, t) {
    var n = t ? document.createElementNS("http://www.w3.org/2000/svg", e) : document.createElement(e);return n.__n = e, n;
  }function p(e) {
    var t = e.parentNode;t && t.removeChild(e);
  }function c(e, t, n, o, r) {
    if ("className" === t && (t = "class"), "key" === t) ;else if ("ref" === t) n && n(null), o && o(e);else if ("class" !== t || r) {
      if ("style" === t) {
        if (o && "string" != typeof o && "string" != typeof n || (e.style.cssText = o || ""), o && "object" == typeof o) {
          if ("string" != typeof n) for (var i in n) {
            i in o || (e.style[i] = "");
          }for (var i in o) {
            e.style[i] = "number" == typeof o[i] && !1 === V.test(i) ? o[i] + "px" : o[i];
          }
        }
      } else if ("dangerouslySetInnerHTML" === t) o && (e.innerHTML = o.__html || "");else if ("o" == t[0] && "n" == t[1]) {
        var l = t !== (t = t.replace(/Capture$/, ""));t = t.toLowerCase().substring(2), o ? n || e.addEventListener(t, f, l) : e.removeEventListener(t, f, l), (e.__l || (e.__l = {}))[t] = o;
      } else if ("list" !== t && "type" !== t && !r && t in e) s(e, t, null == o ? "" : o), null != o && !1 !== o || e.removeAttribute(t);else {
        var a = r && t !== (t = t.replace(/^xlink\:?/, ""));null == o || !1 === o ? a ? e.removeAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase()) : e.removeAttribute(t) : "function" != typeof o && (a ? e.setAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase(), o) : e.setAttribute(t, o));
      }
    } else e.className = o || "";
  }function s(e, t, n) {
    try {
      e[t] = n;
    } catch (e) {}
  }function f(e) {
    return this.__l[e.type](S.event && S.event(e) || e);
  }function d() {
    var e;while (e = D.pop()) {
      S.afterMount && S.afterMount(e), e.componentDidMount && e.componentDidMount();
    }
  }function h(e, t, n, o, r, i) {
    H++ || (R = null != r && void 0 !== r.ownerSVGElement, j = null != e && !("__preactattr_" in e));var l = m(e, t, n, o, i);return r && l.parentNode !== r && r.appendChild(l), --H || (j = !1, i || d()), l;
  }function m(e, t, n, o, r) {
    var i = e,
        l = R;if (null != t && "boolean" != typeof t || (t = ""), "string" == typeof t || "number" == typeof t) return e && void 0 !== e.splitText && e.parentNode && (!e._component || r) ? e.nodeValue != t && (e.nodeValue = t) : (i = document.createTextNode(t), e && (e.parentNode && e.parentNode.replaceChild(i, e), b(e, !0))), i.__preactattr_ = !0, i;var u = t.nodeName;if ("function" == typeof u) return U(e, t, n, o);if (R = "svg" === u || "foreignObject" !== u && R, u += "", (!e || !a(e, u)) && (i = _(u, R), e)) {
      while (e.firstChild) {
        i.appendChild(e.firstChild);
      }e.parentNode && e.parentNode.replaceChild(i, e), b(e, !0);
    }var p = i.firstChild,
        c = i.__preactattr_,
        s = t.children;if (null == c) {
      c = i.__preactattr_ = {};for (var f = i.attributes, d = f.length; d--;) {
        c[f[d].name] = f[d].value;
      }
    }return !j && s && 1 === s.length && "string" == typeof s[0] && null != p && void 0 !== p.splitText && null == p.nextSibling ? p.nodeValue != s[0] && (p.nodeValue = s[0]) : (s && s.length || null != p) && v(i, s, n, o, j || null != c.dangerouslySetInnerHTML), g(i, t.attributes, c), R = l, i;
  }function v(e, t, n, o, r) {
    var i,
        a,
        u,
        _,
        c,
        s = e.childNodes,
        f = [],
        d = {},
        h = 0,
        v = 0,
        y = s.length,
        g = 0,
        w = t ? t.length : 0;if (0 !== y) for (var C = 0; C < y; C++) {
      var x = s[C],
          N = x.__preactattr_,
          k = w && N ? x._component ? x._component.__k : N.key : null;null != k ? (h++, d[k] = x) : (N || (void 0 !== x.splitText ? !r || x.nodeValue.trim() : r)) && (f[g++] = x);
    }if (0 !== w) for (var C = 0; C < w; C++) {
      _ = t[C], c = null;var k = _.key;if (null != k) h && void 0 !== d[k] && (c = d[k], d[k] = void 0, h--);else if (!c && v < g) for (i = v; i < g; i++) {
        if (void 0 !== f[i] && l(a = f[i], _, r)) {
          c = a, f[i] = void 0, i === g - 1 && g--, i === v && v++;break;
        }
      }c = m(c, _, n, o), u = s[C], c && c !== e && c !== u && (null == u ? e.appendChild(c) : c === u.nextSibling ? p(u) : e.insertBefore(c, u));
    }if (h) for (var C in d) {
      void 0 !== d[C] && b(d[C], !1);
    }while (v <= g) {
      void 0 !== (c = f[g--]) && b(c, !1);
    }
  }function b(e, t) {
    var n = e._component;n ? L(n) : (null != e.__preactattr_ && e.__preactattr_.ref && e.__preactattr_.ref(null), !1 !== t && null != e.__preactattr_ || p(e), y(e));
  }function y(e) {
    e = e.lastChild;while (e) {
      var t = e.previousSibling;b(e, !0), e = t;
    }
  }function g(e, t, n) {
    var o;for (o in n) {
      t && null != t[o] || null == n[o] || c(e, o, n[o], n[o] = void 0, R);
    }for (o in t) {
      "children" === o || "innerHTML" === o || o in n && t[o] === ("value" === o || "checked" === o ? e[o] : n[o]) || c(e, o, n[o], n[o] = t[o], R);
    }
  }function w(e) {
    var t = e.constructor.name;(I[t] || (I[t] = [])).push(e);
  }function C(e, t, n) {
    var o,
        r = I[e.name];if (e.prototype && e.prototype.render ? (o = new e(t, n), T.call(o, t, n)) : (o = new T(t, n), o.constructor = e, o.render = x), r) for (var i = r.length; i--;) {
      if (r[i].constructor === e) {
        o.__b = r[i].__b, r.splice(i, 1);break;
      }
    }return o;
  }function x(e, t, n) {
    return this.constructor(e, n);
  }function N(e, t, n, o, i) {
    e.__x || (e.__x = !0, (e.__r = t.ref) && delete t.ref, (e.__k = t.key) && delete t.key, !e.base || i ? e.componentWillMount && e.componentWillMount() : e.componentWillReceiveProps && e.componentWillReceiveProps(t, o), o && o !== e.context && (e.__c || (e.__c = e.context), e.context = o), e.__p || (e.__p = e.props), e.props = t, e.__x = !1, 0 !== n && (1 !== n && !1 === S.syncComponentUpdates && e.base ? r(e) : k(e, 1, i)), e.__r && e.__r(e));
  }function k(e, t, o, r) {
    if (!e.__x) {
      var i,
          l,
          a,
          _ = e.props,
          p = e.state,
          c = e.context,
          s = e.__p || _,
          f = e.__s || p,
          m = e.__c || c,
          v = e.base,
          y = e.__b,
          g = v || y,
          w = e._component,
          x = !1;if (v && (e.props = s, e.state = f, e.context = m, 2 !== t && e.shouldComponentUpdate && !1 === e.shouldComponentUpdate(_, p, c) ? x = !0 : e.componentWillUpdate && e.componentWillUpdate(_, p, c), e.props = _, e.state = p, e.context = c), e.__p = e.__s = e.__c = e.__b = null, e.__d = !1, !x) {
        i = e.render(_, p, c), e.getChildContext && (c = n(n({}, c), e.getChildContext()));var U,
            T,
            M = i && i.nodeName;if ("function" == typeof M) {
          var W = u(i);l = w, l && l.constructor === M && W.key == l.__k ? N(l, W, 1, c, !1) : (U = l, e._component = l = C(M, W, c), l.__b = l.__b || y, l.__u = e, N(l, W, 0, c, !1), k(l, 1, o, !0)), T = l.base;
        } else a = g, U = w, U && (a = e._component = null), (g || 1 === t) && (a && (a._component = null), T = h(a, i, c, o || !v, g && g.parentNode, !0));if (g && T !== g && l !== w) {
          var E = g.parentNode;E && T !== E && (E.replaceChild(T, g), U || (g._component = null, b(g, !1)));
        }if (U && L(U), e.base = T, T && !r) {
          var P = e,
              V = e;while (V = V.__u) {
            (P = V).base = T;
          }T._component = P, T._componentConstructor = P.constructor;
        }
      }if (!v || o ? D.unshift(e) : x || (e.componentDidUpdate && e.componentDidUpdate(s, f, m), S.afterUpdate && S.afterUpdate(e)), null != e.__h) while (e.__h.length) {
        e.__h.pop().call(e);
      }H || r || d();
    }
  }function U(e, t, n, o) {
    var r = e && e._component,
        i = r,
        l = e,
        a = r && e._componentConstructor === t.nodeName,
        _ = a,
        p = u(t);while (r && !_ && (r = r.__u)) {
      _ = r.constructor === t.nodeName;
    }return r && _ && (!o || r._component) ? (N(r, p, 3, n, o), e = r.base) : (i && !a && (L(i), e = l = null), r = C(t.nodeName, p, n), e && !r.__b && (r.__b = e, l = null), N(r, p, 1, n, o), e = r.base, l && e !== l && (l._component = null, b(l, !1))), e;
  }function L(e) {
    S.beforeUnmount && S.beforeUnmount(e);var t = e.base;e.__x = !0, e.componentWillUnmount && e.componentWillUnmount(), e.base = null;var n = e._component;n ? L(n) : t && (t.__preactattr_ && t.__preactattr_.ref && t.__preactattr_.ref(null), e.__b = t, p(t), w(e), y(t)), e.__r && e.__r(null);
  }function T(e, t) {
    this.__d = !0, this.context = t, this.props = e, this.state = this.state || {};
  }function M(e, t, n) {
    return h(n, e, {}, !1, t, !1);
  }var S = {},
      W = [],
      E = [],
      P = "function" == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout,
      V = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,
      A = [],
      D = [],
      H = 0,
      R = !1,
      j = !1,
      I = {};n(T.prototype, { setState: function setState(e, t) {
      var o = this.state;this.__s || (this.__s = n({}, o)), n(o, "function" == typeof e ? e(o, this.props) : e), t && (this.__h = this.__h || []).push(t), r(this);
    }, forceUpdate: function forceUpdate(e) {
      e && (this.__h = this.__h || []).push(e), k(this, 2);
    }, render: function render() {} });var $ = { h: t, createElement: t, cloneElement: o, Component: T, render: M, rerender: i, options: S }; true ? module.exports = $ : self.preact = $;
}();
//# sourceMappingURL=preact.min.js.map

/***/ }),

/***/ "LQ60":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "Mip5":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport LayoutGrid from 'preact-material-components/LayoutGrid';\nimport 'preact-material-components/LayoutGrid/style.css';\n\nexport default class LayoutGridPage extends Component {\n  render(){\n    return (\n      <div>\n        <LayoutGrid>\n          <LayoutGrid.Inner>\n            <LayoutGrid.Cell cols=\"6\">First cell</LayoutGrid.Cell>\n            <LayoutGrid.Cell cols=\"4\">Second cell</LayoutGrid.Cell>\n            <LayoutGrid.Cell cols=\"2\">Third cell</LayoutGrid.Cell>\n          </LayoutGrid.Inner>\n        </LayoutGrid>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "MviZ":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "R7gn":
/***/ (function(module, exports, __webpack_require__) {

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

(function (factory) {

  // Find the global object for export to both the browser and web workers.
  var globalObject = typeof window === 'object' && window || typeof self === 'object' && self;

  // Setup highlight.js for different environments. First is Node.js or
  // CommonJS.
  if (true) {
    factory(exports);
  } else if (globalObject) {
    // Export hljs globally even when using AMD for cases when this script
    // is loaded with others that may still expect a global hljs.
    globalObject.hljs = factory({});

    // Finally register the global hljs with AMD.
    if (typeof define === 'function' && define.amd) {
      define([], function () {
        return globalObject.hljs;
      });
    }
  }
})(function (hljs) {
  // Convenience variables for build-in objects
  var ArrayProto = [],
      objectKeys = Object.keys;

  // Global internal variables used within the highlight.js library.
  var languages = {},
      aliases = {};

  // Regular expressions used throughout the highlight.js library.
  var noHighlightRe = /^(no-?highlight|plain|text)$/i,
      languagePrefixRe = /\blang(?:uage)?-([\w-]+)\b/i,
      fixMarkupRe = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;

  var spanEndTag = '</span>';

  // Global options used when within external APIs. This is modified when
  // calling the `hljs.configure` function.
  var options = {
    classPrefix: 'hljs-',
    tabReplace: null,
    useBR: false,
    languages: undefined
  };

  /* Utility functions */

  function escape(value) {
    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  function tag(node) {
    return node.nodeName.toLowerCase();
  }

  function testRe(re, lexeme) {
    var match = re && re.exec(lexeme);
    return match && match.index === 0;
  }

  function isNotHighlighted(language) {
    return noHighlightRe.test(language);
  }

  function blockLanguage(block) {
    var i, match, length, _class;
    var classes = block.className + ' ';

    classes += block.parentNode ? block.parentNode.className : '';

    // language-* takes precedence over non-prefixed class names.
    match = languagePrefixRe.exec(classes);
    if (match) {
      return getLanguage(match[1]) ? match[1] : 'no-highlight';
    }

    classes = classes.split(/\s+/);

    for (i = 0, length = classes.length; i < length; i++) {
      _class = classes[i];

      if (isNotHighlighted(_class) || getLanguage(_class)) {
        return _class;
      }
    }
  }

  function inherit(parent) {
    // inherit(parent, override_obj, override_obj, ...)
    var key;
    var result = {};
    var objects = Array.prototype.slice.call(arguments, 1);

    for (key in parent) {
      result[key] = parent[key];
    }objects.forEach(function (obj) {
      for (key in obj) {
        result[key] = obj[key];
      }
    });
    return result;
  }

  /* Stream merging */

  function nodeStream(node) {
    var result = [];
    (function _nodeStream(node, offset) {
      for (var child = node.firstChild; child; child = child.nextSibling) {
        if (child.nodeType === 3) offset += child.nodeValue.length;else if (child.nodeType === 1) {
          result.push({
            event: 'start',
            offset: offset,
            node: child
          });
          offset = _nodeStream(child, offset);
          // Prevent void elements from having an end tag that would actually
          // double them in the output. There are more void elements in HTML
          // but we list only those realistically expected in code display.
          if (!tag(child).match(/br|hr|img|input/)) {
            result.push({
              event: 'stop',
              offset: offset,
              node: child
            });
          }
        }
      }
      return offset;
    })(node, 0);
    return result;
  }

  function mergeStreams(original, highlighted, value) {
    var processed = 0;
    var result = '';
    var nodeStack = [];

    function selectStream() {
      if (!original.length || !highlighted.length) {
        return original.length ? original : highlighted;
      }
      if (original[0].offset !== highlighted[0].offset) {
        return original[0].offset < highlighted[0].offset ? original : highlighted;
      }

      /*
      To avoid starting the stream just before it should stop the order is
      ensured that original always starts first and closes last:
       if (event1 == 'start' && event2 == 'start')
        return original;
      if (event1 == 'start' && event2 == 'stop')
        return highlighted;
      if (event1 == 'stop' && event2 == 'start')
        return original;
      if (event1 == 'stop' && event2 == 'stop')
        return highlighted;
       ... which is collapsed to:
      */
      return highlighted[0].event === 'start' ? original : highlighted;
    }

    function open(node) {
      function attr_str(a) {
        return ' ' + a.nodeName + '="' + escape(a.value).replace('"', '&quot;') + '"';
      }
      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';
    }

    function close(node) {
      result += '</' + tag(node) + '>';
    }

    function render(event) {
      (event.event === 'start' ? open : close)(event.node);
    }

    while (original.length || highlighted.length) {
      var stream = selectStream();
      result += escape(value.substring(processed, stream[0].offset));
      processed = stream[0].offset;
      if (stream === original) {
        /*
        On any opening or closing tag of the original markup we first close
        the entire highlighted node stack, then render the original tag along
        with all the following original tags at the same offset and then
        reopen all the tags on the highlighted stack.
        */
        nodeStack.reverse().forEach(close);
        do {
          render(stream.splice(0, 1)[0]);
          stream = selectStream();
        } while (stream === original && stream.length && stream[0].offset === processed);
        nodeStack.reverse().forEach(open);
      } else {
        if (stream[0].event === 'start') {
          nodeStack.push(stream[0].node);
        } else {
          nodeStack.pop();
        }
        render(stream.splice(0, 1)[0]);
      }
    }
    return result + escape(value.substr(processed));
  }

  /* Initialization */

  function expand_mode(mode) {
    if (mode.variants && !mode.cached_variants) {
      mode.cached_variants = mode.variants.map(function (variant) {
        return inherit(mode, { variants: null }, variant);
      });
    }
    return mode.cached_variants || mode.endsWithParent && [inherit(mode)] || [mode];
  }

  function compileLanguage(language) {

    function reStr(re) {
      return re && re.source || re;
    }

    function langRe(value, global) {
      return new RegExp(reStr(value), 'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : ''));
    }

    function compileMode(mode, parent) {
      if (mode.compiled) return;
      mode.compiled = true;

      mode.keywords = mode.keywords || mode.beginKeywords;
      if (mode.keywords) {
        var compiled_keywords = {};

        var flatten = function flatten(className, str) {
          if (language.case_insensitive) {
            str = str.toLowerCase();
          }
          str.split(' ').forEach(function (kw) {
            var pair = kw.split('|');
            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
          });
        };

        if (typeof mode.keywords === 'string') {
          // string
          flatten('keyword', mode.keywords);
        } else {
          objectKeys(mode.keywords).forEach(function (className) {
            flatten(className, mode.keywords[className]);
          });
        }
        mode.keywords = compiled_keywords;
      }
      mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);

      if (parent) {
        if (mode.beginKeywords) {
          mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\b';
        }
        if (!mode.begin) mode.begin = /\B|\b/;
        mode.beginRe = langRe(mode.begin);
        if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
        if (mode.end) mode.endRe = langRe(mode.end);
        mode.terminator_end = reStr(mode.end) || '';
        if (mode.endsWithParent && parent.terminator_end) mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
      }
      if (mode.illegal) mode.illegalRe = langRe(mode.illegal);
      if (mode.relevance == null) mode.relevance = 1;
      if (!mode.contains) {
        mode.contains = [];
      }
      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function (c) {
        return expand_mode(c === 'self' ? mode : c);
      }));
      mode.contains.forEach(function (c) {
        compileMode(c, mode);
      });

      if (mode.starts) {
        compileMode(mode.starts, parent);
      }

      var terminators = mode.contains.map(function (c) {
        return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
      }).concat([mode.terminator_end, mode.illegal]).map(reStr).filter(Boolean);
      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : { exec: function exec() /*s*/{
          return null;
        } };
    }

    compileMode(language);
  }

  /*
  Core highlighting function. Accepts a language name, or an alias, and a
  string with the code to highlight. Returns an object with the following
  properties:
   - relevance (int)
  - value (an HTML string with highlighting markup)
   */
  function highlight(name, value, ignore_illegals, continuation) {

    function subMode(lexeme, mode) {
      var i, length;

      for (i = 0, length = mode.contains.length; i < length; i++) {
        if (testRe(mode.contains[i].beginRe, lexeme)) {
          return mode.contains[i];
        }
      }
    }

    function endOfMode(mode, lexeme) {
      if (testRe(mode.endRe, lexeme)) {
        while (mode.endsParent && mode.parent) {
          mode = mode.parent;
        }
        return mode;
      }
      if (mode.endsWithParent) {
        return endOfMode(mode.parent, lexeme);
      }
    }

    function isIllegal(lexeme, mode) {
      return !ignore_illegals && testRe(mode.illegalRe, lexeme);
    }

    function keywordMatch(mode, match) {
      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];
      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];
    }

    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {
      var classPrefix = noPrefix ? '' : options.classPrefix,
          openSpan = '<span class="' + classPrefix,
          closeSpan = leaveOpen ? '' : spanEndTag;

      openSpan += classname + '">';

      return openSpan + insideSpan + closeSpan;
    }

    function processKeywords() {
      var keyword_match, last_index, match, result;

      if (!top.keywords) return escape(mode_buffer);

      result = '';
      last_index = 0;
      top.lexemesRe.lastIndex = 0;
      match = top.lexemesRe.exec(mode_buffer);

      while (match) {
        result += escape(mode_buffer.substring(last_index, match.index));
        keyword_match = keywordMatch(top, match);
        if (keyword_match) {
          relevance += keyword_match[1];
          result += buildSpan(keyword_match[0], escape(match[0]));
        } else {
          result += escape(match[0]);
        }
        last_index = top.lexemesRe.lastIndex;
        match = top.lexemesRe.exec(mode_buffer);
      }
      return result + escape(mode_buffer.substr(last_index));
    }

    function processSubLanguage() {
      var explicit = typeof top.subLanguage === 'string';
      if (explicit && !languages[top.subLanguage]) {
        return escape(mode_buffer);
      }

      var result = explicit ? highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) : highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);

      // Counting embedded language score towards the host language may be disabled
      // with zeroing the containing mode relevance. Usecase in point is Markdown that
      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
      // score.
      if (top.relevance > 0) {
        relevance += result.relevance;
      }
      if (explicit) {
        continuations[top.subLanguage] = result.top;
      }
      return buildSpan(result.language, result.value, false, true);
    }

    function processBuffer() {
      result += top.subLanguage != null ? processSubLanguage() : processKeywords();
      mode_buffer = '';
    }

    function startNewMode(mode) {
      result += mode.className ? buildSpan(mode.className, '', true) : '';
      top = Object.create(mode, { parent: { value: top } });
    }

    function processLexeme(buffer, lexeme) {

      mode_buffer += buffer;

      if (lexeme == null) {
        processBuffer();
        return 0;
      }

      var new_mode = subMode(lexeme, top);
      if (new_mode) {
        if (new_mode.skip) {
          mode_buffer += lexeme;
        } else {
          if (new_mode.excludeBegin) {
            mode_buffer += lexeme;
          }
          processBuffer();
          if (!new_mode.returnBegin && !new_mode.excludeBegin) {
            mode_buffer = lexeme;
          }
        }
        startNewMode(new_mode, lexeme);
        return new_mode.returnBegin ? 0 : lexeme.length;
      }

      var end_mode = endOfMode(top, lexeme);
      if (end_mode) {
        var origin = top;
        if (origin.skip) {
          mode_buffer += lexeme;
        } else {
          if (!(origin.returnEnd || origin.excludeEnd)) {
            mode_buffer += lexeme;
          }
          processBuffer();
          if (origin.excludeEnd) {
            mode_buffer = lexeme;
          }
        }
        do {
          if (top.className) {
            result += spanEndTag;
          }
          if (!top.skip) {
            relevance += top.relevance;
          }
          top = top.parent;
        } while (top !== end_mode.parent);
        if (end_mode.starts) {
          startNewMode(end_mode.starts, '');
        }
        return origin.returnEnd ? 0 : lexeme.length;
      }

      if (isIllegal(lexeme, top)) throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');

      /*
      Parser should not reach this point as all types of lexemes should be caught
      earlier, but if it does due to some bug make sure it advances at least one
      character forward to prevent infinite looping.
      */
      mode_buffer += lexeme;
      return lexeme.length || 1;
    }

    var language = getLanguage(name);
    if (!language) {
      throw new Error('Unknown language: "' + name + '"');
    }

    compileLanguage(language);
    var top = continuation || language;
    var continuations = {}; // keep continuations for sub-languages
    var result = '',
        current;
    for (current = top; current !== language; current = current.parent) {
      if (current.className) {
        result = buildSpan(current.className, '', true) + result;
      }
    }
    var mode_buffer = '';
    var relevance = 0;
    try {
      var match,
          count,
          index = 0;
      while (true) {
        top.terminators.lastIndex = index;
        match = top.terminators.exec(value);
        if (!match) break;
        count = processLexeme(value.substring(index, match.index), match[0]);
        index = match.index + count;
      }
      processLexeme(value.substr(index));
      for (current = top; current.parent; current = current.parent) {
        // close dangling modes
        if (current.className) {
          result += spanEndTag;
        }
      }
      return {
        relevance: relevance,
        value: result,
        language: name,
        top: top
      };
    } catch (e) {
      if (e.message && e.message.indexOf('Illegal') !== -1) {
        return {
          relevance: 0,
          value: escape(value)
        };
      } else {
        throw e;
      }
    }
  }

  /*
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:
   - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - second_best (object with the same structure for second-best heuristically
    detected language, may be absent)
   */
  function highlightAuto(text, languageSubset) {
    languageSubset = languageSubset || options.languages || objectKeys(languages);
    var result = {
      relevance: 0,
      value: escape(text)
    };
    var second_best = result;
    languageSubset.filter(getLanguage).forEach(function (name) {
      var current = highlight(name, text, false);
      current.language = name;
      if (current.relevance > second_best.relevance) {
        second_best = current;
      }
      if (current.relevance > result.relevance) {
        second_best = result;
        result = current;
      }
    });
    if (second_best.language) {
      result.second_best = second_best;
    }
    return result;
  }

  /*
  Post-processing of the highlighted markup:
   - replace TABs with something more useful
  - replace real line-breaks with '<br>' for non-pre containers
   */
  function fixMarkup(value) {
    return !(options.tabReplace || options.useBR) ? value : value.replace(fixMarkupRe, function (match, p1) {
      if (options.useBR && match === '\n') {
        return '<br>';
      } else if (options.tabReplace) {
        return p1.replace(/\t/g, options.tabReplace);
      }
      return '';
    });
  }

  function buildClassName(prevClassName, currentLang, resultLang) {
    var language = currentLang ? aliases[currentLang] : resultLang,
        result = [prevClassName.trim()];

    if (!prevClassName.match(/\bhljs\b/)) {
      result.push('hljs');
    }

    if (prevClassName.indexOf(language) === -1) {
      result.push(language);
    }

    return result.join(' ').trim();
  }

  /*
  Applies highlighting to a DOM node containing code. Accepts a DOM node and
  two optional parameters for fixMarkup.
  */
  function highlightBlock(block) {
    var node, originalStream, result, resultNode, text;
    var language = blockLanguage(block);

    if (isNotHighlighted(language)) return;

    if (options.useBR) {
      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
      node.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ \/]*>/g, '\n');
    } else {
      node = block;
    }
    text = node.textContent;
    result = language ? highlight(language, text, true) : highlightAuto(text);

    originalStream = nodeStream(node);
    if (originalStream.length) {
      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
      resultNode.innerHTML = result.value;
      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
    }
    result.value = fixMarkup(result.value);

    block.innerHTML = result.value;
    block.className = buildClassName(block.className, language, result.language);
    block.result = {
      language: result.language,
      re: result.relevance
    };
    if (result.second_best) {
      block.second_best = {
        language: result.second_best.language,
        re: result.second_best.relevance
      };
    }
  }

  /*
  Updates highlight.js global options with values passed in the form of an object.
  */
  function configure(user_options) {
    options = inherit(options, user_options);
  }

  /*
  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
  */
  function initHighlighting() {
    if (initHighlighting.called) return;
    initHighlighting.called = true;

    var blocks = document.querySelectorAll('pre code');
    ArrayProto.forEach.call(blocks, highlightBlock);
  }

  /*
  Attaches highlighting to the page load event.
  */
  function initHighlightingOnLoad() {
    addEventListener('DOMContentLoaded', initHighlighting, false);
    addEventListener('load', initHighlighting, false);
  }

  function registerLanguage(name, language) {
    var lang = languages[name] = language(hljs);
    if (lang.aliases) {
      lang.aliases.forEach(function (alias) {
        aliases[alias] = name;
      });
    }
  }

  function listLanguages() {
    return objectKeys(languages);
  }

  function getLanguage(name) {
    name = (name || '').toLowerCase();
    return languages[name] || languages[aliases[name]];
  }

  /* Interface definition */

  hljs.highlight = highlight;
  hljs.highlightAuto = highlightAuto;
  hljs.fixMarkup = fixMarkup;
  hljs.highlightBlock = highlightBlock;
  hljs.configure = configure;
  hljs.initHighlighting = initHighlighting;
  hljs.initHighlightingOnLoad = initHighlightingOnLoad;
  hljs.registerLanguage = registerLanguage;
  hljs.listLanguages = listLanguages;
  hljs.getLanguage = getLanguage;
  hljs.inherit = inherit;

  // Common regexps
  hljs.IDENT_RE = '[a-zA-Z]\\w*';
  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
  hljs.NUMBER_RE = '\\b\\d+(\\.\\d+)?';
  hljs.C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
  hljs.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

  // Common modes
  hljs.BACKSLASH_ESCAPE = {
    begin: '\\\\[\\s\\S]', relevance: 0
  };
  hljs.APOS_STRING_MODE = {
    className: 'string',
    begin: '\'', end: '\'',
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  hljs.QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"', end: '"',
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  hljs.PHRASAL_WORDS_MODE = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  };
  hljs.COMMENT = function (begin, end, inherits) {
    var mode = hljs.inherit({
      className: 'comment',
      begin: begin, end: end,
      contains: []
    }, inherits || {});
    mode.contains.push(hljs.PHRASAL_WORDS_MODE);
    mode.contains.push({
      className: 'doctag',
      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
      relevance: 0
    });
    return mode;
  };
  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');
  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\*', '\\*/');
  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');
  hljs.NUMBER_MODE = {
    className: 'number',
    begin: hljs.NUMBER_RE,
    relevance: 0
  };
  hljs.C_NUMBER_MODE = {
    className: 'number',
    begin: hljs.C_NUMBER_RE,
    relevance: 0
  };
  hljs.BINARY_NUMBER_MODE = {
    className: 'number',
    begin: hljs.BINARY_NUMBER_RE,
    relevance: 0
  };
  hljs.CSS_NUMBER_MODE = {
    className: 'number',
    begin: hljs.NUMBER_RE + '(' + '%|em|ex|ch|rem' + '|vw|vh|vmin|vmax' + '|cm|mm|in|pt|pc|px' + '|deg|grad|rad|turn' + '|s|ms' + '|Hz|kHz' + '|dpi|dpcm|dppx' + ')?',
    relevance: 0
  };
  hljs.REGEXP_MODE = {
    className: 'regexp',
    begin: /\//, end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [hljs.BACKSLASH_ESCAPE, {
      begin: /\[/, end: /\]/,
      relevance: 0,
      contains: [hljs.BACKSLASH_ESCAPE]
    }]
  };
  hljs.TITLE_MODE = {
    className: 'title',
    begin: hljs.IDENT_RE,
    relevance: 0
  };
  hljs.UNDERSCORE_TITLE_MODE = {
    className: 'title',
    begin: hljs.UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  hljs.METHOD_GUARD = {
    // excludes method names from keyword processing
    begin: '\\.\\s*' + hljs.UNDERSCORE_IDENT_RE,
    relevance: 0
  };

  return hljs;
});

/***/ }),

/***/ "TO+D":
/***/ (function(module, exports) {

module.exports = function (el, options) {
  options = options || {};

  var elementDocument = el.ownerDocument;
  var basicTabbables = [];
  var orderedTabbables = [];

  // A node is "available" if
  // - it's computed style
  var isUnavailable = createIsUnavailable(elementDocument);

  var candidateSelectors = ['input', 'select', 'a[href]', 'textarea', 'button', '[tabindex]'];

  var candidates = el.querySelectorAll(candidateSelectors);

  if (options.includeContainer) {
    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

    if (candidateSelectors.some(function (candidateSelector) {
      return matches.call(el, candidateSelector);
    })) {
      candidates = Array.prototype.slice.apply(candidates);
      candidates.unshift(el);
    }
  }

  var candidate, candidateIndex;
  for (var i = 0, l = candidates.length; i < l; i++) {
    candidate = candidates[i];
    candidateIndex = parseInt(candidate.getAttribute('tabindex'), 10) || candidate.tabIndex;

    if (candidateIndex < 0 || candidate.tagName === 'INPUT' && candidate.type === 'hidden' || candidate.disabled || isUnavailable(candidate, elementDocument)) {
      continue;
    }

    if (candidateIndex === 0) {
      basicTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        index: i,
        tabIndex: candidateIndex,
        node: candidate
      });
    }
  }

  var tabbableNodes = orderedTabbables.sort(function (a, b) {
    return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;
  }).map(function (a) {
    return a.node;
  });

  Array.prototype.push.apply(tabbableNodes, basicTabbables);

  return tabbableNodes;
};

function createIsUnavailable(elementDocument) {
  // Node cache must be refreshed on every check, in case
  // the content of the element has changed
  var isOffCache = [];

  // "off" means `display: none;`, as opposed to "hidden",
  // which means `visibility: hidden;`. getComputedStyle
  // accurately reflects visiblity in context but not
  // "off" state, so we need to recursively check parents.

  function isOff(node, nodeComputedStyle) {
    if (node === elementDocument.documentElement) return false;

    // Find the cached node (Array.prototype.find not available in IE9)
    for (var i = 0, length = isOffCache.length; i < length; i++) {
      if (isOffCache[i][0] === node) return isOffCache[i][1];
    }

    nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);

    var result = false;

    if (nodeComputedStyle.display === 'none') {
      result = true;
    } else if (node.parentNode) {
      result = isOff(node.parentNode);
    }

    isOffCache.push([node, result]);

    return result;
  }

  return function isUnavailable(node) {
    if (node === elementDocument.documentElement) return false;

    var computedStyle = elementDocument.defaultView.getComputedStyle(node);

    if (isOff(node, computedStyle)) return true;

    return computedStyle.visibility === 'hidden';
  };
}

/***/ }),

/***/ "UfTO":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "V4tZ":
/***/ (function(module, exports) {

module.exports = "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"/>"

/***/ }),

/***/ "VSmG":
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var LITERALS = { literal: 'true false null' };
  var TYPES = [hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE];
  var VALUE_CONTAINER = {
    end: ',', endsWithParent: true, excludeEnd: true,
    contains: TYPES,
    keywords: LITERALS
  };
  var OBJECT = {
    begin: '{', end: '}',
    contains: [{
      className: 'attr',
      begin: /"/, end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE],
      illegal: '\\n'
    }, hljs.inherit(VALUE_CONTAINER, { begin: /:/ })],
    illegal: '\\S'
  };
  var ARRAY = {
    begin: '\\[', end: '\\]',
    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
    illegal: '\\S'
  };
  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
  return {
    contains: TYPES,
    keywords: LITERALS,
    illegal: '\\S'
  };
};

/***/ }),

/***/ "WeSf":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Drawer from 'preact-material-components/Drawer';\nimport List from 'preact-material-components/List';\nimport Button from 'preact-material-components/Button';\nimport 'preact-material-components/Drawer/style.css';\nimport 'preact-material-components/List/style.css';\nimport 'preact-material-components/Button/style.css';\n\nexport default class DrawerPage extends Component {\n  constructor(){\n    super();\n    this.state = {\n      drawerOpened = false\n    };\n  }\n  render(){\n    return (\n      <div>\n        <Button onClick={() => {\n            this.setState({\n              drawerOpened: !this.state.drawerOpened\n            })\n          }}\n        >\n          Open Drawer\n        </Button>\n        <Drawer.TemporaryDrawer open={this.state.drawerOpened} onClose={() => {\n            this.setState({\n              drawerOpened: false\n            });\n          }}\n        >\n          <Drawer.TemporaryDrawerHeader className=\"mdc-theme--primary-bg\">\n            Components\n          </Drawer.TemporaryDrawerHeader>\n          <Drawer.TemporaryDrawerContent>\n            <List>\n              <List.LinkItem>\n                  <List.ItemIcon>home</List.ItemIcon>\n                  Home\n              </List.LinkItem>\n            </List>\n          </Drawer.TemporaryDrawerContent>\n        </Drawer.TemporaryDrawer>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "WtcB":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport LinearProgress from 'preact-material-components/LinearProgress';\nimport 'preact-material-components/LinearProgress/style.css';\n\nexport default class SnackbarPage extends Component {\n  render(){\n    return (\n      <div>\n        <LinearProgress reversed={true} />\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "XxRI":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"page-theme":"page-theme__2IZK4","css-prop-override":"css-prop-override__PoL3E","css-var-override":"css-var-override__3qNTG","parentbox":"parentbox__1KN_B","box":"box__2VOKi","cell":"cell__1T8UQ"};

/***/ }),

/***/ "Yr+x":
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var KEYWORDS = {
    keyword: 'in of if for while finally var new function do return void else break catch ' + 'instanceof with throw case default try this switch continue typeof delete ' + 'let yield const export super debugger as async await static ' +
    // ECMAScript 6 modules import
    'import from as',

    literal: 'true false null undefined NaN Infinity',
    built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' + 'TypeError URIError Number Math Date String RegExp Array Float32Array ' + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' + 'Promise'
  };
  var EXPRESSIONS;
  var NUMBER = {
    className: 'number',
    variants: [{ begin: '\\b(0[bB][01]+)' }, { begin: '\\b(0[oO][0-7]+)' }, { begin: hljs.C_NUMBER_RE }],
    relevance: 0
  };
  var SUBST = {
    className: 'subst',
    begin: '\\$\\{', end: '\\}',
    keywords: KEYWORDS,
    contains: [] // defined later
  };
  var TEMPLATE_STRING = {
    className: 'string',
    begin: '`', end: '`',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST]
  };
  SUBST.contains = [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, TEMPLATE_STRING, NUMBER, hljs.REGEXP_MODE];
  var PARAMS_CONTAINS = SUBST.contains.concat([hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE]);

  return {
    aliases: ['js', 'jsx'],
    keywords: KEYWORDS,
    contains: [{
      className: 'meta',
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, {
      className: 'meta',
      begin: /^#!/, end: /$/
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, TEMPLATE_STRING, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBER, { // object attr container
      begin: /[{,]\s*/, relevance: 0,
      contains: [{
        begin: IDENT_RE + '\\s*:', returnBegin: true,
        relevance: 0,
        contains: [{ className: 'attr', begin: IDENT_RE, relevance: 0 }]
      }]
    }, { // "value" container
      begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
      keywords: 'return throw case',
      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.REGEXP_MODE, {
        className: 'function',
        begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
        end: '\\s*=>',
        contains: [{
          className: 'params',
          variants: [{
            begin: IDENT_RE
          }, {
            begin: /\(\s*\)/
          }, {
            begin: /\(/, end: /\)/,
            excludeBegin: true, excludeEnd: true,
            keywords: KEYWORDS,
            contains: PARAMS_CONTAINS
          }]
        }]
      }, { // E4X / JSX
        begin: /</, end: /(\/\w+|\w+\/)>/,
        subLanguage: 'xml',
        contains: [{ begin: /<\w+\s*\/>/, skip: true }, {
          begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
          contains: [{ begin: /<\w+\s*\/>/, skip: true }, 'self']
        }]
      }],
      relevance: 0
    }, {
      className: 'function',
      beginKeywords: 'function', end: /\{/, excludeEnd: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE }), {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        contains: PARAMS_CONTAINS
      }],
      illegal: /\[|%/
    }, {
      begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
    }, hljs.METHOD_GUARD, { // ES6 class
      className: 'class',
      beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
      illegal: /[:"\[\]]/,
      contains: [{ beginKeywords: 'extends' }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      beginKeywords: 'constructor', end: /\{/, excludeEnd: true
    }],
    illegal: /#(?!!)/
  };
};

/***/ }),

/***/ "a81U":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "bKgJ":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Fab from 'preact-material-components/Fab';\nimport 'preact-material-components/Fab/style.css';\n\nexport default class FabPage extends Component {\n  render(){\n    return (\n      <div>\n        <Fab>\n          <Icon>favorite_border</Icon>\n        </Fab>\n        <Fab ripple={true}>\n          <Icon>favorite_border</Icon>\n        </Fab>\n        <Fab mini={true}>\n          <Icon>favorite_border</Icon>\n        </Fab>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "ewDS":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "fG5c":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "fWpu":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"page-switch":"page-switch__R2NXu"};

/***/ }),

/***/ "frf2":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "g/3n":
/***/ (function(module, exports) {

module.exports = "import {Button, Fab, Snackbar} from 'preact-material-component';"

/***/ }),

/***/ "gT5u":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "iDKb":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Menu from 'preact-material-components/Menu';\nimport Button from 'preact-material-components/Button';\nimport 'preact-material-components/List/style.css';\nimport 'preact-material-components/Menu/style.css';\nimport 'preact-material-components/Button/style.css';\n\nexport default class MenuPage extends Component {\n  render(){\n    return (\n      <div>\n        <Menu.Anchor>\n          <Button\n            onClick={e => {\n              this.menu.MDComponent.open = true;\n            }}\n          >\n            Click for menu\n          </Button>\n          <Menu\n            ref={menu => {\n              this.menu = menu;\n            }}\n          >\n            <Menu.Item>Hello1</Menu.Item>\n            <Menu.Item>Hello2</Menu.Item>\n            <Menu.Item>Hello3</Menu.Item>\n          </Menu>\n        </Menu.Anchor>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "iRQC":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Select from 'preact-material-components/Select';\nimport 'preact-material-components/List/style.css';\nimport 'preact-material-components/Menu/style.css';\nimport 'preact-material-components/Select/style.css';\n\nexport default class SelectPage extends Component {\n  render(){\n    return (\n      <div>\n        <Select hintText=\"Select an option\"\n          ref={presel=>{this.presel = presel;}}\n          selectedIndex={this.state.chosenIndex}\n          onChange={(e)=>{\n            this.setState({\n              chosenIndex: e.selectedIndex\n            });\n            //selected option\n            console.log(e.selectedOption);\n          }}>\n            <Select.Item>opt1</Select.Item>\n            <Select.Item>opt2</Select.Item>\n            <Select.Item>opt3</Select.Item>\n            <Select.Item>opt4</Select.Item>\n        </Select>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "nVyQ":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Checkbox from 'preact-material-components/Checkbox';\nimport FormField from 'preact-material-components/FormField';\nimport 'preact-material-components/Checkbox/style.css';\n\nexport default class CheckboxPage extends Component {\n  render(){\n    return (\n      <FormField>\n        <Checkbox id=\"basic-checkbox\" ref={cb=>{this.cb=cb;}}/>\n        <label for=\"basic-checkbox\" id=\"basic-checkbox-label\">This is my checkbox</label>\n      </FormField>\n    );\n  }\n}\n"

/***/ }),

/***/ "oqLc":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport List from 'preact-material-components/List';\nimport Formfield from 'preact-material-components/Formfield';\nimport 'preact-material-components/List/style.css';\n\nexport default class ListPage extends Component {\n  const toggleOnIcon = {\n    content: \"favorite\",\n    label: \"Remove From Favorites\"\n  };\n  const toggleOffIcon = {\n    content: \"favorite_border\",\n    label: \"Add to Favorites\"\n  };\n  render(){\n    return (\n      <div>\n        <IconToggle\n          role=\"button\"\n          tabindex=\"0\"\n          aria-pressed=\"false\"\n          aria-label=\"Add to favorites\"\n          data-toggle-on={toggleOnIcon}\n          data-toggle-off={toggleOffIcon}\n        >\n          favorite_border\n        </IconToggle>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "pdCL":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport List from 'preact-material-components/List';\nimport 'preact-material-components/List/style.css';\n\nexport default class ListPage extends Component {\n  render(){\n    return (\n      <div>\n        <List>\n          <List.Item>Item1</List.Item>\n          <List.Item>Item2</List.Item>\n          <List.Item>Item3</List.Item>\n          <List.Item>Item4</List.Item>\n          <List.Item>Item5</List.Item>\n        </List>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "pu9d":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Icon from 'preact-material-components/Icon';\n\nexport default class ListPage extends Component {\n  render(){\n    return (\n      <div>\n        <div><Icon>menu</Icon></div>\n        <div><Icon>favorite_border</Icon></div>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "r/eL":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Dialog from 'preact-material-components/Dialog';\nimport Button from 'preact-material-components/Button';\nimport List from 'preact-material-components/List';\nimport 'preact-material-components/List/style.css';\nimport 'preact-material-components/Button/style.css';\nimport 'preact-material-components/Dialog/style.css';\n\nexport default class DialogPage extends Component {\n  render(){\n    return (\n      <div>\n        <Button primary={true} raised={true} onClick={()=>{\n          this.scrollingDlg.MDComponent.show();\n        }}>\n          Show Scrollable Dialog\n        </Button>\n        <Dialog ref={scrollingDlg=>{this.scrollingDlg=scrollingDlg;}}>\n          <Dialog.Header>Scroll for me ;)</Dialog.Header>\n          <Dialog.Body scrollable={true}>\n            <List>\n              <List.Item>Item 1</List.Item>\n              <List.Item>Item 2</List.Item>\n              <List.Item>Item 3</List.Item>\n              <List.Item>Item 4</List.Item>\n              <List.Item>Item 5</List.Item>\n            </List>\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Dialog.FooterButton cancel={true}>Decline</Dialog.FooterButton>\n            <Dialog.FooterButton accept={true}>Accept</Dialog.FooterButton>\n          </Dialog.Footer>\n        </Dialog>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "riNH":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "rnIz":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "tJYt":
/***/ (function(module, exports) {

module.exports = "import {h, Component} from 'preact';\nimport Card from 'preact-material-components/Card';\nimport 'preact-material-components/Card/style.css';\nimport 'preact-material-components/Button/style.css';\n\nexport default class CardsPage extends Component {\n  render(){\n    return (\n      <div>\n        <Card>\n          <Card.Primary>\n            <Card.Title>Hi</Card.Title>\n            <Card.Subtitle>Let me subtitle</Card.Subtitle>\n          </Card.Primary>\n          <Card.Media className='card-media'></Card.Media>\n          <Card.Actions>\n            <Card.Action>OKAY</Card.Action>\n          </Card.Actions>\n        </Card>\n        <Card>\n          <Card.HorizontalBlock>\n            <Card.Primary>\n              <Card.Title large>Hi</Card.Title>\n              <Card.Subtitle>Let me subtitle</Card.Subtitle>\n            </Card.Primary>\n            <Card.MediaItem src=\"some-picture.jpg\" x=\"1dot5\" />\n          </Card.HorizontalBlock>\n          <Card.Actions>\n            <Card.Action>OKAY</Card.Action>\n          </Card.Actions>\n        </Card>\n      </div>\n    );\n  }\n}\n"

/***/ }),

/***/ "ySUw":
/***/ (function(module, exports, __webpack_require__) {

var tabbable = __webpack_require__("TO+D");

var listeningFocusTrap = null;

function focusTrap(element, userOptions) {
  var tabbableNodes = [];
  var nodeFocusedBeforeActivation = null;
  var active = false;
  var paused = false;

  var container = typeof element === 'string' ? document.querySelector(element) : element;

  var config = userOptions || {};
  config.returnFocusOnDeactivate = userOptions && userOptions.returnFocusOnDeactivate !== undefined ? userOptions.returnFocusOnDeactivate : true;
  config.escapeDeactivates = userOptions && userOptions.escapeDeactivates !== undefined ? userOptions.escapeDeactivates : true;

  var trap = {
    activate: activate,
    deactivate: deactivate,
    pause: pause,
    unpause: unpause
  };

  return trap;

  function activate(activateOptions) {
    if (active) return;

    var defaultedActivateOptions = {
      onActivate: activateOptions && activateOptions.onActivate !== undefined ? activateOptions.onActivate : config.onActivate
    };

    active = true;
    paused = false;
    nodeFocusedBeforeActivation = document.activeElement;

    if (defaultedActivateOptions.onActivate) {
      defaultedActivateOptions.onActivate();
    }

    addListeners();
    return trap;
  }

  function deactivate(deactivateOptions) {
    if (!active) return;

    var defaultedDeactivateOptions = {
      returnFocus: deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate,
      onDeactivate: deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate
    };

    removeListeners();

    if (defaultedDeactivateOptions.onDeactivate) {
      defaultedDeactivateOptions.onDeactivate();
    }

    if (defaultedDeactivateOptions.returnFocus) {
      setTimeout(function () {
        tryFocus(nodeFocusedBeforeActivation);
      }, 0);
    }

    active = false;
    paused = false;
    return this;
  }

  function pause() {
    if (paused || !active) return;
    paused = true;
    removeListeners();
  }

  function unpause() {
    if (!paused || !active) return;
    paused = false;
    addListeners();
  }

  function addListeners() {
    if (!active) return;

    // There can be only one listening focus trap at a time
    if (listeningFocusTrap) {
      listeningFocusTrap.pause();
    }
    listeningFocusTrap = trap;

    updateTabbableNodes();
    tryFocus(firstFocusNode());
    document.addEventListener('focus', checkFocus, true);
    document.addEventListener('click', checkClick, true);
    document.addEventListener('mousedown', checkPointerDown, true);
    document.addEventListener('touchstart', checkPointerDown, true);
    document.addEventListener('keydown', checkKey, true);

    return trap;
  }

  function removeListeners() {
    if (!active || listeningFocusTrap !== trap) return;

    document.removeEventListener('focus', checkFocus, true);
    document.removeEventListener('click', checkClick, true);
    document.removeEventListener('mousedown', checkPointerDown, true);
    document.removeEventListener('touchstart', checkPointerDown, true);
    document.removeEventListener('keydown', checkKey, true);

    listeningFocusTrap = null;

    return trap;
  }

  function getNodeForOption(optionName) {
    var optionValue = config[optionName];
    var node = optionValue;
    if (!optionValue) {
      return null;
    }
    if (typeof optionValue === 'string') {
      node = document.querySelector(optionValue);
      if (!node) {
        throw new Error('`' + optionName + '` refers to no known node');
      }
    }
    if (typeof optionValue === 'function') {
      node = optionValue();
      if (!node) {
        throw new Error('`' + optionName + '` did not return a node');
      }
    }
    return node;
  }

  function firstFocusNode() {
    var node;
    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (container.contains(document.activeElement)) {
      node = document.activeElement;
    } else {
      node = tabbableNodes[0] || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error('You can\'t have a focus-trap without at least one focusable element');
    }

    return node;
  }

  // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event
  function checkPointerDown(e) {
    if (config.clickOutsideDeactivates && !container.contains(e.target)) {
      deactivate({ returnFocus: false });
    }
  }

  function checkClick(e) {
    if (config.clickOutsideDeactivates) return;
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
  }

  function checkFocus(e) {
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
    // Checking for a blur method here resolves a Firefox issue (#15)
    if (typeof e.target.blur === 'function') e.target.blur();
  }

  function checkKey(e) {
    if (e.key === 'Tab' || e.keyCode === 9) {
      handleTab(e);
    }

    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      deactivate();
    }
  }

  function handleTab(e) {
    e.preventDefault();
    updateTabbableNodes();
    var currentFocusIndex = tabbableNodes.indexOf(e.target);
    var lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
    var firstTabbableNode = tabbableNodes[0];

    if (e.shiftKey) {
      if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {
        return tryFocus(lastTabbableNode);
      }
      return tryFocus(tabbableNodes[currentFocusIndex - 1]);
    }

    if (e.target === lastTabbableNode) return tryFocus(firstTabbableNode);

    tryFocus(tabbableNodes[currentFocusIndex + 1]);
  }

  function updateTabbableNodes() {
    tabbableNodes = tabbable(container);
  }
}

function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
}

function tryFocus(node) {
  if (!node || !node.focus) return;
  node.focus();
  if (node.tagName.toLowerCase() === 'input') {
    node.select();
  }
}

module.exports = focusTrap;

/***/ }),

/***/ "yY49":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })

/******/ });
//# sourceMappingURL=ssr-bundle.js.map